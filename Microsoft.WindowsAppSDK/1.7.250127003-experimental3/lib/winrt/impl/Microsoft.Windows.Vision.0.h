// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_Vision_0_H
#define WINRT_Microsoft_Windows_Vision_0_H
WINRT_EXPORT namespace winrt::Microsoft::Graphics::Imaging
{
    struct ImageBuffer;
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Workloads
{
    enum class WorkloadPriority : int32_t;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct Point;
}
WINRT_EXPORT namespace winrt::Windows::Graphics
{
    struct SizeInt32;
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Vision
{
    enum class DetectedLineStyle : int32_t
    {
        Handwritten = 0,
        Other = 1,
    };
    enum class OrientationDetectionOptions : int32_t
    {
        None = 0,
        DetectOrientation = 1,
    };
    struct IRecognizedLine;
    struct IRecognizedText;
    struct IRecognizedWord;
    struct ITextRecognizer;
    struct ITextRecognizer2;
    struct ITextRecognizerOptions;
    struct ITextRecognizerStatics;
    struct RecognizedLine;
    struct RecognizedText;
    struct RecognizedWord;
    struct TextRecognizer;
    struct TextRecognizerOptions;
    struct BoundingBox;
    struct RecognizedLineStyle;
    struct TextRecognitionContract;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::Vision::IRecognizedLine>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Vision::IRecognizedText>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Vision::IRecognizedWord>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Vision::ITextRecognizer>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Vision::ITextRecognizer2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Vision::ITextRecognizerOptions>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Vision::ITextRecognizerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Vision::RecognizedLine>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Vision::RecognizedText>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Vision::RecognizedWord>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Vision::TextRecognizer>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Vision::TextRecognizerOptions>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Vision::DetectedLineStyle>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Vision::OrientationDetectionOptions>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Vision::BoundingBox>{ using type = struct_category<winrt::Windows::Foundation::Point, winrt::Windows::Foundation::Point, winrt::Windows::Foundation::Point, winrt::Windows::Foundation::Point>; };
    template <> struct category<winrt::Microsoft::Windows::Vision::RecognizedLineStyle>{ using type = struct_category<float, winrt::Microsoft::Windows::Vision::DetectedLineStyle>; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Vision::RecognizedLine> = L"Microsoft.Windows.Vision.RecognizedLine";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Vision::RecognizedText> = L"Microsoft.Windows.Vision.RecognizedText";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Vision::RecognizedWord> = L"Microsoft.Windows.Vision.RecognizedWord";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Vision::TextRecognizer> = L"Microsoft.Windows.Vision.TextRecognizer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Vision::TextRecognizerOptions> = L"Microsoft.Windows.Vision.TextRecognizerOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Vision::DetectedLineStyle> = L"Microsoft.Windows.Vision.DetectedLineStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Vision::OrientationDetectionOptions> = L"Microsoft.Windows.Vision.OrientationDetectionOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Vision::BoundingBox> = L"Microsoft.Windows.Vision.BoundingBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Vision::RecognizedLineStyle> = L"Microsoft.Windows.Vision.RecognizedLineStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Vision::IRecognizedLine> = L"Microsoft.Windows.Vision.IRecognizedLine";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Vision::IRecognizedText> = L"Microsoft.Windows.Vision.IRecognizedText";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Vision::IRecognizedWord> = L"Microsoft.Windows.Vision.IRecognizedWord";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Vision::ITextRecognizer> = L"Microsoft.Windows.Vision.ITextRecognizer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Vision::ITextRecognizer2> = L"Microsoft.Windows.Vision.ITextRecognizer2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Vision::ITextRecognizerOptions> = L"Microsoft.Windows.Vision.ITextRecognizerOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Vision::ITextRecognizerStatics> = L"Microsoft.Windows.Vision.ITextRecognizerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Vision::TextRecognitionContract> = L"Microsoft.Windows.Vision.TextRecognitionContract";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Vision::IRecognizedLine>{ 0xD2BC3061,0xC751,0x52C2,{ 0x90,0x2A,0x72,0xB2,0xFE,0x9B,0xF1,0xE3 } }; // D2BC3061-C751-52C2-902A-72B2FE9BF1E3
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Vision::IRecognizedText>{ 0x35241760,0xDC1D,0x564E,{ 0xB3,0xD8,0xC4,0x93,0x42,0x12,0x13,0x73 } }; // 35241760-DC1D-564E-B3D8-C49342121373
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Vision::IRecognizedWord>{ 0xA71B8929,0xC0C2,0x56AA,{ 0x82,0x5A,0x55,0x6F,0x5F,0xAF,0x44,0xD5 } }; // A71B8929-C0C2-56AA-825A-556F5FAF44D5
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Vision::ITextRecognizer>{ 0x1D626392,0x60D0,0x5D1B,{ 0x82,0x24,0x04,0xB6,0x01,0x6C,0x0A,0xA9 } }; // 1D626392-60D0-5D1B-8224-04B6016C0AA9
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Vision::ITextRecognizer2>{ 0x9AB165AD,0x6FD7,0x5C10,{ 0x8B,0xCA,0x7F,0x59,0x33,0xFA,0xCC,0x20 } }; // 9AB165AD-6FD7-5C10-8BCA-7F5933FACC20
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Vision::ITextRecognizerOptions>{ 0x99C1DEC2,0x98E8,0x5D4D,{ 0xB0,0xA4,0x85,0x49,0xAD,0x78,0xFF,0xDE } }; // 99C1DEC2-98E8-5D4D-B0A4-8549AD78FFDE
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Vision::ITextRecognizerStatics>{ 0x4C356D01,0x0771,0x5185,{ 0x83,0xCC,0x83,0x3E,0x57,0x3F,0xCC,0x68 } }; // 4C356D01-0771-5185-83CC-833E573FCC68
    template <> struct default_interface<winrt::Microsoft::Windows::Vision::RecognizedLine>{ using type = winrt::Microsoft::Windows::Vision::IRecognizedLine; };
    template <> struct default_interface<winrt::Microsoft::Windows::Vision::RecognizedText>{ using type = winrt::Microsoft::Windows::Vision::IRecognizedText; };
    template <> struct default_interface<winrt::Microsoft::Windows::Vision::RecognizedWord>{ using type = winrt::Microsoft::Windows::Vision::IRecognizedWord; };
    template <> struct default_interface<winrt::Microsoft::Windows::Vision::TextRecognizer>{ using type = winrt::Microsoft::Windows::Vision::ITextRecognizer; };
    template <> struct default_interface<winrt::Microsoft::Windows::Vision::TextRecognizerOptions>{ using type = winrt::Microsoft::Windows::Vision::ITextRecognizerOptions; };
    template <> struct abi<winrt::Microsoft::Windows::Vision::IRecognizedLine>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall get_BoundingBox(struct struct_Microsoft_Windows_Vision_BoundingBox*) noexcept = 0;
            virtual int32_t __stdcall get_Words(uint32_t* __valueSize, void***) noexcept = 0;
            virtual int32_t __stdcall get_Style(struct struct_Microsoft_Windows_Vision_RecognizedLineStyle*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Vision::IRecognizedText>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Lines(uint32_t* __valueSize, void***) noexcept = 0;
            virtual int32_t __stdcall get_ImageAngle(float*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Vision::IRecognizedWord>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall get_BoundingBox(struct struct_Microsoft_Windows_Vision_BoundingBox*) noexcept = 0;
            virtual int32_t __stdcall get_Confidence(float*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Vision::ITextRecognizer>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall RecognizeTextFromImageAsync(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall RecognizeTextFromImage(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Vision::ITextRecognizer2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall RecognizeTextFromImageAsync(void*, void*, int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall RecognizeTextFromImage(void*, void*, int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Vision::ITextRecognizerOptions>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OrientationDetection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_OrientationDetection(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxAnalysisSize(struct struct_Windows_Graphics_SizeInt32*) noexcept = 0;
            virtual int32_t __stdcall put_MaxAnalysisSize(struct struct_Windows_Graphics_SizeInt32) noexcept = 0;
            virtual int32_t __stdcall get_MaxLineCount(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxLineCount(uint32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Vision::ITextRecognizerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall IsAvailable(bool*) noexcept = 0;
            virtual int32_t __stdcall MakeAvailableAsync(void**) noexcept = 0;
            virtual int32_t __stdcall CreateAsync(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_Vision_IRecognizedLine
    {
        [[nodiscard]] auto Text() const;
        [[nodiscard]] auto BoundingBox() const;
        [[nodiscard]] auto Words() const;
        [[nodiscard]] auto Style() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Vision::IRecognizedLine>
    {
        template <typename D> using type = consume_Microsoft_Windows_Vision_IRecognizedLine<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Vision_IRecognizedText
    {
        [[nodiscard]] auto Lines() const;
        [[nodiscard]] auto ImageAngle() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Vision::IRecognizedText>
    {
        template <typename D> using type = consume_Microsoft_Windows_Vision_IRecognizedText<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Vision_IRecognizedWord
    {
        [[nodiscard]] auto Text() const;
        [[nodiscard]] auto BoundingBox() const;
        [[nodiscard]] auto Confidence() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Vision::IRecognizedWord>
    {
        template <typename D> using type = consume_Microsoft_Windows_Vision_IRecognizedWord<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Vision_ITextRecognizer
    {
        auto RecognizeTextFromImageAsync(winrt::Microsoft::Graphics::Imaging::ImageBuffer const& imageBuffer, winrt::Microsoft::Windows::Vision::TextRecognizerOptions const& options) const;
        auto RecognizeTextFromImage(winrt::Microsoft::Graphics::Imaging::ImageBuffer const& imageBuffer, winrt::Microsoft::Windows::Vision::TextRecognizerOptions const& options) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Vision::ITextRecognizer>
    {
        template <typename D> using type = consume_Microsoft_Windows_Vision_ITextRecognizer<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Vision_ITextRecognizer2
    {
        auto RecognizeTextFromImageAsync(winrt::Microsoft::Graphics::Imaging::ImageBuffer const& imageBuffer, winrt::Microsoft::Windows::Vision::TextRecognizerOptions const& options, winrt::Microsoft::Windows::Workloads::WorkloadPriority const& priority) const;
        auto RecognizeTextFromImage(winrt::Microsoft::Graphics::Imaging::ImageBuffer const& imageBuffer, winrt::Microsoft::Windows::Vision::TextRecognizerOptions const& options, winrt::Microsoft::Windows::Workloads::WorkloadPriority const& priority) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Vision::ITextRecognizer2>
    {
        template <typename D> using type = consume_Microsoft_Windows_Vision_ITextRecognizer2<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Vision_ITextRecognizerOptions
    {
        [[nodiscard]] auto OrientationDetection() const;
        auto OrientationDetection(winrt::Microsoft::Windows::Vision::OrientationDetectionOptions const& value) const;
        [[nodiscard]] auto MaxAnalysisSize() const;
        auto MaxAnalysisSize(winrt::Windows::Graphics::SizeInt32 const& value) const;
        [[nodiscard]] auto MaxLineCount() const;
        auto MaxLineCount(uint32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Vision::ITextRecognizerOptions>
    {
        template <typename D> using type = consume_Microsoft_Windows_Vision_ITextRecognizerOptions<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Vision_ITextRecognizerStatics
    {
        auto IsAvailable() const;
        auto MakeAvailableAsync() const;
        auto CreateAsync() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Vision::ITextRecognizerStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Vision_ITextRecognizerStatics<D>;
    };
    struct struct_Microsoft_Windows_Vision_BoundingBox
    {
        winrt::Windows::Foundation::Point BottomLeft;
        winrt::Windows::Foundation::Point BottomRight;
        winrt::Windows::Foundation::Point TopLeft;
        winrt::Windows::Foundation::Point TopRight;
    };
    template <> struct abi<Microsoft::Windows::Vision::BoundingBox>
    {
        using type = struct_Microsoft_Windows_Vision_BoundingBox;
    };
    struct struct_Microsoft_Windows_Vision_RecognizedLineStyle
    {
        float Confidence;
        int32_t Name;
    };
    template <> struct abi<Microsoft::Windows::Vision::RecognizedLineStyle>
    {
        using type = struct_Microsoft_Windows_Vision_RecognizedLineStyle;
    };
}
#endif
