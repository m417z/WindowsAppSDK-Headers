// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Graphics_Imaging_0_H
#define WINRT_Microsoft_Graphics_Imaging_0_H
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IVector;
}
WINRT_EXPORT namespace winrt::Windows::Graphics
{
    struct PointInt32;
    struct RectInt32;
}
WINRT_EXPORT namespace winrt::Windows::Graphics::Imaging
{
    struct SoftwareBitmap;
}
WINRT_EXPORT namespace winrt::Windows::Storage::Streams
{
    struct IBuffer;
}
WINRT_EXPORT namespace winrt::Microsoft::Graphics::Imaging
{
    enum class PixelFormat : int32_t
    {
        Undefined = 0,
        Rgb24 = 1,
        Argb32 = 2,
        Rgba32 = 3,
        Bgra32 = 4,
        Gray8 = 5,
    };
    struct IImageBuffer;
    struct IImageBufferFactory;
    struct IImageBufferStatics;
    struct IImageBufferStatics2;
    struct IImageObjectExtractor;
    struct IImageObjectExtractorHint;
    struct IImageObjectExtractorHintFactory;
    struct IImageObjectExtractorStatics;
    struct IImageScaler;
    struct IImageScalerStatics;
    struct ImageBuffer;
    struct ImageObjectExtractor;
    struct ImageObjectExtractorHint;
    struct ImageScaler;
    struct ImageBufferContract;
    struct ImageObjectExtractorContract;
    struct ImageScalerContract;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Graphics::Imaging::IImageBuffer>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Imaging::IImageBufferFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Imaging::IImageBufferStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Imaging::IImageBufferStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractor>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractorHint>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractorHintFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractorStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Imaging::IImageScaler>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Imaging::IImageScalerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::Imaging::ImageBuffer>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Graphics::Imaging::ImageObjectExtractor>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Graphics::Imaging::ImageObjectExtractorHint>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Graphics::Imaging::ImageScaler>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Graphics::Imaging::PixelFormat>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::ImageBuffer> = L"Microsoft.Graphics.Imaging.ImageBuffer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::ImageObjectExtractor> = L"Microsoft.Graphics.Imaging.ImageObjectExtractor";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::ImageObjectExtractorHint> = L"Microsoft.Graphics.Imaging.ImageObjectExtractorHint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::ImageScaler> = L"Microsoft.Graphics.Imaging.ImageScaler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::PixelFormat> = L"Microsoft.Graphics.Imaging.PixelFormat";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::IImageBuffer> = L"Microsoft.Graphics.Imaging.IImageBuffer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::IImageBufferFactory> = L"Microsoft.Graphics.Imaging.IImageBufferFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::IImageBufferStatics> = L"Microsoft.Graphics.Imaging.IImageBufferStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::IImageBufferStatics2> = L"Microsoft.Graphics.Imaging.IImageBufferStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractor> = L"Microsoft.Graphics.Imaging.IImageObjectExtractor";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractorHint> = L"Microsoft.Graphics.Imaging.IImageObjectExtractorHint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractorHintFactory> = L"Microsoft.Graphics.Imaging.IImageObjectExtractorHintFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractorStatics> = L"Microsoft.Graphics.Imaging.IImageObjectExtractorStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::IImageScaler> = L"Microsoft.Graphics.Imaging.IImageScaler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::IImageScalerStatics> = L"Microsoft.Graphics.Imaging.IImageScalerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::ImageBufferContract> = L"Microsoft.Graphics.Imaging.ImageBufferContract";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::ImageObjectExtractorContract> = L"Microsoft.Graphics.Imaging.ImageObjectExtractorContract";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::Imaging::ImageScalerContract> = L"Microsoft.Graphics.Imaging.ImageScalerContract";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Imaging::IImageBuffer>{ 0xD8D9C801,0x5B32,0x54B6,{ 0xA6,0xE2,0x73,0x84,0xC6,0xB8,0x22,0xED } }; // D8D9C801-5B32-54B6-A6E2-7384C6B822ED
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Imaging::IImageBufferFactory>{ 0xD1F288FD,0x37F1,0x5490,{ 0x80,0xB7,0xA2,0xCA,0x95,0x3C,0x9F,0xE5 } }; // D1F288FD-37F1-5490-80B7-A2CA953C9FE5
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Imaging::IImageBufferStatics>{ 0xE2DA1565,0x9F5F,0x5A92,{ 0xB5,0x8C,0x00,0x99,0x64,0x3A,0x28,0x9A } }; // E2DA1565-9F5F-5A92-B58C-0099643A289A
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Imaging::IImageBufferStatics2>{ 0x21C83045,0x1161,0x5A0F,{ 0xAF,0xBF,0x73,0x30,0xD0,0xD7,0x4B,0x97 } }; // 21C83045-1161-5A0F-AFBF-7330D0D74B97
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractor>{ 0x1ED9427D,0x58E6,0x5BEC,{ 0x97,0x08,0xFA,0xC1,0xBE,0x8A,0x5A,0xAE } }; // 1ED9427D-58E6-5BEC-9708-FAC1BE8A5AAE
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractorHint>{ 0xFAF8F38A,0x350F,0x5B4A,{ 0x9E,0x20,0x7A,0x18,0x12,0xD4,0x89,0x59 } }; // FAF8F38A-350F-5B4A-9E20-7A1812D48959
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractorHintFactory>{ 0xCD873E40,0xEF5A,0x5C3A,{ 0x92,0x97,0x25,0xBA,0x3A,0x06,0x68,0x72 } }; // CD873E40-EF5A-5C3A-9297-25BA3A066872
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractorStatics>{ 0x490EF068,0x39D9,0x58A6,{ 0x9D,0x18,0xAA,0x37,0xA8,0xE9,0x35,0xDC } }; // 490EF068-39D9-58A6-9D18-AA37A8E935DC
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Imaging::IImageScaler>{ 0x22103A1E,0x0B07,0x5645,{ 0xB1,0xF1,0xFF,0xC3,0xE8,0x54,0xFD,0x5B } }; // 22103A1E-0B07-5645-B1F1-FFC3E854FD5B
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::Imaging::IImageScalerStatics>{ 0x9133569A,0x9D79,0x54DE,{ 0x94,0x8E,0xDA,0x82,0xBC,0x8D,0xC8,0x55 } }; // 9133569A-9D79-54DE-948E-DA82BC8DC855
    template <> struct default_interface<winrt::Microsoft::Graphics::Imaging::ImageBuffer>{ using type = winrt::Microsoft::Graphics::Imaging::IImageBuffer; };
    template <> struct default_interface<winrt::Microsoft::Graphics::Imaging::ImageObjectExtractor>{ using type = winrt::Microsoft::Graphics::Imaging::IImageObjectExtractor; };
    template <> struct default_interface<winrt::Microsoft::Graphics::Imaging::ImageObjectExtractorHint>{ using type = winrt::Microsoft::Graphics::Imaging::IImageObjectExtractorHint; };
    template <> struct default_interface<winrt::Microsoft::Graphics::Imaging::ImageScaler>{ using type = winrt::Microsoft::Graphics::Imaging::IImageScaler; };
    template <> struct abi<winrt::Microsoft::Graphics::Imaging::IImageBuffer>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateSoftwareBitmap(void**) noexcept = 0;
            virtual int32_t __stdcall get_Buffer(void**) noexcept = 0;
            virtual int32_t __stdcall get_PixelFormat(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Height(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Width(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_BufferLength(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall CopyToBuffer(uint32_t, uint8_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Imaging::IImageBufferFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, int32_t, uint32_t, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Imaging::IImageBufferStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateCopyFromBitmap(void*, void**) noexcept = 0;
            virtual int32_t __stdcall CreateBufferAttachedToBitmap(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Imaging::IImageBufferStatics2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateFromBuffer(void*, int32_t, uint32_t, uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall CreateFromBufferWithStride(void*, int32_t, uint32_t, uint32_t, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractor>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetSoftwareBitmapObjectMask(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetImageBufferObjectMask(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractorHint>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IncludeRects(void**) noexcept = 0;
            virtual int32_t __stdcall get_IncludePoints(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExcludePoints(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractorHintFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractorStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateWithSoftwareBitmapAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall CreateWithImageBufferAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsAvailable(bool*) noexcept = 0;
            virtual int32_t __stdcall MakeAvailableAsync(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Imaging::IImageScaler>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall ScaleSoftwareBitmap(void*, int32_t, int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall ScaleImageBuffer(void*, int32_t, int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxSupportedScaleFactor(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::Imaging::IImageScalerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall IsAvailable(bool*) noexcept = 0;
            virtual int32_t __stdcall MakeAvailableAsync(void**) noexcept = 0;
            virtual int32_t __stdcall CreateAsync(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Imaging_IImageBuffer
    {
        auto CreateSoftwareBitmap() const;
        [[nodiscard]] auto Buffer() const;
        [[nodiscard]] auto PixelFormat() const;
        [[nodiscard]] auto Height() const;
        [[nodiscard]] auto Width() const;
        [[nodiscard]] auto BufferLength() const;
        auto CopyToBuffer(array_view<uint8_t> values) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Imaging::IImageBuffer>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Imaging_IImageBuffer<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Imaging_IImageBufferFactory
    {
        auto CreateInstance(winrt::Windows::Storage::Streams::IBuffer const& buffer, winrt::Microsoft::Graphics::Imaging::PixelFormat const& pixelFormat, uint32_t width, uint32_t height) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Imaging::IImageBufferFactory>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Imaging_IImageBufferFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Imaging_IImageBufferStatics
    {
        auto CreateCopyFromBitmap(winrt::Windows::Graphics::Imaging::SoftwareBitmap const& softwareBitmap) const;
        auto CreateBufferAttachedToBitmap(winrt::Windows::Graphics::Imaging::SoftwareBitmap const& softwareBitmap) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Imaging::IImageBufferStatics>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Imaging_IImageBufferStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Imaging_IImageBufferStatics2
    {
        auto CreateFromBuffer(winrt::Windows::Storage::Streams::IBuffer const& buffer, winrt::Microsoft::Graphics::Imaging::PixelFormat const& pixelFormat, uint32_t width, uint32_t height) const;
        auto CreateFromBufferWithStride(winrt::Windows::Storage::Streams::IBuffer const& buffer, winrt::Microsoft::Graphics::Imaging::PixelFormat const& pixelFormat, uint32_t width, uint32_t height, uint32_t stride) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Imaging::IImageBufferStatics2>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Imaging_IImageBufferStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Imaging_IImageObjectExtractor
    {
        auto GetSoftwareBitmapObjectMask(winrt::Microsoft::Graphics::Imaging::ImageObjectExtractorHint const& hint) const;
        auto GetImageBufferObjectMask(winrt::Microsoft::Graphics::Imaging::ImageObjectExtractorHint const& hint) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractor>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Imaging_IImageObjectExtractor<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Imaging_IImageObjectExtractorHint
    {
        [[nodiscard]] auto IncludeRects() const;
        [[nodiscard]] auto IncludePoints() const;
        [[nodiscard]] auto ExcludePoints() const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractorHint>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Imaging_IImageObjectExtractorHint<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Imaging_IImageObjectExtractorHintFactory
    {
        auto CreateInstance(param::vector<winrt::Windows::Graphics::RectInt32> const& includeRects, param::vector<winrt::Windows::Graphics::PointInt32> const& includePoints, param::vector<winrt::Windows::Graphics::PointInt32> const& excludePoints) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractorHintFactory>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Imaging_IImageObjectExtractorHintFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Imaging_IImageObjectExtractorStatics
    {
        auto CreateWithSoftwareBitmapAsync(winrt::Windows::Graphics::Imaging::SoftwareBitmap const& softwareBitmap) const;
        auto CreateWithImageBufferAsync(winrt::Microsoft::Graphics::Imaging::ImageBuffer const& imageBuffer) const;
        auto IsAvailable() const;
        auto MakeAvailableAsync() const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Imaging::IImageObjectExtractorStatics>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Imaging_IImageObjectExtractorStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Imaging_IImageScaler
    {
        auto ScaleSoftwareBitmap(winrt::Windows::Graphics::Imaging::SoftwareBitmap const& softwareBitmap, int32_t width, int32_t height) const;
        auto ScaleImageBuffer(winrt::Microsoft::Graphics::Imaging::ImageBuffer const& imageBuffer, int32_t width, int32_t height) const;
        [[nodiscard]] auto MaxSupportedScaleFactor() const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Imaging::IImageScaler>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Imaging_IImageScaler<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_Imaging_IImageScalerStatics
    {
        auto IsAvailable() const;
        auto MakeAvailableAsync() const;
        auto CreateAsync() const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::Imaging::IImageScalerStatics>
    {
        template <typename D> using type = consume_Microsoft_Graphics_Imaging_IImageScalerStatics<D>;
    };
}
#endif
