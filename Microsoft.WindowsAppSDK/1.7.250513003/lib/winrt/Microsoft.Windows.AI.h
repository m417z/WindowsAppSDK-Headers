// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_AI_H
#define WINRT_Microsoft_Windows_AI_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.240405.15"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.240405.15"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Microsoft.Windows.AI.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Windows_AI_IAIFeatureReadyResult<D>::Error() const
    {
        winrt::hresult value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::IAIFeatureReadyResult)->get_Error(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_IAIFeatureReadyResult<D>::ErrorDisplayText() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::IAIFeatureReadyResult)->get_ErrorDisplayText(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_IAIFeatureReadyResult<D>::ExtendedError() const
    {
        winrt::hresult value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::IAIFeatureReadyResult)->get_ExtendedError(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_IAIFeatureReadyResult<D>::Status() const
    {
        winrt::Microsoft::Windows::AI::AIFeatureReadyResultState value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::IAIFeatureReadyResult)->get_Status(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::IAIFeatureReadyResult> : produce_base<D, winrt::Microsoft::Windows::AI::IAIFeatureReadyResult>
    {
        int32_t __stdcall get_Error(winrt::hresult* value) noexcept final try
        {
            zero_abi<winrt::hresult>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::hresult>(this->shim().Error());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ErrorDisplayText(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().ErrorDisplayText());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExtendedError(winrt::hresult* value) noexcept final try
        {
            zero_abi<winrt::hresult>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::hresult>(this->shim().ExtendedError());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Status(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::AI::AIFeatureReadyResultState>(this->shim().Status());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::AI
{
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::AI::IAIFeatureReadyResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::AIFeatureReadyResult> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
