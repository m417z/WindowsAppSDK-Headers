// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_ApplicationModel_Background_0_H
#define WINRT_Microsoft_Windows_ApplicationModel_Background_0_H
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::Background
{
    struct BackgroundTaskRegistration;
    struct IBackgroundCondition;
    struct IBackgroundTrigger;
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::ApplicationModel::Background
{
    struct IBackgroundTaskBuilder;
    struct BackgroundTaskBuilder;
    struct BackgroundTaskContract;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::ApplicationModel::Background::IBackgroundTaskBuilder>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::ApplicationModel::Background::BackgroundTaskBuilder>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::ApplicationModel::Background::BackgroundTaskBuilder> = L"Microsoft.Windows.ApplicationModel.Background.BackgroundTaskBuilder";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::ApplicationModel::Background::IBackgroundTaskBuilder> = L"Microsoft.Windows.ApplicationModel.Background.IBackgroundTaskBuilder";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::ApplicationModel::Background::BackgroundTaskContract> = L"Microsoft.Windows.ApplicationModel.Background.BackgroundTaskContract";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::ApplicationModel::Background::IBackgroundTaskBuilder>{ 0x479EF3AB,0xE1D8,0x5A14,{ 0x8B,0x71,0xCE,0x38,0xEE,0xE1,0x8D,0x85 } }; // 479EF3AB-E1D8-5A14-8B71-CE38EEE18D85
    template <> struct default_interface<winrt::Microsoft::Windows::ApplicationModel::Background::BackgroundTaskBuilder>{ using type = winrt::Microsoft::Windows::ApplicationModel::Background::IBackgroundTaskBuilder; };
    template <> struct abi<winrt::Microsoft::Windows::ApplicationModel::Background::IBackgroundTaskBuilder>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall SetTrigger(void*) noexcept = 0;
            virtual int32_t __stdcall SetTaskEntryPointClsid(winrt::guid) noexcept = 0;
            virtual int32_t __stdcall AddCondition(void*) noexcept = 0;
            virtual int32_t __stdcall put_Name(void*) noexcept = 0;
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall Register(void**) noexcept = 0;
            virtual int32_t __stdcall Register2(void*, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_ApplicationModel_Background_IBackgroundTaskBuilder
    {
        auto SetTrigger(winrt::Windows::ApplicationModel::Background::IBackgroundTrigger const& trigger) const;
        auto SetTaskEntryPointClsid(winrt::guid const& clsId) const;
        auto AddCondition(winrt::Windows::ApplicationModel::Background::IBackgroundCondition const& condition) const;
        auto Name(param::hstring const& value) const;
        [[nodiscard]] auto Name() const;
        auto Register() const;
        auto Register(param::hstring const& name) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::ApplicationModel::Background::IBackgroundTaskBuilder>
    {
        template <typename D> using type = consume_Microsoft_Windows_ApplicationModel_Background_IBackgroundTaskBuilder<D>;
    };
}
#endif
