// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.230511.6

#pragma once
#ifndef WINRT_Microsoft_UI_Composition_Experimental_H
#define WINRT_Microsoft_UI_Composition_Experimental_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.230511.6"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.230511.6"
#include "winrt/Microsoft.UI.Composition.h"
#include "winrt/impl/Microsoft.UI.Composition.2.h"
#include "winrt/impl/Windows.Foundation.Numerics.2.h"
#include "winrt/impl/Windows.Graphics.2.h"
#include "winrt/impl/Windows.UI.2.h"
#include "winrt/impl/Microsoft.UI.Composition.Experimental.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChanged<D>::SetPropertyChangedListener(winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener const& listener) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged)->SetPropertyChangedListener(static_cast<int32_t>(property), *(void**)(&listener)));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifyBooleanPropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifyBooleanPropertyChanged(*(void**)(&target), static_cast<int32_t>(property), value));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifyColorPropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifyColorPropertyChanged(*(void**)(&target), static_cast<int32_t>(property), impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifyMatrix3x2PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float3x2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifyMatrix3x2PropertyChanged(*(void**)(&target), static_cast<int32_t>(property), impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifyMatrix4x4PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float4x4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifyMatrix4x4PropertyChanged(*(void**)(&target), static_cast<int32_t>(property), impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifyReferencePropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifyReferencePropertyChanged(*(void**)(&target), static_cast<int32_t>(property)));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifySinglePropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifySinglePropertyChanged(*(void**)(&target), static_cast<int32_t>(property), value));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifyVector2PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifyVector2PropertyChanged(*(void**)(&target), static_cast<int32_t>(property), impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifyVector3PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float3 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifyVector3PropertyChanged(*(void**)(&target), static_cast<int32_t>(property), impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifyVector4PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifyVector4PropertyChanged(*(void**)(&target), static_cast<int32_t>(property), impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_UI_Composition_Experimental_IExpCompositionVisualSurfaceStatics<D>::CreateVisualSurface(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Windows::Graphics::SizeInt32 const& realizationSize, bool frozen) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics)->CreateVisualSurfaceWithRealizationSize(*(void**)(&compositor), impl::bind_in(realizationSize), frozen, &result));
        return winrt::Microsoft::UI::Composition::CompositionVisualSurface{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_UI_Composition_Experimental_IExpCompositor<D>::OpenSharedManipulationTransformFromHandle(uint64_t handle) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositor)->OpenSharedManipulationTransformFromHandle(handle, &result));
        return winrt::Windows::Foundation::IInspectable{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_UI_Composition_Experimental_IExpVisual<D>::SetInteraction(winrt::Windows::Foundation::IInspectable const& interaction) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpVisual)->SetInteraction(*(void**)(&interaction)));
    }
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged>
    {
        int32_t __stdcall SetPropertyChangedListener(int32_t property, void* listener) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetPropertyChangedListener(*reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener const*>(&listener));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>
    {
        int32_t __stdcall NotifyBooleanPropertyChanged(void* target, int32_t property, bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyBooleanPropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NotifyColorPropertyChanged(void* target, int32_t property, struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyColorPropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), *reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NotifyMatrix3x2PropertyChanged(void* target, int32_t property, winrt::Windows::Foundation::Numerics::float3x2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyMatrix3x2PropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), *reinterpret_cast<winrt::Windows::Foundation::Numerics::float3x2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NotifyMatrix4x4PropertyChanged(void* target, int32_t property, winrt::Windows::Foundation::Numerics::float4x4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyMatrix4x4PropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), *reinterpret_cast<winrt::Windows::Foundation::Numerics::float4x4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NotifyReferencePropertyChanged(void* target, int32_t property) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyReferencePropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NotifySinglePropertyChanged(void* target, int32_t property, float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifySinglePropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NotifyVector2PropertyChanged(void* target, int32_t property, winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyVector2PropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), *reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NotifyVector3PropertyChanged(void* target, int32_t property, winrt::Windows::Foundation::Numerics::float3 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyVector3PropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), *reinterpret_cast<winrt::Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NotifyVector4PropertyChanged(void* target, int32_t property, winrt::Windows::Foundation::Numerics::float4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyVector4PropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), *reinterpret_cast<winrt::Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics>
    {
        int32_t __stdcall CreateVisualSurfaceWithRealizationSize(void* compositor, struct struct_Windows_Graphics_SizeInt32 realizationSize, bool frozen, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Composition::CompositionVisualSurface>(this->shim().CreateVisualSurface(*reinterpret_cast<winrt::Microsoft::UI::Composition::Compositor const*>(&compositor), *reinterpret_cast<winrt::Windows::Graphics::SizeInt32 const*>(&realizationSize), frozen));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositor> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositor>
    {
        int32_t __stdcall OpenSharedManipulationTransformFromHandle(uint64_t handle, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::IInspectable>(this->shim().OpenSharedManipulationTransformFromHandle(handle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpVisual> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpVisual>
    {
        int32_t __stdcall SetInteraction(void* interaction) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetInteraction(*reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&interaction));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition::Experimental
{
    inline auto ExpCompositionVisualSurface::CreateVisualSurface(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Windows::Graphics::SizeInt32 const& realizationSize, bool frozen)
    {
        return impl::call_factory<ExpCompositionVisualSurface, IExpCompositionVisualSurfaceStatics>([&](IExpCompositionVisualSurfaceStatics const& f) { return f.CreateVisualSurface(compositor, realizationSize, frozen); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpCompositor> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpVisual> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionVisualSurface> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
