// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Graphics_ImagingInternal_1_H
#define WINRT_Microsoft_Graphics_ImagingInternal_1_H
#include "winrt/impl/Windows.Foundation.0.h"
#include "winrt/impl/Microsoft.Graphics.ImagingInternal.0.h"
WINRT_EXPORT namespace winrt::Microsoft::Graphics::ImagingInternal
{
    struct WINRT_IMPL_EMPTY_BASES IDepthMapCreatorSession :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDepthMapCreatorSession>,
        impl::require<winrt::Microsoft::Graphics::ImagingInternal::IDepthMapCreatorSession, winrt::Windows::Foundation::IClosable>
    {
        IDepthMapCreatorSession(std::nullptr_t = nullptr) noexcept {}
        IDepthMapCreatorSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IDepthMapCreatorSession2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDepthMapCreatorSession2>,
        impl::require<winrt::Microsoft::Graphics::ImagingInternal::IDepthMapCreatorSession2, winrt::Windows::Foundation::IClosable, winrt::Microsoft::Graphics::ImagingInternal::IDepthMapCreatorSession>
    {
        IDepthMapCreatorSession2(std::nullptr_t = nullptr) noexcept {}
        IDepthMapCreatorSession2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IImageObjectExtractorSession :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IImageObjectExtractorSession>,
        impl::require<winrt::Microsoft::Graphics::ImagingInternal::IImageObjectExtractorSession, winrt::Windows::Foundation::IClosable>
    {
        IImageObjectExtractorSession(std::nullptr_t = nullptr) noexcept {}
        IImageObjectExtractorSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IImageScalerSession :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IImageScalerSession>,
        impl::require<winrt::Microsoft::Graphics::ImagingInternal::IImageScalerSession, winrt::Windows::Foundation::IClosable>
    {
        IImageScalerSession(std::nullptr_t = nullptr) noexcept {}
        IImageScalerSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IImageSegmenterSession :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IImageSegmenterSession>,
        impl::require<winrt::Microsoft::Graphics::ImagingInternal::IImageSegmenterSession, winrt::Windows::Foundation::IClosable>
    {
        IImageSegmenterSession(std::nullptr_t = nullptr) noexcept {}
        IImageSegmenterSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IParallaxCreatorSession :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IParallaxCreatorSession>,
        impl::require<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession, winrt::Windows::Foundation::IClosable>
    {
        IParallaxCreatorSession(std::nullptr_t = nullptr) noexcept {}
        IParallaxCreatorSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IParallaxCreatorSession2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IParallaxCreatorSession2>,
        impl::require<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession2, winrt::Windows::Foundation::IClosable, winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession>
    {
        IParallaxCreatorSession2(std::nullptr_t = nullptr) noexcept {}
        IParallaxCreatorSession2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        using impl::consume_t<IParallaxCreatorSession2, IParallaxCreatorSession2>::CreateParallaxImagesAsync;
        using impl::consume_t<IParallaxCreatorSession2, winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession>::CreateParallaxImagesAsync;
    };
    struct WINRT_IMPL_EMPTY_BASES IParallaxCreatorSession3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IParallaxCreatorSession3>,
        impl::require<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession3, winrt::Windows::Foundation::IClosable, winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession, winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession2>
    {
        IParallaxCreatorSession3(std::nullptr_t = nullptr) noexcept {}
        IParallaxCreatorSession3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        using impl::consume_t<IParallaxCreatorSession3, winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession>::CreateParallaxImagesAsync;
        using impl::consume_t<IParallaxCreatorSession3, winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession2>::CreateParallaxImagesAsync;
    };
    struct WINRT_IMPL_EMPTY_BASES ITrimapImageSegmenterSession :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITrimapImageSegmenterSession>,
        impl::require<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession, winrt::Windows::Foundation::IClosable>
    {
        ITrimapImageSegmenterSession(std::nullptr_t = nullptr) noexcept {}
        ITrimapImageSegmenterSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ITrimapImageSegmenterSession2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITrimapImageSegmenterSession2>,
        impl::require<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession2, winrt::Windows::Foundation::IClosable, winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession>
    {
        ITrimapImageSegmenterSession2(std::nullptr_t = nullptr) noexcept {}
        ITrimapImageSegmenterSession2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        using impl::consume_t<ITrimapImageSegmenterSession2, ITrimapImageSegmenterSession2>::RemoveBackgroundAsync;
        using impl::consume_t<ITrimapImageSegmenterSession2, winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession>::RemoveBackgroundAsync;
    };
    struct WINRT_IMPL_EMPTY_BASES ITrimapImageSegmenterSession3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITrimapImageSegmenterSession3>,
        impl::require<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession3, winrt::Windows::Foundation::IClosable, winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession, winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession2>
    {
        ITrimapImageSegmenterSession3(std::nullptr_t = nullptr) noexcept {}
        ITrimapImageSegmenterSession3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        using impl::consume_t<ITrimapImageSegmenterSession3, winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession>::RemoveBackgroundAsync;
        using impl::consume_t<ITrimapImageSegmenterSession3, winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession2>::RemoveBackgroundAsync;
    };
}
#endif
