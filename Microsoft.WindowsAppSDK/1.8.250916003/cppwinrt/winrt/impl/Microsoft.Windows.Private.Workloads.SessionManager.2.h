// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_Private_Workloads_SessionManager_2_H
#define WINRT_Microsoft_Windows_Private_Workloads_SessionManager_2_H
#include "winrt/impl/Microsoft.Windows.PrivateCommon.1.h"
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Microsoft.Windows.Private.Workloads.SessionManager.1.h"
WINRT_EXPORT namespace winrt::Microsoft::Windows::Private::Workloads::SessionManager
{
    struct WINRT_IMPL_EMPTY_BASES SessionManager : winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager,
        impl::require<SessionManager, winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager2, winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager3, winrt::Microsoft::Windows::PrivateCommon::IAnchorInstance, winrt::Microsoft::Windows::PrivateCommon::INotifyExpiredSessionHost, winrt::Windows::Foundation::IClosable>
    {
        SessionManager(std::nullptr_t) noexcept {}
        SessionManager(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager(ptr, take_ownership_from_abi) {}
        static auto GetOrCreateAsync();
    };
}
#endif
