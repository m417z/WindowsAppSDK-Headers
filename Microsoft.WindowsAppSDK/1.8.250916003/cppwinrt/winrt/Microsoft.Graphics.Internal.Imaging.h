// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Graphics_Internal_Imaging_H
#define WINRT_Microsoft_Graphics_Internal_Imaging_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.250303.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.250303.1"
#include "winrt/impl/Microsoft.Graphics.ImagingInternal.2.h"
#include "winrt/impl/Microsoft.Graphics.ImagingInternal.ImageObjectRemover.2.h"
#include "winrt/impl/Microsoft.Windows.PrivateCommon.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Microsoft.Graphics.Internal.Imaging.2.h"
namespace winrt::impl
{
}
WINRT_EXPORT namespace winrt::Microsoft::Graphics::Internal::Imaging
{
    inline DepthMapCreatorSession::DepthMapCreatorSession() :
        DepthMapCreatorSession(impl::call_factory_cast<DepthMapCreatorSession(*)(winrt::Windows::Foundation::IActivationFactory const&), DepthMapCreatorSession>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<DepthMapCreatorSession>(); }))
    {
    }
    inline ImageObjectExtractorSession::ImageObjectExtractorSession() :
        ImageObjectExtractorSession(impl::call_factory_cast<ImageObjectExtractorSession(*)(winrt::Windows::Foundation::IActivationFactory const&), ImageObjectExtractorSession>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ImageObjectExtractorSession>(); }))
    {
    }
    inline ImageObjectRemoverSession::ImageObjectRemoverSession() :
        ImageObjectRemoverSession(impl::call_factory_cast<ImageObjectRemoverSession(*)(winrt::Windows::Foundation::IActivationFactory const&), ImageObjectRemoverSession>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ImageObjectRemoverSession>(); }))
    {
    }
    inline ImageScalerSession::ImageScalerSession() :
        ImageScalerSession(impl::call_factory_cast<ImageScalerSession(*)(winrt::Windows::Foundation::IActivationFactory const&), ImageScalerSession>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ImageScalerSession>(); }))
    {
    }
    inline ImageSegmenterSession::ImageSegmenterSession() :
        ImageSegmenterSession(impl::call_factory_cast<ImageSegmenterSession(*)(winrt::Windows::Foundation::IActivationFactory const&), ImageSegmenterSession>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ImageSegmenterSession>(); }))
    {
    }
    inline ParallaxCreatorSession::ParallaxCreatorSession() :
        ParallaxCreatorSession(impl::call_factory_cast<ParallaxCreatorSession(*)(winrt::Windows::Foundation::IActivationFactory const&), ParallaxCreatorSession>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ParallaxCreatorSession>(); }))
    {
    }
    inline TrimapImageSegmenterSession::TrimapImageSegmenterSession() :
        TrimapImageSegmenterSession(impl::call_factory_cast<TrimapImageSegmenterSession(*)(winrt::Windows::Foundation::IActivationFactory const&), TrimapImageSegmenterSession>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<TrimapImageSegmenterSession>(); }))
    {
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Graphics::Internal::Imaging::DepthMapCreatorSession> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Internal::Imaging::ImageObjectExtractorSession> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Internal::Imaging::ImageObjectRemoverSession> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Internal::Imaging::ImageScalerSession> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Internal::Imaging::ImageSegmenterSession> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Internal::Imaging::ParallaxCreatorSession> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Graphics::Internal::Imaging::TrimapImageSegmenterSession> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
