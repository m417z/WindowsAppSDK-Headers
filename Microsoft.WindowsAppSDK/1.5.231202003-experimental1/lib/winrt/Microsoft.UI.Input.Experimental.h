// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220110.5

#pragma once
#ifndef WINRT_Microsoft_UI_Input_Experimental_H
#define WINRT_Microsoft_UI_Input_Experimental_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.220110.5"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.220110.5"
#include "winrt/Microsoft.UI.Input.h"
#include "winrt/impl/Microsoft.UI.Input.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Microsoft.UI.Input.Experimental.2.h"
namespace winrt::impl
{
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedDirection) consume_Microsoft_UI_Input_Experimental_IExpFocusChangedEventArgs<D>::Direction() const
    {
        winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedDirection value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs)->get_Direction(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpFocusController<D>::HasFocus() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusController)->get_HasFocus(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpFocusController<D>::TrySetFocus() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusController)->TrySetFocus(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult) consume_Microsoft_UI_Input_Experimental_IExpFocusController<D>::DepartFocus(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest const& request) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusController)->DepartFocus(*(void**)(&request), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpFocusController<D>::NavigateFocusRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusController, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusController)->add_NavigateFocusRequested(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpFocusController<D>::NavigateFocusRequested_revoker consume_Microsoft_UI_Input_Experimental_IExpFocusController<D>::NavigateFocusRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusController, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, NavigateFocusRequested_revoker>(this, NavigateFocusRequested(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpFocusController<D>::NavigateFocusRequested(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusController)->remove_NavigateFocusRequested(impl::bind_in(token));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusController) consume_Microsoft_UI_Input_Experimental_IExpFocusControllerStatics<D>::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics)->GetForInputSite(*(void**)(&inputSite), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusController{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHost<D>::NavigateFocus(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest const& request) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost)->NavigateFocus(*(void**)(&request), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHost<D>::TakeFocusRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost)->add_TakeFocusRequested(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHost<D>::TakeFocusRequested_revoker consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHost<D>::TakeFocusRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, TakeFocusRequested_revoker>(this, TakeFocusRequested(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHost<D>::TakeFocusRequested(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost)->remove_TakeFocusRequested(impl::bind_in(token));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHostStatics<D>::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics)->GetForInputSite(*(void**)(&inputSite), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::guid) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequest<D>::CorrelationId() const
    {
        winrt::guid value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest)->get_CorrelationId(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequest<D>::HintRect() const
    {
        winrt::Windows::Foundation::Rect value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest)->get_HintRect(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequest<D>::Reason() const
    {
        winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest)->get_Reason(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequestStatics<D>::CreateFocusNavigationRequestReasonAndHintRect(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason, winrt::Windows::Foundation::Rect const& hintRect) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics)->CreateFocusNavigationRequestReasonAndHintRect(static_cast<int32_t>(reason), impl::bind_in(hintRect), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequestStatics<D>::CreateFocusNavigationRequestReasonHintRectAndId(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason, winrt::Windows::Foundation::Rect const& hintRect, winrt::guid const& correlationId) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics)->CreateFocusNavigationRequestReasonHintRectAndId(static_cast<int32_t>(reason), impl::bind_in(hintRect), impl::bind_in(correlationId), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequestStatics<D>::CreateFocusNavigationRequestWithReason(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics)->CreateFocusNavigationRequestWithReason(static_cast<int32_t>(reason), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationResult<D>::WasMoved() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult)->get_WasMoved(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationResult<D>::WasMoved(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult)->put_WasMoved(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest) consume_Microsoft_UI_Input_Experimental_IExpNavigateFocusRequestedEventArgs<D>::Request() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs)->get_Request(&value));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpNavigateFocusRequestedEventArgs<D>::WasMoved() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs)->get_WasMoved(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpNavigateFocusRequestedEventArgs<D>::WasMoved(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs)->put_WasMoved(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerPoint) consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics<D>::GetCurrentPoint(uint32_t pointerId) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics)->GetCurrentPoint(pointerId, &result));
        return winrt::Microsoft::UI::Input::PointerPoint{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerPoint) consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics<D>::GetCurrentPointTransformed(uint32_t pointerId, winrt::Microsoft::UI::Input::IPointerPointTransform const& transform) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics)->GetCurrentPointTransformed(pointerId, *(void**)(&transform), &result));
        return winrt::Microsoft::UI::Input::PointerPoint{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::PointerPoint>) consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics<D>::GetIntermediatePoints(uint32_t pointerId) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics)->GetIntermediatePoints(pointerId, &result));
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::PointerPoint>{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::PointerPoint>) consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics<D>::GetIntermediatePointsTransformed(uint32_t pointerId, winrt::Microsoft::UI::Input::IPointerPointTransform const& transform) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics)->GetIntermediatePointsTransformed(pointerId, *(void**)(&transform), &result));
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::PointerPoint>{ result, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs>
    {
        int32_t __stdcall get_Direction(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedDirection>(this->shim().Direction());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusController> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusController>
    {
        int32_t __stdcall get_HasFocus(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().HasFocus());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall TrySetFocus(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().TrySetFocus());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall DepartFocus(void* request, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult>(this->shim().DepartFocus(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest const*>(&request)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_NavigateFocusRequested(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().NavigateFocusRequested(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusController, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_NavigateFocusRequested(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigateFocusRequested(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics>
    {
        int32_t __stdcall GetForInputSite(void* inputSite, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusController>(this->shim().GetForInputSite(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpInputSite const*>(&inputSite)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost>
    {
        int32_t __stdcall NavigateFocus(void* request, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult>(this->shim().NavigateFocus(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest const*>(&request)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_TakeFocusRequested(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().TakeFocusRequested(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_TakeFocusRequested(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TakeFocusRequested(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics>
    {
        int32_t __stdcall GetForInputSite(void* inputSite, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost>(this->shim().GetForInputSite(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpInputSite const*>(&inputSite)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest>
    {
        int32_t __stdcall get_CorrelationId(winrt::guid* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::guid>(this->shim().CorrelationId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HintRect(winrt::Windows::Foundation::Rect* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Rect>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Rect>(this->shim().HintRect());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Reason(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason>(this->shim().Reason());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics>
    {
        int32_t __stdcall CreateFocusNavigationRequestReasonAndHintRect(int32_t reason, winrt::Windows::Foundation::Rect hintRect, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest>(this->shim().CreateFocusNavigationRequestReasonAndHintRect(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const*>(&reason), *reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&hintRect)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateFocusNavigationRequestReasonHintRectAndId(int32_t reason, winrt::Windows::Foundation::Rect hintRect, winrt::guid correlationId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest>(this->shim().CreateFocusNavigationRequestReasonHintRectAndId(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const*>(&reason), *reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&hintRect), *reinterpret_cast<winrt::guid const*>(&correlationId)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateFocusNavigationRequestWithReason(int32_t reason, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest>(this->shim().CreateFocusNavigationRequestWithReason(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const*>(&reason)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult>
    {
        int32_t __stdcall get_WasMoved(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().WasMoved());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_WasMoved(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().WasMoved(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpInputSite> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpInputSite>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs>
    {
        int32_t __stdcall get_Request(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest>(this->shim().Request());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_WasMoved(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().WasMoved());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_WasMoved(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().WasMoved(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>
    {
        int32_t __stdcall GetCurrentPoint(uint32_t pointerId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::PointerPoint>(this->shim().GetCurrentPoint(pointerId));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCurrentPointTransformed(uint32_t pointerId, void* transform, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::PointerPoint>(this->shim().GetCurrentPointTransformed(pointerId, *reinterpret_cast<winrt::Microsoft::UI::Input::IPointerPointTransform const*>(&transform)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIntermediatePoints(uint32_t pointerId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::PointerPoint>>(this->shim().GetIntermediatePoints(pointerId));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIntermediatePointsTransformed(uint32_t pointerId, void* transform, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::PointerPoint>>(this->shim().GetIntermediatePointsTransformed(pointerId, *reinterpret_cast<winrt::Microsoft::UI::Input::IPointerPointTransform const*>(&transform)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Input::Experimental
{
    inline auto ExpFocusController::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite)
    {
        return impl::call_factory<ExpFocusController, IExpFocusControllerStatics>([&](IExpFocusControllerStatics const& f) { return f.GetForInputSite(inputSite); });
    }
    inline auto ExpFocusNavigationHost::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite)
    {
        return impl::call_factory<ExpFocusNavigationHost, IExpFocusNavigationHostStatics>([&](IExpFocusNavigationHostStatics const& f) { return f.GetForInputSite(inputSite); });
    }
    inline auto ExpFocusNavigationRequest::CreateFocusNavigationRequestReasonAndHintRect(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason, winrt::Windows::Foundation::Rect const& hintRect)
    {
        return impl::call_factory<ExpFocusNavigationRequest, IExpFocusNavigationRequestStatics>([&](IExpFocusNavigationRequestStatics const& f) { return f.CreateFocusNavigationRequestReasonAndHintRect(reason, hintRect); });
    }
    inline auto ExpFocusNavigationRequest::CreateFocusNavigationRequestReasonHintRectAndId(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason, winrt::Windows::Foundation::Rect const& hintRect, winrt::guid const& correlationId)
    {
        return impl::call_factory<ExpFocusNavigationRequest, IExpFocusNavigationRequestStatics>([&](IExpFocusNavigationRequestStatics const& f) { return f.CreateFocusNavigationRequestReasonHintRectAndId(reason, hintRect, correlationId); });
    }
    inline auto ExpFocusNavigationRequest::CreateFocusNavigationRequestWithReason(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason)
    {
        return impl::call_factory<ExpFocusNavigationRequest, IExpFocusNavigationRequestStatics>([&](IExpFocusNavigationRequestStatics const& f) { return f.CreateFocusNavigationRequestWithReason(reason); });
    }
    inline auto ExpPointerPoint::GetCurrentPoint(uint32_t pointerId)
    {
        return impl::call_factory<ExpPointerPoint, IExpPointerPointStatics>([&](IExpPointerPointStatics const& f) { return f.GetCurrentPoint(pointerId); });
    }
    inline auto ExpPointerPoint::GetCurrentPointTransformed(uint32_t pointerId, winrt::Microsoft::UI::Input::IPointerPointTransform const& transform)
    {
        return impl::call_factory<ExpPointerPoint, IExpPointerPointStatics>([&](IExpPointerPointStatics const& f) { return f.GetCurrentPointTransformed(pointerId, transform); });
    }
    inline auto ExpPointerPoint::GetIntermediatePoints(uint32_t pointerId)
    {
        return impl::call_factory<ExpPointerPoint, IExpPointerPointStatics>([&](IExpPointerPointStatics const& f) { return f.GetIntermediatePoints(pointerId); });
    }
    inline auto ExpPointerPoint::GetIntermediatePointsTransformed(uint32_t pointerId, winrt::Microsoft::UI::Input::IPointerPointTransform const& transform)
    {
        return impl::call_factory<ExpPointerPoint, IExpPointerPointStatics>([&](IExpPointerPointStatics const& f) { return f.GetIntermediatePointsTransformed(pointerId, transform); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusController> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpInputSite> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpFocusController> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpInputSite> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
