// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220110.5

#pragma once
#ifndef WINRT_Microsoft_Windows_Management_Deployment_0_H
#define WINRT_Microsoft_Windows_Management_Deployment_0_H
WINRT_EXPORT namespace winrt::Microsoft::Windows::ApplicationModel::DynamicDependency
{
    struct AddPackageDependencyOptions;
    struct CreatePackageDependencyOptions;
    struct PackageDependencyContextId;
    enum class PackageDependencyProcessorArchitectures : uint32_t;
}
WINRT_EXPORT namespace winrt::Windows::ApplicationModel
{
    struct PackageVersion;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct HResult;
    template <typename TResult, typename TProgress> struct __declspec(empty_bases) IAsyncOperationWithProgress;
    struct Uri;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename K, typename V> struct __declspec(empty_bases) IMap;
    template <typename T> struct __declspec(empty_bases) IVector;
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Management::Deployment
{
    enum class DeploymentPriority : int32_t
    {
        Low = 0,
        Normal = 1,
        Immediate = 2,
    };
    enum class DeploymentProcessingModel : int32_t
    {
        Sequential = 0,
        Parallel = 1,
    };
    enum class PackageDeploymentProgressStatus : int32_t
    {
        Queued = 0,
        InProgress = 1,
        CompletedSuccess = 2,
        CompletedFailure = 3,
    };
    enum class PackageDeploymentStatus : int32_t
    {
        InProgress = 0,
        CompletedSuccess = 1,
        CompletedFailure = 2,
    };
    enum class StubPackageOption : int32_t
    {
        Default = 0,
        InstallFull = 1,
        InstallStub = 2,
        UsePreference = 3,
    };
    struct IAddPackageOptions;
    struct IAddPackageSetOptions;
    struct IEnsureIsReadyOptions;
    struct IFindPackageSetOptions;
    struct IPackageDeploymentManager;
    struct IPackageDeploymentManagerStatics;
    struct IPackageDeploymentProgress;
    struct IPackageDeploymentResult;
    struct IPackageRuntimeManager;
    struct IPackageRuntimeManagerStatics;
    struct IPackageSet;
    struct IPackageSetItem;
    struct IPackageSetItemRuntimeDisposition;
    struct IPackageSetManager;
    struct IPackageSetManagerStatics;
    struct IPackageSetRuntimeDisposition;
    struct IPackageVolume;
    struct IPackageVolumeManagerStatics;
    struct IPackageVolumeStatus;
    struct IRegisterPackageOptions;
    struct IRemovePackageOptions;
    struct IStagePackageOptions;
    struct AddPackageOptions;
    struct AddPackageSetOptions;
    struct EnsureIsReadyOptions;
    struct FindPackageSetOptions;
    struct PackageDeploymentManager;
    struct PackageDeploymentProgress;
    struct PackageDeploymentResult;
    struct PackageRuntimeManager;
    struct PackageSet;
    struct PackageSetItem;
    struct PackageSetItemRuntimeDisposition;
    struct PackageSetManager;
    struct PackageSetRuntimeDisposition;
    struct PackageVolume;
    struct PackageVolumeManager;
    struct PackageVolumeStatus;
    struct RegisterPackageOptions;
    struct RemovePackageOptions;
    struct StagePackageOptions;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IAddPackageOptions>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IAddPackageSetOptions>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IEnsureIsReadyOptions>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IFindPackageSetOptions>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentManager>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentManagerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentProgress>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentResult>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IPackageRuntimeManager>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IPackageRuntimeManagerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IPackageSet>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IPackageSetItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IPackageSetItemRuntimeDisposition>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IPackageSetManager>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IPackageSetManagerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IPackageSetRuntimeDisposition>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IPackageVolume>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IPackageVolumeManagerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IPackageVolumeStatus>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IRegisterPackageOptions>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IRemovePackageOptions>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::IStagePackageOptions>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::AddPackageOptions>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::AddPackageSetOptions>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::EnsureIsReadyOptions>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::FindPackageSetOptions>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentManager>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgress>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentResult>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::PackageRuntimeManager>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::PackageSet>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::PackageSetItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::PackageSetItemRuntimeDisposition>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::PackageSetManager>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::PackageSetRuntimeDisposition>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::PackageVolume>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::PackageVolumeManager>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::PackageVolumeStatus>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::RegisterPackageOptions>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::RemovePackageOptions>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::StagePackageOptions>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::DeploymentPriority>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::DeploymentProcessingModel>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgressStatus>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentStatus>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::Management::Deployment::StubPackageOption>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::AddPackageOptions> = L"Microsoft.Windows.Management.Deployment.AddPackageOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::AddPackageSetOptions> = L"Microsoft.Windows.Management.Deployment.AddPackageSetOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::EnsureIsReadyOptions> = L"Microsoft.Windows.Management.Deployment.EnsureIsReadyOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::FindPackageSetOptions> = L"Microsoft.Windows.Management.Deployment.FindPackageSetOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentManager> = L"Microsoft.Windows.Management.Deployment.PackageDeploymentManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgress> = L"Microsoft.Windows.Management.Deployment.PackageDeploymentProgress";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentResult> = L"Microsoft.Windows.Management.Deployment.PackageDeploymentResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::PackageRuntimeManager> = L"Microsoft.Windows.Management.Deployment.PackageRuntimeManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::PackageSet> = L"Microsoft.Windows.Management.Deployment.PackageSet";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::PackageSetItem> = L"Microsoft.Windows.Management.Deployment.PackageSetItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::PackageSetItemRuntimeDisposition> = L"Microsoft.Windows.Management.Deployment.PackageSetItemRuntimeDisposition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::PackageSetManager> = L"Microsoft.Windows.Management.Deployment.PackageSetManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::PackageSetRuntimeDisposition> = L"Microsoft.Windows.Management.Deployment.PackageSetRuntimeDisposition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::PackageVolume> = L"Microsoft.Windows.Management.Deployment.PackageVolume";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::PackageVolumeManager> = L"Microsoft.Windows.Management.Deployment.PackageVolumeManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::PackageVolumeStatus> = L"Microsoft.Windows.Management.Deployment.PackageVolumeStatus";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::RegisterPackageOptions> = L"Microsoft.Windows.Management.Deployment.RegisterPackageOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::RemovePackageOptions> = L"Microsoft.Windows.Management.Deployment.RemovePackageOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::StagePackageOptions> = L"Microsoft.Windows.Management.Deployment.StagePackageOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::DeploymentPriority> = L"Microsoft.Windows.Management.Deployment.DeploymentPriority";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::DeploymentProcessingModel> = L"Microsoft.Windows.Management.Deployment.DeploymentProcessingModel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgressStatus> = L"Microsoft.Windows.Management.Deployment.PackageDeploymentProgressStatus";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentStatus> = L"Microsoft.Windows.Management.Deployment.PackageDeploymentStatus";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::StubPackageOption> = L"Microsoft.Windows.Management.Deployment.StubPackageOption";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IAddPackageOptions> = L"Microsoft.Windows.Management.Deployment.IAddPackageOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IAddPackageSetOptions> = L"Microsoft.Windows.Management.Deployment.IAddPackageSetOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IEnsureIsReadyOptions> = L"Microsoft.Windows.Management.Deployment.IEnsureIsReadyOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IFindPackageSetOptions> = L"Microsoft.Windows.Management.Deployment.IFindPackageSetOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentManager> = L"Microsoft.Windows.Management.Deployment.IPackageDeploymentManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentManagerStatics> = L"Microsoft.Windows.Management.Deployment.IPackageDeploymentManagerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentProgress> = L"Microsoft.Windows.Management.Deployment.IPackageDeploymentProgress";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentResult> = L"Microsoft.Windows.Management.Deployment.IPackageDeploymentResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IPackageRuntimeManager> = L"Microsoft.Windows.Management.Deployment.IPackageRuntimeManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IPackageRuntimeManagerStatics> = L"Microsoft.Windows.Management.Deployment.IPackageRuntimeManagerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IPackageSet> = L"Microsoft.Windows.Management.Deployment.IPackageSet";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IPackageSetItem> = L"Microsoft.Windows.Management.Deployment.IPackageSetItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IPackageSetItemRuntimeDisposition> = L"Microsoft.Windows.Management.Deployment.IPackageSetItemRuntimeDisposition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IPackageSetManager> = L"Microsoft.Windows.Management.Deployment.IPackageSetManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IPackageSetManagerStatics> = L"Microsoft.Windows.Management.Deployment.IPackageSetManagerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IPackageSetRuntimeDisposition> = L"Microsoft.Windows.Management.Deployment.IPackageSetRuntimeDisposition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IPackageVolume> = L"Microsoft.Windows.Management.Deployment.IPackageVolume";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IPackageVolumeManagerStatics> = L"Microsoft.Windows.Management.Deployment.IPackageVolumeManagerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IPackageVolumeStatus> = L"Microsoft.Windows.Management.Deployment.IPackageVolumeStatus";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IRegisterPackageOptions> = L"Microsoft.Windows.Management.Deployment.IRegisterPackageOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IRemovePackageOptions> = L"Microsoft.Windows.Management.Deployment.IRemovePackageOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Management::Deployment::IStagePackageOptions> = L"Microsoft.Windows.Management.Deployment.IStagePackageOptions";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IAddPackageOptions>{ 0xE3DB7F39,0xF9D0,0x5884,{ 0xBD,0xEF,0x61,0x53,0xB5,0x45,0x74,0xA3 } }; // E3DB7F39-F9D0-5884-BDEF-6153B54574A3
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IAddPackageSetOptions>{ 0x9A587B75,0xFEC6,0x5DB6,{ 0xAE,0xAF,0xCE,0x9B,0x22,0xD3,0xC1,0x92 } }; // 9A587B75-FEC6-5DB6-AEAF-CE9B22D3C192
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IEnsureIsReadyOptions>{ 0x6E8EFB66,0x941C,0x5844,{ 0xB5,0x07,0x56,0x18,0x97,0xBB,0xD1,0x52 } }; // 6E8EFB66-941C-5844-B507-561897BBD152
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IFindPackageSetOptions>{ 0x3A93E131,0x3CA0,0x532A,{ 0x8B,0x20,0x29,0x6A,0x8F,0x66,0xA1,0xB8 } }; // 3A93E131-3CA0-532A-8B20-296A8F66A1B8
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentManager>{ 0x240C3064,0x2CCD,0x53D0,{ 0xB1,0xDF,0xED,0x4F,0x14,0x60,0x91,0x9B } }; // 240C3064-2CCD-53D0-B1DF-ED4F1460919B
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentManagerStatics>{ 0xDBDA4AC6,0xCA28,0x59B8,{ 0x9F,0xC6,0xDB,0xFB,0x57,0x65,0xF1,0xC2 } }; // DBDA4AC6-CA28-59B8-9FC6-DBFB5765F1C2
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentProgress>{ 0x51DD9FEA,0x9C5F,0x51C9,{ 0x98,0xCB,0xBA,0x99,0xC7,0x1A,0x3B,0x26 } }; // 51DD9FEA-9C5F-51C9-98CB-BA99C71A3B26
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentResult>{ 0x27F64C57,0xA16A,0x576F,{ 0xB8,0xEF,0xB3,0x9C,0x28,0xDF,0x2A,0x04 } }; // 27F64C57-A16A-576F-B8EF-B39C28DF2A04
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IPackageRuntimeManager>{ 0x6E78A586,0x0511,0x5C87,{ 0xB6,0xE1,0xF7,0x80,0x96,0xC2,0xE5,0xCF } }; // 6E78A586-0511-5C87-B6E1-F78096C2E5CF
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IPackageRuntimeManagerStatics>{ 0x790947DE,0x01D4,0x5858,{ 0xAA,0x69,0x9C,0x93,0x90,0xFB,0x7D,0x3E } }; // 790947DE-01D4-5858-AA69-9C9390FB7D3E
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IPackageSet>{ 0xD48A09B0,0xFD90,0x5229,{ 0x9D,0x4C,0x0A,0xE5,0x34,0xBF,0x85,0x3C } }; // D48A09B0-FD90-5229-9D4C-0AE534BF853C
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IPackageSetItem>{ 0x8F254E15,0xC371,0x550F,{ 0xB4,0xE8,0x3F,0x0B,0xB1,0xAE,0x37,0x5F } }; // 8F254E15-C371-550F-B4E8-3F0BB1AE375F
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IPackageSetItemRuntimeDisposition>{ 0x7A7F9F70,0xD416,0x5F83,{ 0xA3,0xCD,0x02,0x7B,0xF3,0xD2,0xAB,0xFD } }; // 7A7F9F70-D416-5F83-A3CD-027BF3D2ABFD
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IPackageSetManager>{ 0x1BEAC17A,0x3256,0x5330,{ 0xBC,0x0A,0x84,0xF4,0x49,0x62,0x33,0x66 } }; // 1BEAC17A-3256-5330-BC0A-84F449623366
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IPackageSetManagerStatics>{ 0xC7D4582A,0xE262,0x5824,{ 0x83,0x39,0x5A,0xD8,0x35,0x2E,0xD7,0x4B } }; // C7D4582A-E262-5824-8339-5AD8352ED74B
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IPackageSetRuntimeDisposition>{ 0xC13F1088,0xEA36,0x5DB3,{ 0xBC,0xDD,0xE6,0xD5,0x9E,0x6C,0x9B,0x71 } }; // C13F1088-EA36-5DB3-BCDD-E6D59E6C9B71
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IPackageVolume>{ 0x6DBB8B13,0x92B8,0x5807,{ 0xAC,0x62,0x52,0xC9,0x5B,0xA6,0xD1,0x43 } }; // 6DBB8B13-92B8-5807-AC62-52C95BA6D143
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IPackageVolumeManagerStatics>{ 0xED7DA902,0x7DA2,0x575F,{ 0xBA,0x62,0xF9,0x84,0x03,0xFE,0x7B,0x20 } }; // ED7DA902-7DA2-575F-BA62-F98403FE7B20
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IPackageVolumeStatus>{ 0xC7317C19,0x83D1,0x591A,{ 0x83,0x68,0x22,0x1E,0xDD,0xF4,0x07,0x82 } }; // C7317C19-83D1-591A-8368-221EDDF40782
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IRegisterPackageOptions>{ 0xCE9258D3,0x11FF,0x5033,{ 0xB6,0x8A,0xD5,0x5D,0x7B,0x5B,0xC8,0xF1 } }; // CE9258D3-11FF-5033-B68A-D55D7B5BC8F1
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IRemovePackageOptions>{ 0x8C26418A,0x8E64,0x57AA,{ 0x92,0xA8,0xCE,0x0E,0xA6,0x39,0x0D,0x3F } }; // 8C26418A-8E64-57AA-92A8-CE0EA6390D3F
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Management::Deployment::IStagePackageOptions>{ 0x9B6B3203,0xFD7C,0x5EAD,{ 0xA9,0xD6,0xAB,0x2E,0x85,0x66,0xBE,0x5E } }; // 9B6B3203-FD7C-5EAD-A9D6-AB2E8566BE5E
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::AddPackageOptions>{ using type = winrt::Microsoft::Windows::Management::Deployment::IAddPackageOptions; };
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::AddPackageSetOptions>{ using type = winrt::Microsoft::Windows::Management::Deployment::IAddPackageSetOptions; };
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::EnsureIsReadyOptions>{ using type = winrt::Microsoft::Windows::Management::Deployment::IEnsureIsReadyOptions; };
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::FindPackageSetOptions>{ using type = winrt::Microsoft::Windows::Management::Deployment::IFindPackageSetOptions; };
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentManager>{ using type = winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentManager; };
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgress>{ using type = winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentProgress; };
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentResult>{ using type = winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentResult; };
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::PackageRuntimeManager>{ using type = winrt::Microsoft::Windows::Management::Deployment::IPackageRuntimeManager; };
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::PackageSet>{ using type = winrt::Microsoft::Windows::Management::Deployment::IPackageSet; };
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::PackageSetItem>{ using type = winrt::Microsoft::Windows::Management::Deployment::IPackageSetItem; };
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::PackageSetItemRuntimeDisposition>{ using type = winrt::Microsoft::Windows::Management::Deployment::IPackageSetItemRuntimeDisposition; };
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::PackageSetManager>{ using type = winrt::Microsoft::Windows::Management::Deployment::IPackageSetManager; };
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::PackageSetRuntimeDisposition>{ using type = winrt::Microsoft::Windows::Management::Deployment::IPackageSetRuntimeDisposition; };
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::PackageVolume>{ using type = winrt::Microsoft::Windows::Management::Deployment::IPackageVolume; };
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::PackageVolumeStatus>{ using type = winrt::Microsoft::Windows::Management::Deployment::IPackageVolumeStatus; };
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::RegisterPackageOptions>{ using type = winrt::Microsoft::Windows::Management::Deployment::IRegisterPackageOptions; };
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::RemovePackageOptions>{ using type = winrt::Microsoft::Windows::Management::Deployment::IRemovePackageOptions; };
    template <> struct default_interface<winrt::Microsoft::Windows::Management::Deployment::StagePackageOptions>{ using type = winrt::Microsoft::Windows::Management::Deployment::IStagePackageOptions; };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IAddPackageOptions>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetVolume(void**) noexcept = 0;
            virtual int32_t __stdcall put_TargetVolume(void*) noexcept = 0;
            virtual int32_t __stdcall get_DependencyPackageUris(void**) noexcept = 0;
            virtual int32_t __stdcall get_OptionalPackageFamilyNames(void**) noexcept = 0;
            virtual int32_t __stdcall get_OptionalPackageUris(void**) noexcept = 0;
            virtual int32_t __stdcall get_RelatedPackageUris(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExternalLocationUri(void**) noexcept = 0;
            virtual int32_t __stdcall put_ExternalLocationUri(void*) noexcept = 0;
            virtual int32_t __stdcall get_StubPackageOption(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_StubPackageOption(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_AllowUnsigned(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AllowUnsigned(bool) noexcept = 0;
            virtual int32_t __stdcall get_DeveloperMode(bool*) noexcept = 0;
            virtual int32_t __stdcall put_DeveloperMode(bool) noexcept = 0;
            virtual int32_t __stdcall get_ForceAppShutdown(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ForceAppShutdown(bool) noexcept = 0;
            virtual int32_t __stdcall get_ForceTargetAppShutdown(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ForceTargetAppShutdown(bool) noexcept = 0;
            virtual int32_t __stdcall get_ForceUpdateFromAnyVersion(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ForceUpdateFromAnyVersion(bool) noexcept = 0;
            virtual int32_t __stdcall get_InstallAllResources(bool*) noexcept = 0;
            virtual int32_t __stdcall put_InstallAllResources(bool) noexcept = 0;
            virtual int32_t __stdcall get_RequiredContentGroupOnly(bool*) noexcept = 0;
            virtual int32_t __stdcall put_RequiredContentGroupOnly(bool) noexcept = 0;
            virtual int32_t __stdcall get_RetainFilesOnFailure(bool*) noexcept = 0;
            virtual int32_t __stdcall put_RetainFilesOnFailure(bool) noexcept = 0;
            virtual int32_t __stdcall get_StageInPlace(bool*) noexcept = 0;
            virtual int32_t __stdcall put_StageInPlace(bool) noexcept = 0;
            virtual int32_t __stdcall get_DeferRegistrationWhenPackagesAreInUse(bool*) noexcept = 0;
            virtual int32_t __stdcall put_DeferRegistrationWhenPackagesAreInUse(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsExpectedDigestsSupported(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ExpectedDigests(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsLimitToExistingPackagesSupported(bool*) noexcept = 0;
            virtual int32_t __stdcall get_LimitToExistingPackages(bool*) noexcept = 0;
            virtual int32_t __stdcall put_LimitToExistingPackages(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IAddPackageSetOptions>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DeploymentProcessingModel(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DeploymentProcessingModel(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DeploymentPriority(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DeploymentPriority(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_AddPackageOptions(void**) noexcept = 0;
            virtual int32_t __stdcall put_AddPackageOptions(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IEnsureIsReadyOptions>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DeploymentProcessingModel(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DeploymentProcessingModel(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DeploymentPriority(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DeploymentPriority(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IFindPackageSetOptions>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TODO_MustHaveAtLeastOneInterfaceOrStaticFactoryPlaceholder(bool*) noexcept = 0;
            virtual int32_t __stdcall put_TODO_MustHaveAtLeastOneInterfaceOrStaticFactoryPlaceholder(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentManager>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall IsPackageSetReady(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall IsPackageSetReadyById(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall EnsurePackageSetIsReadyAsync(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall EnsurePackageSetIsReadyByIdAsync(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall AddPackageAsync(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall AddPackageByUriAsync(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall AddPackageSetAsync(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall AddPackageSetByIdAsync(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall RemovePackageAsync(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall RemovePackageByFullNameAsync(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall RemovePackageByFamilyNameAsync(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall RemovePackageSetAsync(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall RemovePackageSetByIdAsync(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentManagerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetDefault(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentProgress>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_status(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_status(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_percentage(double*) noexcept = 0;
            virtual int32_t __stdcall put_percentage(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentResult>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Status(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ExtendedError(winrt::hresult*) noexcept = 0;
            virtual int32_t __stdcall get_IsRegistered(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ActivityId(winrt::guid*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IPackageRuntimeManager>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall AddPackageSet(void*, void**) noexcept = 0;
            virtual int32_t __stdcall AddPackageSetWithOptions(void*, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall AddPackageSetById(void*, void**) noexcept = 0;
            virtual int32_t __stdcall AddPackageSetByIdWithOptions(void*, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall RemovePackageSet(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IPackageRuntimeManagerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetDefault(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IPackageSet>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Id(void**) noexcept = 0;
            virtual int32_t __stdcall put_Id(void*) noexcept = 0;
            virtual int32_t __stdcall get_PackageSetItems(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IPackageSetItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Id(void**) noexcept = 0;
            virtual int32_t __stdcall put_Id(void*) noexcept = 0;
            virtual int32_t __stdcall get_PackageFamilyName(void**) noexcept = 0;
            virtual int32_t __stdcall put_PackageFamilyName(void*) noexcept = 0;
            virtual int32_t __stdcall get_MinVersion(struct struct_Windows_ApplicationModel_PackageVersion*) noexcept = 0;
            virtual int32_t __stdcall put_MinVersion(struct struct_Windows_ApplicationModel_PackageVersion) noexcept = 0;
            virtual int32_t __stdcall get_ProcessorArchitectureFilter(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ProcessorArchitectureFilter(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_PackageUri(void**) noexcept = 0;
            virtual int32_t __stdcall put_PackageUri(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IPackageSetItemRuntimeDisposition>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PackageSetItemId(void**) noexcept = 0;
            virtual int32_t __stdcall get_PackageFullName(void**) noexcept = 0;
            virtual int32_t __stdcall get_PackageDependencyId(void**) noexcept = 0;
            virtual int32_t __stdcall get_PackageDependencyContextId(struct struct_Microsoft_Windows_ApplicationModel_DynamicDependency_PackageDependencyContextId*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IPackageSetManager>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Add(void*) noexcept = 0;
            virtual int32_t __stdcall Update(void*) noexcept = 0;
            virtual int32_t __stdcall Remove(void*) noexcept = 0;
            virtual int32_t __stdcall Get(void*, void**) noexcept = 0;
            virtual int32_t __stdcall Find(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IPackageSetManagerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetDefault(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IPackageSetRuntimeDisposition>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PackageSetId(void**) noexcept = 0;
            virtual int32_t __stdcall put_PackageSetId(void*) noexcept = 0;
            virtual int32_t __stdcall get_PackageSetItemRuntimeDispositions(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IPackageVolume>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsSystemVolume(bool*) noexcept = 0;
            virtual int32_t __stdcall get_MountPoint(void**) noexcept = 0;
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall get_PackageStorePath(void**) noexcept = 0;
            virtual int32_t __stdcall get_SupportsHardLinks(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsFullTrustPackageSupported(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsAppxInstallSupported(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Status(void**) noexcept = 0;
            virtual int32_t __stdcall FixMe() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IPackageVolumeManagerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall FindPackageVolumes(void**) noexcept = 0;
            virtual int32_t __stdcall FindPackageVolumeByPath(void*, void**) noexcept = 0;
            virtual int32_t __stdcall FindPackageVolumeByMediaId(void*, void**) noexcept = 0;
            virtual int32_t __stdcall FindPackageVolumeByName(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IPackageVolumeStatus>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsOK(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsOK(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsOffline(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsOffline(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsBroken(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsBroken(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IRegisterPackageOptions>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AppDataVolume(void**) noexcept = 0;
            virtual int32_t __stdcall put_AppDataVolume(void*) noexcept = 0;
            virtual int32_t __stdcall get_DependencyPackageUris(void**) noexcept = 0;
            virtual int32_t __stdcall get_OptionalPackageFamilyNames(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExternalLocationUri(void**) noexcept = 0;
            virtual int32_t __stdcall put_ExternalLocationUri(void*) noexcept = 0;
            virtual int32_t __stdcall get_DeveloperMode(bool*) noexcept = 0;
            virtual int32_t __stdcall put_DeveloperMode(bool) noexcept = 0;
            virtual int32_t __stdcall get_ForceAppShutdown(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ForceAppShutdown(bool) noexcept = 0;
            virtual int32_t __stdcall get_ForceTargetAppShutdown(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ForceTargetAppShutdown(bool) noexcept = 0;
            virtual int32_t __stdcall get_ForceUpdateFromAnyVersion(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ForceUpdateFromAnyVersion(bool) noexcept = 0;
            virtual int32_t __stdcall get_InstallAllResources(bool*) noexcept = 0;
            virtual int32_t __stdcall put_InstallAllResources(bool) noexcept = 0;
            virtual int32_t __stdcall get_StageInPlace(bool*) noexcept = 0;
            virtual int32_t __stdcall put_StageInPlace(bool) noexcept = 0;
            virtual int32_t __stdcall get_AllowUnsigned(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AllowUnsigned(bool) noexcept = 0;
            virtual int32_t __stdcall get_DeferRegistrationWhenPackagesAreInUse(bool*) noexcept = 0;
            virtual int32_t __stdcall put_DeferRegistrationWhenPackagesAreInUse(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsExpectedDigestsSupported(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ExpectedDigests(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IRemovePackageOptions>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PreserveApplicationData(bool*) noexcept = 0;
            virtual int32_t __stdcall put_PreserveApplicationData(bool) noexcept = 0;
            virtual int32_t __stdcall get_PreserveRoamableApplicationData(bool*) noexcept = 0;
            virtual int32_t __stdcall put_PreserveRoamableApplicationData(bool) noexcept = 0;
            virtual int32_t __stdcall get_RemoveForAllUsers(bool*) noexcept = 0;
            virtual int32_t __stdcall put_RemoveForAllUsers(bool) noexcept = 0;
            virtual int32_t __stdcall get_Priority(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Priority(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Management::Deployment::IStagePackageOptions>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetVolume(void**) noexcept = 0;
            virtual int32_t __stdcall put_TargetVolume(void*) noexcept = 0;
            virtual int32_t __stdcall get_DependencyPackageUris(void**) noexcept = 0;
            virtual int32_t __stdcall get_OptionalPackageFamilyNames(void**) noexcept = 0;
            virtual int32_t __stdcall get_OptionalPackageUris(void**) noexcept = 0;
            virtual int32_t __stdcall get_RelatedPackageUris(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExternalLocationUri(void**) noexcept = 0;
            virtual int32_t __stdcall put_ExternalLocationUri(void*) noexcept = 0;
            virtual int32_t __stdcall get_StubPackageOption(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_StubPackageOption(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_DeveloperMode(bool*) noexcept = 0;
            virtual int32_t __stdcall put_DeveloperMode(bool) noexcept = 0;
            virtual int32_t __stdcall get_ForceUpdateFromAnyVersion(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ForceUpdateFromAnyVersion(bool) noexcept = 0;
            virtual int32_t __stdcall get_InstallAllResources(bool*) noexcept = 0;
            virtual int32_t __stdcall put_InstallAllResources(bool) noexcept = 0;
            virtual int32_t __stdcall get_RequiredContentGroupOnly(bool*) noexcept = 0;
            virtual int32_t __stdcall put_RequiredContentGroupOnly(bool) noexcept = 0;
            virtual int32_t __stdcall get_StageInPlace(bool*) noexcept = 0;
            virtual int32_t __stdcall put_StageInPlace(bool) noexcept = 0;
            virtual int32_t __stdcall get_AllowUnsigned(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AllowUnsigned(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsExpectedDigestsSupported(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ExpectedDigests(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IAddPackageOptions
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::PackageVolume) TargetVolume() const;
        WINRT_IMPL_AUTO(void) TargetVolume(winrt::Microsoft::Windows::Management::Deployment::PackageVolume const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Foundation::Uri>) DependencyPackageUris() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<hstring>) OptionalPackageFamilyNames() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Foundation::Uri>) OptionalPackageUris() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Foundation::Uri>) RelatedPackageUris() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Uri) ExternalLocationUri() const;
        WINRT_IMPL_AUTO(void) ExternalLocationUri(winrt::Windows::Foundation::Uri const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::StubPackageOption) StubPackageOption() const;
        WINRT_IMPL_AUTO(void) StubPackageOption(winrt::Microsoft::Windows::Management::Deployment::StubPackageOption const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AllowUnsigned() const;
        WINRT_IMPL_AUTO(void) AllowUnsigned(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) DeveloperMode() const;
        WINRT_IMPL_AUTO(void) DeveloperMode(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ForceAppShutdown() const;
        WINRT_IMPL_AUTO(void) ForceAppShutdown(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ForceTargetAppShutdown() const;
        WINRT_IMPL_AUTO(void) ForceTargetAppShutdown(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ForceUpdateFromAnyVersion() const;
        WINRT_IMPL_AUTO(void) ForceUpdateFromAnyVersion(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) InstallAllResources() const;
        WINRT_IMPL_AUTO(void) InstallAllResources(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) RequiredContentGroupOnly() const;
        WINRT_IMPL_AUTO(void) RequiredContentGroupOnly(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) RetainFilesOnFailure() const;
        WINRT_IMPL_AUTO(void) RetainFilesOnFailure(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) StageInPlace() const;
        WINRT_IMPL_AUTO(void) StageInPlace(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) DeferRegistrationWhenPackagesAreInUse() const;
        WINRT_IMPL_AUTO(void) DeferRegistrationWhenPackagesAreInUse(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsExpectedDigestsSupported() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IMap<winrt::Windows::Foundation::Uri, hstring>) ExpectedDigests() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsLimitToExistingPackagesSupported() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) LimitToExistingPackages() const;
        WINRT_IMPL_AUTO(void) LimitToExistingPackages(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IAddPackageOptions>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IAddPackageOptions<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IAddPackageSetOptions
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::DeploymentProcessingModel) DeploymentProcessingModel() const;
        WINRT_IMPL_AUTO(void) DeploymentProcessingModel(winrt::Microsoft::Windows::Management::Deployment::DeploymentProcessingModel const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::DeploymentPriority) DeploymentPriority() const;
        WINRT_IMPL_AUTO(void) DeploymentPriority(winrt::Microsoft::Windows::Management::Deployment::DeploymentPriority const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::AddPackageOptions) AddPackageOptions() const;
        WINRT_IMPL_AUTO(void) AddPackageOptions(winrt::Microsoft::Windows::Management::Deployment::AddPackageOptions const& value) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IAddPackageSetOptions>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IAddPackageSetOptions<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IEnsureIsReadyOptions
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::DeploymentProcessingModel) DeploymentProcessingModel() const;
        WINRT_IMPL_AUTO(void) DeploymentProcessingModel(winrt::Microsoft::Windows::Management::Deployment::DeploymentProcessingModel const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::DeploymentPriority) DeploymentPriority() const;
        WINRT_IMPL_AUTO(void) DeploymentPriority(winrt::Microsoft::Windows::Management::Deployment::DeploymentPriority const& value) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IEnsureIsReadyOptions>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IEnsureIsReadyOptions<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IFindPackageSetOptions
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) TODO_MustHaveAtLeastOneInterfaceOrStaticFactoryPlaceholder() const;
        WINRT_IMPL_AUTO(void) TODO_MustHaveAtLeastOneInterfaceOrStaticFactoryPlaceholder(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IFindPackageSetOptions>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IFindPackageSetOptions<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IPackageDeploymentManager
    {
        WINRT_IMPL_AUTO(bool) IsPackageSetReady(winrt::Microsoft::Windows::Management::Deployment::PackageSet const& packageSet) const;
        WINRT_IMPL_AUTO(bool) IsPackageSetReadyById(param::hstring const& packageSetId) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentResult, winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgress>) EnsurePackageSetIsReadyAsync(winrt::Microsoft::Windows::Management::Deployment::PackageSet const& packageSet, winrt::Microsoft::Windows::Management::Deployment::EnsureIsReadyOptions const& options) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentResult, winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgress>) EnsurePackageSetIsReadyByIdAsync(param::hstring const& packageSetId, winrt::Microsoft::Windows::Management::Deployment::EnsureIsReadyOptions const& options) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentResult, winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgress>) AddPackageAsync(param::hstring const& package, winrt::Microsoft::Windows::Management::Deployment::AddPackageOptions const& options) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentResult, winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgress>) AddPackageByUriAsync(winrt::Windows::Foundation::Uri const& packageUri, winrt::Microsoft::Windows::Management::Deployment::AddPackageOptions const& options) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentResult, winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgress>) AddPackageSetAsync(winrt::Microsoft::Windows::Management::Deployment::PackageSet const& packageSet, winrt::Microsoft::Windows::Management::Deployment::AddPackageSetOptions const& options) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentResult, winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgress>) AddPackageSetByIdAsync(param::hstring const& packageSetId, winrt::Microsoft::Windows::Management::Deployment::AddPackageSetOptions const& options) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentResult, winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgress>) RemovePackageAsync(param::hstring const& package, winrt::Microsoft::Windows::Management::Deployment::RemovePackageOptions const& options) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentResult, winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgress>) RemovePackageByFullNameAsync(param::hstring const& packageFullName, winrt::Microsoft::Windows::Management::Deployment::RemovePackageOptions const& options) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentResult, winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgress>) RemovePackageByFamilyNameAsync(param::hstring const& packageFamilyName, winrt::Microsoft::Windows::Management::Deployment::RemovePackageOptions const& options) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentResult, winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgress>) RemovePackageSetAsync(winrt::Microsoft::Windows::Management::Deployment::PackageSet const& packageSet, winrt::Microsoft::Windows::Management::Deployment::RemovePackageOptions const& options) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentResult, winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgress>) RemovePackageSetByIdAsync(param::hstring const& packageSetId, winrt::Microsoft::Windows::Management::Deployment::RemovePackageOptions const& options) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentManager>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IPackageDeploymentManager<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentManager) GetDefault() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentManagerStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IPackageDeploymentManagerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IPackageDeploymentProgress
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgressStatus) status() const;
        WINRT_IMPL_AUTO(void) status(winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentProgressStatus const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) percentage() const;
        WINRT_IMPL_AUTO(void) percentage(double value) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentProgress>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IPackageDeploymentProgress<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IPackageDeploymentResult
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::PackageDeploymentStatus) Status() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::hresult) ExtendedError() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsRegistered() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::guid) ActivityId() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentResult>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IPackageDeploymentResult<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IPackageRuntimeManager
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::PackageSetRuntimeDisposition) AddPackageSet(winrt::Microsoft::Windows::Management::Deployment::PackageSet const& packageSet) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::PackageSetRuntimeDisposition) AddPackageSet(winrt::Microsoft::Windows::Management::Deployment::PackageSet const& packageSet, winrt::Microsoft::Windows::ApplicationModel::DynamicDependency::CreatePackageDependencyOptions const& createOptions, winrt::Microsoft::Windows::ApplicationModel::DynamicDependency::AddPackageDependencyOptions const& addOptions) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::PackageSetRuntimeDisposition) AddPackageSetById(param::hstring const& packageSetId) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::PackageSetRuntimeDisposition) AddPackageSetById(param::hstring const& packageSetId, winrt::Microsoft::Windows::ApplicationModel::DynamicDependency::CreatePackageDependencyOptions const& createOptions, winrt::Microsoft::Windows::ApplicationModel::DynamicDependency::AddPackageDependencyOptions const& addOptions) const;
        WINRT_IMPL_AUTO(void) RemovePackageSet(winrt::Microsoft::Windows::Management::Deployment::PackageSetRuntimeDisposition const& packageSetRuntimeDisposition) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IPackageRuntimeManager>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IPackageRuntimeManager<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IPackageRuntimeManagerStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::PackageRuntimeManager) GetDefault() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IPackageRuntimeManagerStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IPackageRuntimeManagerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IPackageSet
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Id() const;
        WINRT_IMPL_AUTO(void) Id(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Management::Deployment::PackageSetItem>) PackageSetItems() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IPackageSet>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IPackageSet<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IPackageSetItem
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Id() const;
        WINRT_IMPL_AUTO(void) Id(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) PackageFamilyName() const;
        WINRT_IMPL_AUTO(void) PackageFamilyName(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::ApplicationModel::PackageVersion) MinVersion() const;
        WINRT_IMPL_AUTO(void) MinVersion(winrt::Windows::ApplicationModel::PackageVersion const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::ApplicationModel::DynamicDependency::PackageDependencyProcessorArchitectures) ProcessorArchitectureFilter() const;
        WINRT_IMPL_AUTO(void) ProcessorArchitectureFilter(winrt::Microsoft::Windows::ApplicationModel::DynamicDependency::PackageDependencyProcessorArchitectures const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Uri) PackageUri() const;
        WINRT_IMPL_AUTO(void) PackageUri(winrt::Windows::Foundation::Uri const& value) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IPackageSetItem>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IPackageSetItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IPackageSetItemRuntimeDisposition
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) PackageSetItemId() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) PackageFullName() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) PackageDependencyId() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::ApplicationModel::DynamicDependency::PackageDependencyContextId) PackageDependencyContextId() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IPackageSetItemRuntimeDisposition>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IPackageSetItemRuntimeDisposition<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IPackageSetManager
    {
        WINRT_IMPL_AUTO(void) Add(winrt::Microsoft::Windows::Management::Deployment::PackageSet const& packageSet) const;
        WINRT_IMPL_AUTO(void) Update(winrt::Microsoft::Windows::Management::Deployment::PackageSet const& packageSet) const;
        WINRT_IMPL_AUTO(void) Remove(param::hstring const& packageSetId) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::PackageSet) Get(param::hstring const& packageSetId) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Management::Deployment::PackageSet>) Find(winrt::Microsoft::Windows::Management::Deployment::FindPackageSetOptions const& options) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IPackageSetManager>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IPackageSetManager<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IPackageSetManagerStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::PackageSetManager) GetDefault() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IPackageSetManagerStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IPackageSetManagerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IPackageSetRuntimeDisposition
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) PackageSetId() const;
        WINRT_IMPL_AUTO(void) PackageSetId(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Management::Deployment::PackageSetItemRuntimeDisposition>) PackageSetItemRuntimeDispositions() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IPackageSetRuntimeDisposition>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IPackageSetRuntimeDisposition<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IPackageVolume
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSystemVolume() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) MountPoint() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Name() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) PackageStorePath() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) SupportsHardLinks() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsFullTrustPackageSupported() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsAppxInstallSupported() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::PackageVolumeStatus) Status() const;
        WINRT_IMPL_AUTO(void) FixMe() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IPackageVolume>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IPackageVolume<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IPackageVolumeManagerStatics
    {
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::Management::Deployment::PackageVolume>) FindPackageVolumes() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::PackageVolume) FindPackageVolumeByPath(param::hstring const& path) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::PackageVolume) FindPackageVolumeByMediaId(param::hstring const& mediaId) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::PackageVolume) FindPackageVolumeByName(param::hstring const& name) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IPackageVolumeManagerStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IPackageVolumeManagerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IPackageVolumeStatus
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsOK() const;
        WINRT_IMPL_AUTO(void) IsOK(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsOffline() const;
        WINRT_IMPL_AUTO(void) IsOffline(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsBroken() const;
        WINRT_IMPL_AUTO(void) IsBroken(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IPackageVolumeStatus>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IPackageVolumeStatus<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IRegisterPackageOptions
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::PackageVolume) AppDataVolume() const;
        WINRT_IMPL_AUTO(void) AppDataVolume(winrt::Microsoft::Windows::Management::Deployment::PackageVolume const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Foundation::Uri>) DependencyPackageUris() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<hstring>) OptionalPackageFamilyNames() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Uri) ExternalLocationUri() const;
        WINRT_IMPL_AUTO(void) ExternalLocationUri(winrt::Windows::Foundation::Uri const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) DeveloperMode() const;
        WINRT_IMPL_AUTO(void) DeveloperMode(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ForceAppShutdown() const;
        WINRT_IMPL_AUTO(void) ForceAppShutdown(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ForceTargetAppShutdown() const;
        WINRT_IMPL_AUTO(void) ForceTargetAppShutdown(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ForceUpdateFromAnyVersion() const;
        WINRT_IMPL_AUTO(void) ForceUpdateFromAnyVersion(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) InstallAllResources() const;
        WINRT_IMPL_AUTO(void) InstallAllResources(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) StageInPlace() const;
        WINRT_IMPL_AUTO(void) StageInPlace(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AllowUnsigned() const;
        WINRT_IMPL_AUTO(void) AllowUnsigned(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) DeferRegistrationWhenPackagesAreInUse() const;
        WINRT_IMPL_AUTO(void) DeferRegistrationWhenPackagesAreInUse(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsExpectedDigestsSupported() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IMap<winrt::Windows::Foundation::Uri, hstring>) ExpectedDigests() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IRegisterPackageOptions>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IRegisterPackageOptions<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IRemovePackageOptions
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) PreserveApplicationData() const;
        WINRT_IMPL_AUTO(void) PreserveApplicationData(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) PreserveRoamableApplicationData() const;
        WINRT_IMPL_AUTO(void) PreserveRoamableApplicationData(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) RemoveForAllUsers() const;
        WINRT_IMPL_AUTO(void) RemoveForAllUsers(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::DeploymentPriority) Priority() const;
        WINRT_IMPL_AUTO(void) Priority(winrt::Microsoft::Windows::Management::Deployment::DeploymentPriority const& value) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IRemovePackageOptions>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IRemovePackageOptions<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Management_Deployment_IStagePackageOptions
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::PackageVolume) TargetVolume() const;
        WINRT_IMPL_AUTO(void) TargetVolume(winrt::Microsoft::Windows::Management::Deployment::PackageVolume const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Foundation::Uri>) DependencyPackageUris() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<hstring>) OptionalPackageFamilyNames() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Foundation::Uri>) OptionalPackageUris() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Foundation::Uri>) RelatedPackageUris() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Uri) ExternalLocationUri() const;
        WINRT_IMPL_AUTO(void) ExternalLocationUri(winrt::Windows::Foundation::Uri const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::Management::Deployment::StubPackageOption) StubPackageOption() const;
        WINRT_IMPL_AUTO(void) StubPackageOption(winrt::Microsoft::Windows::Management::Deployment::StubPackageOption const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) DeveloperMode() const;
        WINRT_IMPL_AUTO(void) DeveloperMode(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ForceUpdateFromAnyVersion() const;
        WINRT_IMPL_AUTO(void) ForceUpdateFromAnyVersion(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) InstallAllResources() const;
        WINRT_IMPL_AUTO(void) InstallAllResources(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) RequiredContentGroupOnly() const;
        WINRT_IMPL_AUTO(void) RequiredContentGroupOnly(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) StageInPlace() const;
        WINRT_IMPL_AUTO(void) StageInPlace(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AllowUnsigned() const;
        WINRT_IMPL_AUTO(void) AllowUnsigned(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsExpectedDigestsSupported() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IMap<winrt::Windows::Foundation::Uri, hstring>) ExpectedDigests() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Management::Deployment::IStagePackageOptions>
    {
        template <typename D> using type = consume_Microsoft_Windows_Management_Deployment_IStagePackageOptions<D>;
    };
}
#endif
