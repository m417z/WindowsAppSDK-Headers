// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220110.5

#pragma once
#ifndef WINRT_Microsoft_UI_Xaml_Controls_Primitives_0_H
#define WINRT_Microsoft_UI_Xaml_Controls_Primitives_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition
{
    struct CompositionAnimation;
    struct CompositionPropertySet;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Input
{
    struct PointerPoint;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml
{
    struct CornerRadius;
    struct DataTemplate;
    struct DependencyObject;
    struct DependencyProperty;
    enum class ElementSoundMode : int32_t;
    struct FrameworkElement;
    struct GridLength;
    enum class HorizontalAlignment : int32_t;
    struct RoutedEventHandler;
    struct Thickness;
    struct UIElement;
    enum class VerticalAlignment : int32_t;
    enum class Visibility : int32_t;
    struct XamlRoot;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Automation::Peers
{
    enum class AutomationControlType : int32_t;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Controls
{
    struct AutoSuggestBox;
    enum class ClickMode : int32_t;
    struct ColorChangedEventArgs;
    enum class ColorPickerHsvChannel : int32_t;
    enum class ColorSpectrumComponents : int32_t;
    enum class ColorSpectrumShape : int32_t;
    struct ComboBox;
    struct Control;
    struct IconElement;
    struct InfoBadge;
    enum class LightDismissOverlayMode : int32_t;
    enum class Orientation : int32_t;
    struct ScrollingAnchorRequestedEventArgs;
    struct ScrollingBringingIntoViewEventArgs;
    enum class ScrollingChainMode : int32_t;
    enum class ScrollingContentOrientation : int32_t;
    enum class ScrollingInputKinds : uint32_t;
    enum class ScrollingInteractionState : int32_t;
    enum class ScrollingRailMode : int32_t;
    struct ScrollingScrollAnimationStartingEventArgs;
    struct ScrollingScrollCompletedEventArgs;
    enum class ScrollingScrollMode : int32_t;
    struct ScrollingScrollOptions;
    struct ScrollingZoomAnimationStartingEventArgs;
    struct ScrollingZoomCompletedEventArgs;
    enum class ScrollingZoomMode : int32_t;
    struct ScrollingZoomOptions;
    struct SelectionChangedEventHandler;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Input
{
    struct ICommand;
    struct ProcessKeyboardAcceleratorEventArgs;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Media
{
    struct Brush;
    struct SystemBackdrop;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Media::Animation
{
    struct TransitionCollection;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    template <typename T> struct __declspec(empty_bases) EventHandler;
    struct EventRegistrationToken;
    template <typename T> struct __declspec(empty_bases) IReference;
    struct Point;
    struct Rect;
    struct Size;
    template <typename TSender, typename TResult> struct __declspec(empty_bases) TypedEventHandler;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct __declspec(empty_bases) IVectorView;
    template <typename T> struct __declspec(empty_bases) IVector;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Numerics
{
}
WINRT_EXPORT namespace winrt::Windows::UI
{
    struct Color;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Controls::Primitives
{
    enum class AnimationDirection : int32_t
    {
        Left = 0,
        Top = 1,
        Right = 2,
        Bottom = 3,
    };
    enum class ComponentResourceLocation : int32_t
    {
        Application = 0,
        Nested = 1,
    };
    enum class CornerRadiusFilterKind : int32_t
    {
        None = 0,
        Top = 1,
        Right = 2,
        Bottom = 3,
        Left = 4,
        TopLeftValue = 5,
        BottomRightValue = 6,
    };
    enum class CornerRadiusToThicknessConverterKind : int32_t
    {
        FilterTopAndBottomFromLeft = 0,
        FilterTopAndBottomFromRight = 1,
        FilterLeftAndRightFromTop = 2,
        FilterLeftAndRightFromBottom = 3,
        FilterTopFromTopLeft = 4,
        FilterTopFromTopRight = 5,
        FilterRightFromTopRight = 6,
        FilterRightFromBottomRight = 7,
        FilterBottomFromBottomRight = 8,
        FilterBottomFromBottomLeft = 9,
        FilterLeftFromBottomLeft = 10,
        FilterLeftFromTopLeft = 11,
    };
    enum class EdgeTransitionLocation : int32_t
    {
        Left = 0,
        Top = 1,
        Right = 2,
        Bottom = 3,
    };
    enum class FlyoutPlacementMode : int32_t
    {
        Top = 0,
        Bottom = 1,
        Left = 2,
        Right = 3,
        Full = 4,
        TopEdgeAlignedLeft = 5,
        TopEdgeAlignedRight = 6,
        BottomEdgeAlignedLeft = 7,
        BottomEdgeAlignedRight = 8,
        LeftEdgeAlignedTop = 9,
        LeftEdgeAlignedBottom = 10,
        RightEdgeAlignedTop = 11,
        RightEdgeAlignedBottom = 12,
        Auto = 13,
    };
    enum class FlyoutShowMode : int32_t
    {
        Auto = 0,
        Standard = 1,
        Transient = 2,
        TransientWithDismissOnPointerMoveAway = 3,
    };
    enum class GeneratorDirection : int32_t
    {
        Forward = 0,
        Backward = 1,
    };
    enum class GroupHeaderPlacement : int32_t
    {
        Top = 0,
        Left = 1,
    };
    enum class ListViewItemPresenterCheckMode : int32_t
    {
        Inline = 0,
        Overlay = 1,
    };
    enum class ListViewItemPresenterSelectionIndicatorMode : int32_t
    {
        Inline = 0,
        Overlay = 1,
    };
    enum class PlacementMode : int32_t
    {
        Bottom = 2,
        Left = 9,
        Mouse = 7,
        Right = 4,
        Top = 10,
    };
    enum class PopupPlacementMode : int32_t
    {
        Auto = 0,
        Top = 1,
        Bottom = 2,
        Left = 3,
        Right = 4,
        TopEdgeAlignedLeft = 5,
        TopEdgeAlignedRight = 6,
        BottomEdgeAlignedLeft = 7,
        BottomEdgeAlignedRight = 8,
        LeftEdgeAlignedTop = 9,
        LeftEdgeAlignedBottom = 10,
        RightEdgeAlignedTop = 11,
        RightEdgeAlignedBottom = 12,
    };
    enum class ScrollEventType : int32_t
    {
        SmallDecrement = 0,
        SmallIncrement = 1,
        LargeDecrement = 2,
        LargeIncrement = 3,
        ThumbPosition = 4,
        ThumbTrack = 5,
        First = 6,
        Last = 7,
        EndScroll = 8,
    };
    enum class ScrollSnapPointsAlignment : int32_t
    {
        Near = 0,
        Center = 1,
        Far = 2,
    };
    enum class ScrollingIndicatorMode : int32_t
    {
        None = 0,
        TouchIndicator = 1,
        MouseIndicator = 2,
    };
    enum class SliderSnapsTo : int32_t
    {
        StepValues = 0,
        Ticks = 1,
    };
    enum class SnapPointsAlignment : int32_t
    {
        Near = 0,
        Center = 1,
        Far = 2,
    };
    enum class TickPlacement : int32_t
    {
        None = 0,
        TopLeft = 1,
        BottomRight = 2,
        Outside = 3,
        Inline = 4,
    };
    struct IAppBarButtonTemplateSettings;
    struct IAppBarTemplateSettings;
    struct IAppBarToggleButtonTemplateSettings;
    struct IAutoSuggestBoxHelper;
    struct IAutoSuggestBoxHelperStatics;
    struct IButtonBase;
    struct IButtonBaseFactory;
    struct IButtonBaseStatics;
    struct ICalendarPanel;
    struct ICalendarViewTemplateSettings;
    struct ICarouselPanel;
    struct ICarouselPanelFactory;
    struct IColorPickerSlider;
    struct IColorPickerSliderFactory;
    struct IColorPickerSliderStatics;
    struct IColorSpectrum;
    struct IColorSpectrumFactory;
    struct IColorSpectrumStatics;
    struct IColumnMajorUniformToLargestGridLayout;
    struct IColumnMajorUniformToLargestGridLayoutFactory;
    struct IColumnMajorUniformToLargestGridLayoutStatics;
    struct IComboBoxHelper;
    struct IComboBoxHelperStatics;
    struct IComboBoxTemplateSettings;
    struct ICommandBarFlyoutCommandBar;
    struct ICommandBarFlyoutCommandBar2;
    struct ICommandBarFlyoutCommandBarAutomationPropertiesStatics;
    struct ICommandBarFlyoutCommandBarFactory;
    struct ICommandBarFlyoutCommandBarStatics;
    struct ICommandBarFlyoutCommandBarTemplateSettings;
    struct ICommandBarTemplateSettings;
    struct ICornerRadiusFilterConverter;
    struct ICornerRadiusFilterConverterStatics;
    struct ICornerRadiusToThicknessConverter;
    struct ICornerRadiusToThicknessConverterStatics;
    struct IDragCompletedEventArgs;
    struct IDragCompletedEventArgsFactory;
    struct IDragDeltaEventArgs;
    struct IDragDeltaEventArgsFactory;
    struct IDragStartedEventArgs;
    struct IDragStartedEventArgsFactory;
    struct IFlyoutBase;
    struct IFlyoutBase2;
    struct IFlyoutBaseClosingEventArgs;
    struct IFlyoutBaseFactory;
    struct IFlyoutBaseOverrides;
    struct IFlyoutBaseStatics;
    struct IFlyoutBaseStatics2;
    struct IFlyoutShowOptions;
    struct IFlyoutShowOptionsFactory;
    struct IGeneratorPositionHelper;
    struct IGeneratorPositionHelperStatics;
    struct IGridViewItemPresenter;
    struct IGridViewItemPresenterFactory;
    struct IGridViewItemPresenterStatics;
    struct IGridViewItemTemplateSettings;
    struct IInfoBarPanel;
    struct IInfoBarPanelFactory;
    struct IInfoBarPanelStatics;
    struct IItemsChangedEventArgs;
    struct IJumpListItemBackgroundConverter;
    struct IJumpListItemBackgroundConverterStatics;
    struct IJumpListItemForegroundConverter;
    struct IJumpListItemForegroundConverterStatics;
    struct ILayoutInformation;
    struct ILayoutInformationStatics;
    struct IListViewItemPresenter;
    struct IListViewItemPresenterFactory;
    struct IListViewItemPresenterStatics;
    struct IListViewItemTemplateSettings;
    struct ILoopingSelector;
    struct ILoopingSelectorItem;
    struct ILoopingSelectorPanel;
    struct ILoopingSelectorStatics;
    struct IMenuFlyoutItemTemplateSettings;
    struct IMenuFlyoutPresenterTemplateSettings;
    struct IMonochromaticOverlayPresenter;
    struct IMonochromaticOverlayPresenterFactory;
    struct IMonochromaticOverlayPresenterStatics;
    struct INavigationViewItemPresenter;
    struct INavigationViewItemPresenter2;
    struct INavigationViewItemPresenterFactory;
    struct INavigationViewItemPresenterStatics;
    struct INavigationViewItemPresenterStatics2;
    struct INavigationViewItemPresenterTemplateSettings;
    struct INavigationViewItemPresenterTemplateSettingsFactory;
    struct INavigationViewItemPresenterTemplateSettingsStatics;
    struct IOrientedVirtualizingPanel;
    struct IOrientedVirtualizingPanelFactory;
    struct IPickerFlyoutBase;
    struct IPickerFlyoutBaseFactory;
    struct IPickerFlyoutBaseOverrides;
    struct IPickerFlyoutBaseStatics;
    struct IPivotHeaderItem;
    struct IPivotHeaderItemFactory;
    struct IPivotHeaderPanel;
    struct IPivotPanel;
    struct IPopup;
    struct IPopup2;
    struct IPopup3;
    struct IPopupStatics;
    struct IPopupStatics2;
    struct IPopupStatics3;
    struct IRangeBase;
    struct IRangeBaseFactory;
    struct IRangeBaseOverrides;
    struct IRangeBaseStatics;
    struct IRangeBaseValueChangedEventArgs;
    struct IRepeatButton;
    struct IRepeatButtonStatics;
    struct IRepeatedScrollSnapPoint;
    struct IRepeatedScrollSnapPointFactory;
    struct IRepeatedZoomSnapPoint;
    struct IRepeatedZoomSnapPointFactory;
    struct IScrollBar;
    struct IScrollBarStatics;
    struct IScrollController;
    struct IScrollControllerAddScrollVelocityRequestedEventArgs;
    struct IScrollControllerAddScrollVelocityRequestedEventArgsFactory;
    struct IScrollControllerPanRequestedEventArgs;
    struct IScrollControllerPanRequestedEventArgsFactory;
    struct IScrollControllerPanningInfo;
    struct IScrollControllerScrollByRequestedEventArgs;
    struct IScrollControllerScrollByRequestedEventArgsFactory;
    struct IScrollControllerScrollToRequestedEventArgs;
    struct IScrollControllerScrollToRequestedEventArgsFactory;
    struct IScrollEventArgs;
    struct IScrollPresenter;
    struct IScrollPresenterFactory;
    struct IScrollPresenterStatics;
    struct IScrollSnapPoint;
    struct IScrollSnapPointBase;
    struct IScrollSnapPointBaseFactory;
    struct IScrollSnapPointFactory;
    struct IScrollSnapPointsInfo;
    struct ISelector;
    struct ISelectorFactory;
    struct ISelectorItem;
    struct ISelectorItemFactory;
    struct ISelectorItemStatics;
    struct ISelectorStatics;
    struct ISnapPointBase;
    struct ISnapPointBaseFactory;
    struct ISplitViewTemplateSettings;
    struct ITabViewListView;
    struct ITabViewListViewFactory;
    struct IThumb;
    struct IThumbStatics;
    struct ITickBar;
    struct ITickBarStatics;
    struct IToggleButton;
    struct IToggleButtonFactory;
    struct IToggleButtonOverrides;
    struct IToggleButtonStatics;
    struct IToggleSwitchTemplateSettings;
    struct IToolTipTemplateSettings;
    struct IZoomSnapPoint;
    struct IZoomSnapPointBase;
    struct IZoomSnapPointBaseFactory;
    struct IZoomSnapPointFactory;
    struct AppBarButtonTemplateSettings;
    struct AppBarTemplateSettings;
    struct AppBarToggleButtonTemplateSettings;
    struct AutoSuggestBoxHelper;
    struct ButtonBase;
    struct CalendarPanel;
    struct CalendarViewTemplateSettings;
    struct CarouselPanel;
    struct ColorPickerSlider;
    struct ColorSpectrum;
    struct ColumnMajorUniformToLargestGridLayout;
    struct ComboBoxHelper;
    struct ComboBoxTemplateSettings;
    struct CommandBarFlyoutCommandBar;
    struct CommandBarFlyoutCommandBarAutomationProperties;
    struct CommandBarFlyoutCommandBarTemplateSettings;
    struct CommandBarTemplateSettings;
    struct CornerRadiusFilterConverter;
    struct CornerRadiusToThicknessConverter;
    struct DragCompletedEventArgs;
    struct DragDeltaEventArgs;
    struct DragStartedEventArgs;
    struct FlyoutBase;
    struct FlyoutBaseClosingEventArgs;
    struct FlyoutShowOptions;
    struct GeneratorPositionHelper;
    struct GridViewItemPresenter;
    struct GridViewItemTemplateSettings;
    struct InfoBarPanel;
    struct ItemsChangedEventArgs;
    struct JumpListItemBackgroundConverter;
    struct JumpListItemForegroundConverter;
    struct LayoutInformation;
    struct ListViewItemPresenter;
    struct ListViewItemTemplateSettings;
    struct LoopingSelector;
    struct LoopingSelectorItem;
    struct LoopingSelectorPanel;
    struct MenuFlyoutItemTemplateSettings;
    struct MenuFlyoutPresenterTemplateSettings;
    struct MonochromaticOverlayPresenter;
    struct NavigationViewItemPresenter;
    struct NavigationViewItemPresenterTemplateSettings;
    struct OrientedVirtualizingPanel;
    struct PickerFlyoutBase;
    struct PivotHeaderItem;
    struct PivotHeaderPanel;
    struct PivotPanel;
    struct Popup;
    struct RangeBase;
    struct RangeBaseValueChangedEventArgs;
    struct RepeatButton;
    struct RepeatedScrollSnapPoint;
    struct RepeatedZoomSnapPoint;
    struct ScrollBar;
    struct ScrollControllerAddScrollVelocityRequestedEventArgs;
    struct ScrollControllerPanRequestedEventArgs;
    struct ScrollControllerScrollByRequestedEventArgs;
    struct ScrollControllerScrollToRequestedEventArgs;
    struct ScrollEventArgs;
    struct ScrollPresenter;
    struct ScrollSnapPoint;
    struct ScrollSnapPointBase;
    struct Selector;
    struct SelectorItem;
    struct SnapPointBase;
    struct SplitViewTemplateSettings;
    struct TabViewListView;
    struct Thumb;
    struct TickBar;
    struct ToggleButton;
    struct ToggleSwitchTemplateSettings;
    struct ToolTipTemplateSettings;
    struct ZoomSnapPoint;
    struct ZoomSnapPointBase;
    struct GeneratorPosition;
    struct DragCompletedEventHandler;
    struct DragDeltaEventHandler;
    struct DragStartedEventHandler;
    struct ItemsChangedEventHandler;
    struct RangeBaseValueChangedEventHandler;
    struct ScrollEventHandler;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarButtonTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarToggleButtonTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelper>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelperStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBaseFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBaseStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICalendarPanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICalendarViewTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICarouselPanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICarouselPanelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayout>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelper>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelperStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarAutomationPropertiesStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseClosingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptions>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptionsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGeneratorPositionHelper>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGeneratorPositionHelperStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IItemsChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILayoutInformation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILayoutInformationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorPanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMenuFlyoutItemTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMenuFlyoutPresenterTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderPanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotPanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup3>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics3>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatButton>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPointFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPointFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollBar>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollBarStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanRequestedEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanningInfo>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBaseFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelector>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItemFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItemStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBaseFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISplitViewTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IThumb>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IThumbStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITickBar>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITickBarStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonOverrides>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleSwitchTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToolTipTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBaseFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::AppBarButtonTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::AppBarTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::AppBarToggleButtonTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::AutoSuggestBoxHelper>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ButtonBase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CalendarPanel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CalendarViewTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CarouselPanel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColumnMajorUniformToLargestGridLayout>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ComboBoxHelper>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ComboBoxTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarAutomationProperties>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusFilterConverter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusToThicknessConverter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragDeltaEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragStartedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBaseClosingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPositionHelper>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::GridViewItemPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::GridViewItemTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::InfoBarPanel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ItemsChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::JumpListItemBackgroundConverter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::JumpListItemForegroundConverter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::LayoutInformation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ListViewItemPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ListViewItemTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::LoopingSelectorItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::LoopingSelectorPanel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::MenuFlyoutItemTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::MenuFlyoutPresenterTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::MonochromaticOverlayPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenterTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::OrientedVirtualizingPanel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::PickerFlyoutBase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::PivotHeaderItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::PivotHeaderPanel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::PivotPanel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::Popup>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::RangeBase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::RangeBaseValueChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatButton>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedScrollSnapPoint>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedZoomSnapPoint>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerAddScrollVelocityRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerPanRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPoint>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::Selector>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::SelectorItem>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::SnapPointBase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::SplitViewTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::TabViewListView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::Thumb>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::TickBar>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ToggleSwitchTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ToolTipTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPoint>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPointBase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::AnimationDirection>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ComponentResourceLocation>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusFilterKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusToThicknessConverterKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::EdgeTransitionLocation>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::GeneratorDirection>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::GroupHeaderPlacement>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ListViewItemPresenterCheckMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ListViewItemPresenterSelectionIndicatorMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::PlacementMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::PopupPlacementMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollEventType>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollingIndicatorMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::SliderSnapsTo>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::TickPlacement>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition>{ using type = struct_category<int32_t, int32_t>; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragDeltaEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragStartedEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::RangeBaseValueChangedEventHandler>{ using type = delegate_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollEventHandler>{ using type = delegate_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::AppBarButtonTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.AppBarButtonTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::AppBarTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.AppBarTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::AppBarToggleButtonTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.AppBarToggleButtonTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::AutoSuggestBoxHelper> = L"Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ButtonBase> = L"Microsoft.UI.Xaml.Controls.Primitives.ButtonBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CalendarPanel> = L"Microsoft.UI.Xaml.Controls.Primitives.CalendarPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CalendarViewTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.CalendarViewTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CarouselPanel> = L"Microsoft.UI.Xaml.Controls.Primitives.CarouselPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider> = L"Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum> = L"Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColumnMajorUniformToLargestGridLayout> = L"Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ComboBoxHelper> = L"Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ComboBoxTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar> = L"Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarAutomationProperties> = L"Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarAutomationProperties";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.CommandBarTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusFilterConverter> = L"Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusToThicknessConverter> = L"Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragDeltaEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragStartedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase> = L"Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBaseClosingEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.FlyoutBaseClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions> = L"Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPositionHelper> = L"Microsoft.UI.Xaml.Controls.Primitives.GeneratorPositionHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::GridViewItemPresenter> = L"Microsoft.UI.Xaml.Controls.Primitives.GridViewItemPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::GridViewItemTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::InfoBarPanel> = L"Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ItemsChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::JumpListItemBackgroundConverter> = L"Microsoft.UI.Xaml.Controls.Primitives.JumpListItemBackgroundConverter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::JumpListItemForegroundConverter> = L"Microsoft.UI.Xaml.Controls.Primitives.JumpListItemForegroundConverter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::LayoutInformation> = L"Microsoft.UI.Xaml.Controls.Primitives.LayoutInformation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ListViewItemPresenter> = L"Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ListViewItemTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector> = L"Microsoft.UI.Xaml.Controls.Primitives.LoopingSelector";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::LoopingSelectorItem> = L"Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::LoopingSelectorPanel> = L"Microsoft.UI.Xaml.Controls.Primitives.LoopingSelectorPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::MenuFlyoutItemTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutItemTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::MenuFlyoutPresenterTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.MenuFlyoutPresenterTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::MonochromaticOverlayPresenter> = L"Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter> = L"Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenterTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::OrientedVirtualizingPanel> = L"Microsoft.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::PickerFlyoutBase> = L"Microsoft.UI.Xaml.Controls.Primitives.PickerFlyoutBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::PivotHeaderItem> = L"Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::PivotHeaderPanel> = L"Microsoft.UI.Xaml.Controls.Primitives.PivotHeaderPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::PivotPanel> = L"Microsoft.UI.Xaml.Controls.Primitives.PivotPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::Popup> = L"Microsoft.UI.Xaml.Controls.Primitives.Popup";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::RangeBase> = L"Microsoft.UI.Xaml.Controls.Primitives.RangeBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::RangeBaseValueChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatButton> = L"Microsoft.UI.Xaml.Controls.Primitives.RepeatButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedScrollSnapPoint> = L"Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedZoomSnapPoint> = L"Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollBar> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerAddScrollVelocityRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerPanRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerPanRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPoint> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::Selector> = L"Microsoft.UI.Xaml.Controls.Primitives.Selector";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::SelectorItem> = L"Microsoft.UI.Xaml.Controls.Primitives.SelectorItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::SnapPointBase> = L"Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::SplitViewTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.SplitViewTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::TabViewListView> = L"Microsoft.UI.Xaml.Controls.Primitives.TabViewListView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::Thumb> = L"Microsoft.UI.Xaml.Controls.Primitives.Thumb";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::TickBar> = L"Microsoft.UI.Xaml.Controls.Primitives.TickBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ToggleButton> = L"Microsoft.UI.Xaml.Controls.Primitives.ToggleButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ToggleSwitchTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ToolTipTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPoint> = L"Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPointBase> = L"Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::AnimationDirection> = L"Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ComponentResourceLocation> = L"Microsoft.UI.Xaml.Controls.Primitives.ComponentResourceLocation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusFilterKind> = L"Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusToThicknessConverterKind> = L"Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::EdgeTransitionLocation> = L"Microsoft.UI.Xaml.Controls.Primitives.EdgeTransitionLocation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode> = L"Microsoft.UI.Xaml.Controls.Primitives.FlyoutPlacementMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowMode> = L"Microsoft.UI.Xaml.Controls.Primitives.FlyoutShowMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::GeneratorDirection> = L"Microsoft.UI.Xaml.Controls.Primitives.GeneratorDirection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::GroupHeaderPlacement> = L"Microsoft.UI.Xaml.Controls.Primitives.GroupHeaderPlacement";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ListViewItemPresenterCheckMode> = L"Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterCheckMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ListViewItemPresenterSelectionIndicatorMode> = L"Microsoft.UI.Xaml.Controls.Primitives.ListViewItemPresenterSelectionIndicatorMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::PlacementMode> = L"Microsoft.UI.Xaml.Controls.Primitives.PlacementMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::PopupPlacementMode> = L"Microsoft.UI.Xaml.Controls.Primitives.PopupPlacementMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollEventType> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollEventType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointsAlignment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollingIndicatorMode> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollingIndicatorMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::SliderSnapsTo> = L"Microsoft.UI.Xaml.Controls.Primitives.SliderSnapsTo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment> = L"Microsoft.UI.Xaml.Controls.Primitives.SnapPointsAlignment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::TickPlacement> = L"Microsoft.UI.Xaml.Controls.Primitives.TickPlacement";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition> = L"Microsoft.UI.Xaml.Controls.Primitives.GeneratorPosition";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarButtonTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.IAppBarButtonTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.IAppBarTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarToggleButtonTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.IAppBarToggleButtonTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelper> = L"Microsoft.UI.Xaml.Controls.Primitives.IAutoSuggestBoxHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelperStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IAutoSuggestBoxHelperStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBase> = L"Microsoft.UI.Xaml.Controls.Primitives.IButtonBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBaseFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBaseStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IButtonBaseStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICalendarPanel> = L"Microsoft.UI.Xaml.Controls.Primitives.ICalendarPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICalendarViewTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.ICalendarViewTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICarouselPanel> = L"Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICarouselPanelFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.ICarouselPanelFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider> = L"Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSlider";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum> = L"Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrum";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayout> = L"Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelper> = L"Microsoft.UI.Xaml.Controls.Primitives.IComboBoxHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelperStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IComboBoxHelperStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.IComboBoxTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar> = L"Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar2> = L"Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBar2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarAutomationPropertiesStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarAutomationPropertiesStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.ICommandBarTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverter> = L"Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverterStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverter> = L"Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverterStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.IDragCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventArgsFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IDragCompletedEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.IDragDeltaEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgsFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IDragDeltaEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.IDragStartedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventArgsFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IDragStartedEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase> = L"Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2> = L"Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBase2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseClosingEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseClosingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides> = L"Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics2> = L"Microsoft.UI.Xaml.Controls.Primitives.IFlyoutBaseStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptions> = L"Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptionsFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IFlyoutShowOptionsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGeneratorPositionHelper> = L"Microsoft.UI.Xaml.Controls.Primitives.IGeneratorPositionHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGeneratorPositionHelperStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IGeneratorPositionHelperStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemPresenter> = L"Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemPresenterFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemPresenterStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.IGridViewItemTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanel> = L"Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IItemsChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.IItemsChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverter> = L"Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverterStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemBackgroundConverterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverter> = L"Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverterStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IJumpListItemForegroundConverterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILayoutInformation> = L"Microsoft.UI.Xaml.Controls.Primitives.ILayoutInformation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILayoutInformationStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.ILayoutInformationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemPresenter> = L"Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemPresenterFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemPresenterStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IListViewItemPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.IListViewItemTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector> = L"Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelector";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorItem> = L"Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorPanel> = L"Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.ILoopingSelectorStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMenuFlyoutItemTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.IMenuFlyoutItemTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMenuFlyoutPresenterTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.IMenuFlyoutPresenterTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenter> = L"Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter> = L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter2> = L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenter2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics2> = L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanel> = L"Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanelFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IOrientedVirtualizingPanelFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBase> = L"Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides> = L"Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IPickerFlyoutBaseStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderItem> = L"Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderItemFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderPanel> = L"Microsoft.UI.Xaml.Controls.Primitives.IPivotHeaderPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotPanel> = L"Microsoft.UI.Xaml.Controls.Primitives.IPivotPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup> = L"Microsoft.UI.Xaml.Controls.Primitives.IPopup";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup2> = L"Microsoft.UI.Xaml.Controls.Primitives.IPopup2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup3> = L"Microsoft.UI.Xaml.Controls.Primitives.IPopup3";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IPopupStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics2> = L"Microsoft.UI.Xaml.Controls.Primitives.IPopupStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics3> = L"Microsoft.UI.Xaml.Controls.Primitives.IPopupStatics3";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBase> = L"Microsoft.UI.Xaml.Controls.Primitives.IRangeBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseOverrides> = L"Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.IRangeBaseValueChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatButton> = L"Microsoft.UI.Xaml.Controls.Primitives.IRepeatButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatButtonStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IRepeatButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint> = L"Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPointFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPointFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint> = L"Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPointFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPointFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollBar> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollBarStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollBarStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollController";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerAddScrollVelocityRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgsFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerAddScrollVelocityRequestedEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanRequestedEventArgsFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanRequestedEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanningInfo> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerPanningInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgsFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgsFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBaseFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointBaseFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointsInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelector> = L"Microsoft.UI.Xaml.Controls.Primitives.ISelector";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.ISelectorFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem> = L"Microsoft.UI.Xaml.Controls.Primitives.ISelectorItem";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItemFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItemStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.ISelectorItemStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.ISelectorStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase> = L"Microsoft.UI.Xaml.Controls.Primitives.ISnapPointBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBaseFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.ISnapPointBaseFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISplitViewTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.ISplitViewTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListView> = L"Microsoft.UI.Xaml.Controls.Primitives.ITabViewListView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListViewFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.ITabViewListViewFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IThumb> = L"Microsoft.UI.Xaml.Controls.Primitives.IThumb";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IThumbStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IThumbStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITickBar> = L"Microsoft.UI.Xaml.Controls.Primitives.ITickBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITickBarStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.ITickBarStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton> = L"Microsoft.UI.Xaml.Controls.Primitives.IToggleButton";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonOverrides> = L"Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonOverrides";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IToggleButtonStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleSwitchTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.IToggleSwitchTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToolTipTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.IToolTipTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint> = L"Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase> = L"Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBaseFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointBaseFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventHandler> = L"Microsoft.UI.Xaml.Controls.Primitives.DragCompletedEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragDeltaEventHandler> = L"Microsoft.UI.Xaml.Controls.Primitives.DragDeltaEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragStartedEventHandler> = L"Microsoft.UI.Xaml.Controls.Primitives.DragStartedEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler> = L"Microsoft.UI.Xaml.Controls.Primitives.ItemsChangedEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::RangeBaseValueChangedEventHandler> = L"Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollEventHandler> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollEventHandler";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarButtonTemplateSettings>{ 0x6FC13525,0xBF03,0x5190,{ 0xA1,0xD5,0xEB,0xD6,0xA1,0xBC,0xB6,0xB4 } }; // 6FC13525-BF03-5190-A1D5-EBD6A1BCB6B4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarTemplateSettings>{ 0xFE60E73F,0x9A52,0x5E0A,{ 0xB7,0x38,0x42,0x6F,0x97,0xD0,0x97,0x68 } }; // FE60E73F-9A52-5E0A-B738-426F97D09768
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarToggleButtonTemplateSettings>{ 0x32AA9F11,0x2F5E,0x57AB,{ 0xA5,0x70,0xB0,0x3B,0xCE,0xEE,0x83,0x5D } }; // 32AA9F11-2F5E-57AB-A570-B03BCEEE835D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelper>{ 0x1E56736C,0x8248,0x57D9,{ 0xAC,0x04,0xE4,0xE7,0xDC,0xC3,0xF9,0xE1 } }; // 1E56736C-8248-57D9-AC04-E4E7DCC3F9E1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelperStatics>{ 0xA8C05752,0xB160,0x5710,{ 0xA0,0x09,0x2A,0xD0,0xFC,0x4E,0xD1,0x11 } }; // A8C05752-B160-5710-A009-2AD0FC4ED111
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBase>{ 0x65714269,0x2473,0x5327,{ 0xA6,0x52,0x0E,0xA6,0xBC,0xE7,0xF4,0x03 } }; // 65714269-2473-5327-A652-0EA6BCE7F403
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBaseFactory>{ 0x21251AA9,0x6FD1,0x5E51,{ 0xAB,0x3B,0xE6,0xFC,0xAF,0x33,0x95,0xED } }; // 21251AA9-6FD1-5E51-AB3B-E6FCAF3395ED
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBaseStatics>{ 0xDBE812F6,0xADF8,0x51D3,{ 0x81,0x37,0xA8,0xFB,0xF6,0x44,0x5B,0x3C } }; // DBE812F6-ADF8-51D3-8137-A8FBF6445B3C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICalendarPanel>{ 0xA4B26C3A,0x3825,0x5DA4,{ 0xA9,0xE0,0xDD,0x9B,0x1E,0x40,0x5E,0x53 } }; // A4B26C3A-3825-5DA4-A9E0-DD9B1E405E53
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICalendarViewTemplateSettings>{ 0x23B0FACB,0x0083,0x5109,{ 0x87,0xD3,0xDB,0xEB,0x13,0xE3,0x31,0xA0 } }; // 23B0FACB-0083-5109-87D3-DBEB13E331A0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICarouselPanel>{ 0x298D3800,0xE5C9,0x5003,{ 0xB8,0x4C,0xA6,0x53,0x88,0x66,0xE2,0xD5 } }; // 298D3800-E5C9-5003-B84C-A6538866E2D5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICarouselPanelFactory>{ 0x161D3FC2,0xD1EC,0x5D1D,{ 0xAC,0x8A,0xCF,0x45,0x77,0xF0,0x6C,0x3C } }; // 161D3FC2-D1EC-5D1D-AC8A-CF4577F06C3C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider>{ 0x456231BB,0x5A4C,0x564B,{ 0x9B,0x3D,0x2F,0x15,0x70,0x61,0xA0,0xF8 } }; // 456231BB-5A4C-564B-9B3D-2F157061A0F8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory>{ 0xD0CB1F0E,0x0771,0x5C7D,{ 0xBA,0x14,0xAA,0x43,0x11,0x79,0xB2,0xAC } }; // D0CB1F0E-0771-5C7D-BA14-AA431179B2AC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics>{ 0x82F72B75,0xE986,0x587F,{ 0x97,0x01,0x8A,0xC6,0x80,0x1D,0xA9,0x32 } }; // 82F72B75-E986-587F-9701-8AC6801DA932
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum>{ 0x75305916,0x882D,0x5667,{ 0xBF,0xD0,0x0A,0xF7,0x2D,0x50,0x2D,0x72 } }; // 75305916-882D-5667-BFD0-0AF72D502D72
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory>{ 0xEFECD442,0x8C2A,0x50A6,{ 0x88,0xA3,0x39,0x99,0xEA,0x01,0xF0,0x96 } }; // EFECD442-8C2A-50A6-88A3-3999EA01F096
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>{ 0xA2B43DBA,0x1616,0x527D,{ 0x9D,0x32,0x03,0x95,0x73,0xB7,0xFC,0xE7 } }; // A2B43DBA-1616-527D-9D32-039573B7FCE7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayout>{ 0xEE10A6AA,0xEFEB,0x51AC,{ 0xB7,0x91,0x71,0x91,0x3A,0xE8,0xC2,0x35 } }; // EE10A6AA-EFEB-51AC-B791-71913AE8C235
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutFactory>{ 0x2F21AF59,0x1585,0x5325,{ 0x84,0x12,0x2B,0x83,0xBF,0x05,0xD3,0x45 } }; // 2F21AF59-1585-5325-8412-2B83BF05D345
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutStatics>{ 0x7B2F0EC6,0x2345,0x5986,{ 0xA5,0xB9,0xB1,0xBE,0xB5,0xA7,0x43,0x50 } }; // 7B2F0EC6-2345-5986-A5B9-B1BEB5A74350
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelper>{ 0x5A3C87AC,0xC399,0x5E5F,{ 0x87,0x3F,0xB9,0xD0,0xE8,0xBC,0xCE,0xB7 } }; // 5A3C87AC-C399-5E5F-873F-B9D0E8BCCEB7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelperStatics>{ 0xEC21BE42,0xED02,0x5C10,{ 0x9F,0xBE,0xAF,0x18,0x81,0xCD,0x87,0x7B } }; // EC21BE42-ED02-5C10-9FBE-AF1881CD877B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxTemplateSettings>{ 0xF2DC5E7F,0x8D3F,0x5C20,{ 0xB3,0x56,0xAF,0x6F,0x1F,0xF8,0x24,0x2A } }; // F2DC5E7F-8D3F-5C20-B356-AF6F1FF8242A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar>{ 0x0F7120C5,0x6D00,0x5489,{ 0x91,0x71,0xBE,0xDD,0x2D,0x4E,0xF6,0x77 } }; // 0F7120C5-6D00-5489-9171-BEDD2D4EF677
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar2>{ 0x6ACA769F,0x1119,0x5355,{ 0xAF,0x7F,0xBC,0xD5,0xAA,0x75,0x12,0x29 } }; // 6ACA769F-1119-5355-AF7F-BCD5AA751229
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarAutomationPropertiesStatics>{ 0xC9957F75,0xC57F,0x5BA3,{ 0xB8,0x67,0xF9,0xD8,0x6B,0x1D,0x90,0xB9 } }; // C9957F75-C57F-5BA3-B867-F9D86B1D90B9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory>{ 0x58DBCDA9,0x38E4,0x5EFC,{ 0xB7,0x40,0x26,0xFD,0xA3,0xD0,0xA3,0xC6 } }; // 58DBCDA9-38E4-5EFC-B740-26FDA3D0A3C6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarStatics>{ 0x5F7FB950,0x7C7D,0x5F5C,{ 0x8F,0xC5,0x91,0x34,0x4F,0x3B,0x03,0x4C } }; // 5F7FB950-7C7D-5F5C-8FC5-91344F3B034C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings>{ 0x533CC5CA,0xDCF7,0x5F9D,{ 0xA4,0x60,0x93,0x4A,0x88,0x3A,0xCD,0xC1 } }; // 533CC5CA-DCF7-5F9D-A460-934A883ACDC1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarTemplateSettings>{ 0xAE9535F6,0x1678,0x5066,{ 0x90,0xBF,0x14,0x7A,0xA6,0x10,0xC5,0xDD } }; // AE9535F6-1678-5066-90BF-147AA610C5DD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverter>{ 0x6F1A3ED2,0xF965,0x545E,{ 0xBD,0x44,0x44,0x1D,0xB1,0x79,0x4F,0x5F } }; // 6F1A3ED2-F965-545E-BD44-441DB1794F5F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverterStatics>{ 0x2D9574F9,0xCC9E,0x535E,{ 0xA7,0x0E,0xD5,0x5C,0x4C,0xA2,0x7F,0x49 } }; // 2D9574F9-CC9E-535E-A70E-D55C4CA27F49
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverter>{ 0xB36AA8AE,0x166E,0x5CA5,{ 0x93,0xD2,0x95,0xE9,0x90,0x7C,0x12,0x22 } }; // B36AA8AE-166E-5CA5-93D2-95E9907C1222
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverterStatics>{ 0x92AD9D36,0x5483,0x5258,{ 0xA4,0x3B,0x43,0x56,0x44,0x30,0x87,0xF1 } }; // 92AD9D36-5483-5258-A43B-4356443087F1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventArgs>{ 0xACD47547,0x3784,0x51FF,{ 0x8E,0xEB,0x7B,0x21,0x24,0x39,0x97,0x4B } }; // ACD47547-3784-51FF-8EEB-7B212439974B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventArgsFactory>{ 0x5767C408,0x454B,0x55CF,{ 0xB7,0x4E,0x22,0x96,0x42,0xAE,0xD1,0x08 } }; // 5767C408-454B-55CF-B74E-229642AED108
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgs>{ 0xBC405765,0xED94,0x5697,{ 0x85,0x06,0xA8,0xF3,0xD1,0x52,0x72,0xF9 } }; // BC405765-ED94-5697-8506-A8F3D15272F9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgsFactory>{ 0x4ADBA280,0xE1F9,0x5DAB,{ 0x87,0xFF,0x59,0x03,0xB4,0x19,0xEF,0x9D } }; // 4ADBA280-E1F9-5DAB-87FF-5903B419EF9D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventArgs>{ 0xAA27AEE4,0x2BDD,0x5D9A,{ 0x8A,0x1C,0xB3,0x74,0x80,0xA2,0x01,0x2B } }; // AA27AEE4-2BDD-5D9A-8A1C-B37480A2012B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventArgsFactory>{ 0x36078AA3,0x906C,0x5EF0,{ 0x9D,0x24,0x30,0xC0,0x9F,0x79,0xC1,0x8F } }; // 36078AA3-906C-5EF0-9D24-30C09F79C18F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase>{ 0xBB6603BF,0x744D,0x5C31,{ 0xA8,0x7D,0x74,0x43,0x94,0x63,0x4D,0x77 } }; // BB6603BF-744D-5C31-A87D-744394634D77
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2>{ 0x54592F97,0xE40E,0x5CAD,{ 0x86,0x4B,0x32,0x30,0x7D,0x04,0x70,0x20 } }; // 54592F97-E40E-5CAD-864B-32307D047020
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseClosingEventArgs>{ 0x7CB280B4,0x1CCA,0x5A5A,{ 0x8E,0xA4,0x19,0x1A,0x2B,0xBC,0x8B,0x32 } }; // 7CB280B4-1CCA-5A5A-8EA4-191A2BBC8B32
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseFactory>{ 0x006D738F,0x7C91,0x5EF3,{ 0x8A,0x80,0xA5,0x48,0x10,0x8D,0xAB,0x8B } }; // 006D738F-7C91-5EF3-8A80-A548108DAB8B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides>{ 0x5BB19ED8,0x08DE,0x5EEC,{ 0x91,0xCB,0x5F,0xC5,0x99,0x74,0xE8,0x94 } }; // 5BB19ED8-08DE-5EEC-91CB-5FC59974E894
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics>{ 0x63EE628E,0xD2E3,0x5515,{ 0xAE,0xA4,0xE4,0x61,0x08,0x8C,0x0C,0x4E } }; // 63EE628E-D2E3-5515-AEA4-E461088C0C4E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics2>{ 0x2403CD2C,0xA6B8,0x5DC2,{ 0xBE,0x3B,0x2A,0x4B,0xDD,0x07,0x2E,0xF1 } }; // 2403CD2C-A6B8-5DC2-BE3B-2A4BDD072EF1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptions>{ 0x30774A93,0x2803,0x50D3,{ 0xB4,0x06,0x90,0x4A,0xEC,0x3E,0x17,0x5D } }; // 30774A93-2803-50D3-B406-904AEC3E175D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptionsFactory>{ 0x17426D30,0x70D9,0x54D7,{ 0xBD,0x39,0xE7,0xC4,0xC9,0x40,0xC0,0xF4 } }; // 17426D30-70D9-54D7-BD39-E7C4C940C0F4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGeneratorPositionHelper>{ 0x872A9F8F,0x0E0E,0x5089,{ 0x92,0xA9,0xDB,0xCE,0xD9,0x9C,0xA8,0x6D } }; // 872A9F8F-0E0E-5089-92A9-DBCED99CA86D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGeneratorPositionHelperStatics>{ 0x3113605A,0x3FEB,0x54F9,{ 0xA2,0x56,0xF3,0x73,0x25,0x02,0x81,0xD4 } }; // 3113605A-3FEB-54F9-A256-F373250281D4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemPresenter>{ 0x22772FD8,0xFE30,0x5B6F,{ 0x9B,0x17,0x5E,0xEA,0x5D,0x70,0xD8,0x60 } }; // 22772FD8-FE30-5B6F-9B17-5EEA5D70D860
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemPresenterFactory>{ 0xD1F47760,0xC353,0x5A10,{ 0x8A,0x6B,0x9A,0x1E,0x3B,0x52,0xF9,0x34 } }; // D1F47760-C353-5A10-8A6B-9A1E3B52F934
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemPresenterStatics>{ 0x31A58ED1,0x901C,0x5753,{ 0x94,0x4E,0x4D,0xD9,0xF2,0x2D,0x24,0x47 } }; // 31A58ED1-901C-5753-944E-4DD9F22D2447
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemTemplateSettings>{ 0x7033E884,0x2117,0x56E7,{ 0xAF,0xB8,0xB7,0xF5,0xB8,0xB6,0x4C,0x70 } }; // 7033E884-2117-56E7-AFB8-B7F5B8B64C70
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanel>{ 0x4D2FD5FE,0xCB75,0x52FF,{ 0xB5,0x7F,0xA9,0x92,0x91,0x23,0x83,0xCC } }; // 4D2FD5FE-CB75-52FF-B57F-A992912383CC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelFactory>{ 0x00D1A8C5,0xF631,0x564A,{ 0x8E,0x9C,0x7C,0x5C,0xCA,0xD2,0x38,0xDE } }; // 00D1A8C5-F631-564A-8E9C-7C5CCAD238DE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelStatics>{ 0xE0F19305,0xB392,0x5FA6,{ 0x96,0x70,0x89,0x58,0x95,0xA0,0x67,0xFF } }; // E0F19305-B392-5FA6-9670-895895A067FF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IItemsChangedEventArgs>{ 0xB2BA1610,0x0E96,0x538A,{ 0x97,0x8F,0xEC,0x0B,0x37,0x19,0x32,0x28 } }; // B2BA1610-0E96-538A-978F-EC0B37193228
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverter>{ 0xC475BB52,0xEA34,0x5CDE,{ 0x98,0x51,0x78,0x41,0xFE,0xBD,0x3D,0x1D } }; // C475BB52-EA34-5CDE-9851-7841FEBD3D1D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverterStatics>{ 0xB03CB261,0x71EC,0x540E,{ 0x83,0xAC,0xE1,0xA9,0xFD,0xD3,0x35,0xE6 } }; // B03CB261-71EC-540E-83AC-E1A9FDD335E6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverter>{ 0x7308E0E4,0x102F,0x571A,{ 0xBF,0xDC,0xC8,0xF4,0x11,0xF0,0x74,0x00 } }; // 7308E0E4-102F-571A-BFDC-C8F411F07400
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverterStatics>{ 0x9AB3B95D,0x4061,0x59B4,{ 0x9C,0xE9,0xF4,0x5E,0x2C,0x05,0xAD,0xD7 } }; // 9AB3B95D-4061-59B4-9CE9-F45E2C05ADD7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILayoutInformation>{ 0xCEEA0A8C,0x5A4F,0x5D7A,{ 0x8F,0xEA,0x77,0xB5,0xE0,0xE0,0x23,0x0C } }; // CEEA0A8C-5A4F-5D7A-8FEA-77B5E0E0230C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILayoutInformationStatics>{ 0x8DDB192D,0xB7FF,0x5307,{ 0xAC,0xF4,0xD4,0xE5,0x47,0xDA,0x58,0x15 } }; // 8DDB192D-B7FF-5307-ACF4-D4E547DA5815
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemPresenter>{ 0x81012623,0xD987,0x5582,{ 0xBC,0x28,0x75,0x5A,0x95,0xCA,0xAF,0x1C } }; // 81012623-D987-5582-BC28-755A95CAAF1C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemPresenterFactory>{ 0xF86AC266,0x2740,0x505C,{ 0x95,0xEB,0xA7,0x33,0x1B,0x53,0xB4,0xA3 } }; // F86AC266-2740-505C-95EB-A7331B53B4A3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemPresenterStatics>{ 0xFB0810F9,0x3475,0x593A,{ 0x88,0xA8,0xED,0xBB,0xF7,0x6F,0xA9,0x0C } }; // FB0810F9-3475-593A-88A8-EDBBF76FA90C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemTemplateSettings>{ 0x6E302714,0x2955,0x5961,{ 0x94,0xED,0x5D,0x0C,0x0C,0x1D,0x0B,0x07 } }; // 6E302714-2955-5961-94ED-5D0C0C1D0B07
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector>{ 0x077759AC,0x6B52,0x5054,{ 0xBD,0x49,0x9E,0xBA,0x84,0x3C,0xF8,0x94 } }; // 077759AC-6B52-5054-BD49-9EBA843CF894
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorItem>{ 0x75D36595,0xBF4F,0x5393,{ 0x81,0x9F,0xEB,0x1E,0x32,0x1C,0xE1,0xDC } }; // 75D36595-BF4F-5393-819F-EB1E321CE1DC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorPanel>{ 0x7479C3A4,0xC5B1,0x5112,{ 0xBE,0xA9,0xBE,0xEF,0x5C,0xC7,0x9F,0x57 } }; // 7479C3A4-C5B1-5112-BEA9-BEEF5CC79F57
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorStatics>{ 0xE7F8770E,0x729B,0x57AA,{ 0x9A,0x79,0xED,0xE3,0xF8,0x42,0x53,0xCC } }; // E7F8770E-729B-57AA-9A79-EDE3F84253CC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMenuFlyoutItemTemplateSettings>{ 0xFA7B8B1F,0x020D,0x58EC,{ 0x86,0x58,0xF2,0xCE,0x97,0x31,0x00,0x51 } }; // FA7B8B1F-020D-58EC-8658-F2CE97310051
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMenuFlyoutPresenterTemplateSettings>{ 0x2BFCFA7E,0x483C,0x5FC9,{ 0xB0,0x70,0xFB,0xB5,0x8E,0x6E,0x97,0x4D } }; // 2BFCFA7E-483C-5FC9-B070-FBB58E6E974D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenter>{ 0x3F0D1E92,0x5450,0x5078,{ 0x8F,0x72,0x5A,0xC1,0x74,0x99,0x76,0xE3 } }; // 3F0D1E92-5450-5078-8F72-5AC1749976E3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterFactory>{ 0x4997847B,0xB558,0x5C8C,{ 0x82,0x98,0xBE,0x15,0x32,0xE8,0x98,0xEC } }; // 4997847B-B558-5C8C-8298-BE1532E898EC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterStatics>{ 0xA931BF94,0xA9C6,0x5D10,{ 0x83,0xAC,0x14,0x92,0x73,0x9E,0x11,0xE4 } }; // A931BF94-A9C6-5D10-83AC-1492739E11E4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter>{ 0x64939DF5,0x760C,0x5B0B,{ 0xAF,0x4D,0xD8,0xDD,0x4E,0xE5,0x02,0x78 } }; // 64939DF5-760C-5B0B-AF4D-D8DD4EE50278
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter2>{ 0x3F775730,0x3713,0x5B3B,{ 0x96,0x00,0x53,0xB7,0x9F,0xFF,0x2E,0x35 } }; // 3F775730-3713-5B3B-9600-53B79FFF2E35
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory>{ 0xB28B0160,0x022C,0x593C,{ 0xAB,0x9A,0x7B,0x3D,0xED,0x2C,0x07,0x54 } }; // B28B0160-022C-593C-AB9A-7B3DED2C0754
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics>{ 0x3B07F068,0xA764,0x549C,{ 0xB4,0xCF,0xEB,0xAB,0x40,0xEC,0x5D,0xD1 } }; // 3B07F068-A764-549C-B4CF-EBAB40EC5DD1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics2>{ 0x4B473F61,0x3F17,0x5E4F,{ 0x84,0x53,0x54,0x1D,0xF9,0x47,0xA7,0x89 } }; // 4B473F61-3F17-5E4F-8453-541DF947A789
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettings>{ 0xA5119750,0xFA71,0x56F2,{ 0xBF,0xA4,0x79,0x9D,0x9F,0x30,0x4C,0xB8 } }; // A5119750-FA71-56F2-BFA4-799D9F304CB8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsFactory>{ 0x19EF1328,0x52C7,0x55E3,{ 0xB1,0xBB,0x92,0x3F,0x2F,0x39,0xBD,0x6E } }; // 19EF1328-52C7-55E3-B1BB-923F2F39BD6E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsStatics>{ 0x72F09642,0xC658,0x5B06,{ 0x8C,0x81,0x15,0x66,0xB7,0x37,0xB7,0x46 } }; // 72F09642-C658-5B06-8C81-1566B737B746
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanel>{ 0x450D2984,0x1E70,0x53D8,{ 0x82,0x69,0xA2,0x75,0x64,0xDA,0xA6,0x9F } }; // 450D2984-1E70-53D8-8269-A27564DAA69F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanelFactory>{ 0xA70C98F4,0xD671,0x5F46,{ 0x9B,0x01,0x28,0xB1,0xB5,0x52,0x8F,0xC0 } }; // A70C98F4-D671-5F46-9B01-28B1B5528FC0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBase>{ 0x8C2CC030,0x14FE,0x5FCA,{ 0x8C,0xE3,0xE1,0x1A,0x91,0x86,0x32,0xCC } }; // 8C2CC030-14FE-5FCA-8CE3-E11A918632CC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseFactory>{ 0x8231DAB5,0x4B8B,0x5674,{ 0xB2,0x73,0x1C,0x66,0x70,0x1C,0x14,0xE1 } }; // 8231DAB5-4B8B-5674-B273-1C66701C14E1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides>{ 0x5B090FFC,0xD423,0x5756,{ 0xA0,0x1C,0xAA,0x73,0x45,0x79,0xD8,0x56 } }; // 5B090FFC-D423-5756-A01C-AA734579D856
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseStatics>{ 0x0E414DC2,0x38E0,0x5EFE,{ 0xBA,0xE8,0xA0,0xC6,0xA7,0x85,0x14,0xC8 } }; // 0E414DC2-38E0-5EFE-BAE8-A0C6A78514C8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderItem>{ 0x612D6F77,0x6C76,0x5239,{ 0x88,0x94,0xEF,0xBA,0xB0,0xF5,0x3E,0x3E } }; // 612D6F77-6C76-5239-8894-EFBAB0F53E3E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderItemFactory>{ 0xD8DB1A66,0x1384,0x518D,{ 0xBC,0x8F,0x9E,0xDC,0x2C,0xA7,0x91,0x90 } }; // D8DB1A66-1384-518D-BC8F-9EDC2CA79190
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderPanel>{ 0xB5AF5BED,0x5F2F,0x5AF6,{ 0xBF,0x17,0xC0,0x85,0x53,0x1C,0x88,0x0F } }; // B5AF5BED-5F2F-5AF6-BF17-C085531C880F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotPanel>{ 0x8E66CDCF,0x3BF5,0x5FE0,{ 0xB0,0x5B,0x11,0x25,0xE9,0x61,0xF0,0xCC } }; // 8E66CDCF-3BF5-5FE0-B05B-1125E961F0CC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup>{ 0x4E3AB19D,0x2F95,0x579C,{ 0x95,0x35,0x90,0x6C,0x58,0x62,0x94,0x37 } }; // 4E3AB19D-2F95-579C-9535-906C58629437
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup2>{ 0xEA9C4F43,0xA937,0x53D5,{ 0xB6,0x65,0x66,0x40,0xAD,0x7E,0xC2,0xF4 } }; // EA9C4F43-A937-53D5-B665-6640AD7EC2F4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup3>{ 0x03736C25,0xDD36,0x5344,{ 0x9A,0x8D,0x3F,0x4E,0x8E,0x61,0x6C,0xBA } }; // 03736C25-DD36-5344-9A8D-3F4E8E616CBA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics>{ 0xC1ACFAA4,0x209A,0x5FB8,{ 0x89,0x34,0x88,0x25,0x97,0x67,0x69,0xB8 } }; // C1ACFAA4-209A-5FB8-8934-8825976769B8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics2>{ 0x79B3285A,0x1330,0x5CFD,{ 0xAF,0x2F,0x88,0xEF,0xA0,0x07,0x70,0xA9 } }; // 79B3285A-1330-5CFD-AF2F-88EFA00770A9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics3>{ 0x2409656D,0x84F9,0x5979,{ 0x8A,0xDF,0xF3,0xDB,0x71,0x53,0x0B,0x22 } }; // 2409656D-84F9-5979-8ADF-F3DB71530B22
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBase>{ 0x540D6D61,0x8FAC,0x5D5C,{ 0xB5,0xB0,0xE1,0x72,0xA7,0xDD,0xE1,0x03 } }; // 540D6D61-8FAC-5D5C-B5B0-E172A7DDE103
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseFactory>{ 0x41C205E2,0x4422,0x5DCA,{ 0x9B,0x49,0xE3,0x12,0x10,0xEA,0x39,0x6C } }; // 41C205E2-4422-5DCA-9B49-E31210EA396C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseOverrides>{ 0xB3DEB76F,0x68A6,0x5C14,{ 0xA8,0x24,0xAB,0x58,0xE8,0x77,0x47,0x45 } }; // B3DEB76F-68A6-5C14-A824-AB58E8774745
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseStatics>{ 0x4AED5E49,0x64EC,0x56F1,{ 0x87,0x4D,0xB8,0xC0,0xF8,0x3F,0x9A,0xC8 } }; // 4AED5E49-64EC-56F1-874D-B8C0F83F9AC8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventArgs>{ 0xB0181692,0x9578,0x51C7,{ 0x9D,0x1C,0xAD,0xFC,0xF8,0x94,0x5A,0xA9 } }; // B0181692-9578-51C7-9D1C-ADFCF8945AA9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatButton>{ 0x97F4C728,0x4A94,0x56B5,{ 0x91,0xE4,0xE7,0xC6,0xF6,0xA1,0x25,0x1A } }; // 97F4C728-4A94-56B5-91E4-E7C6F6A1251A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatButtonStatics>{ 0xB57320F6,0xA58A,0x589C,{ 0x9F,0x41,0xAA,0xB0,0x2F,0x51,0xE8,0x29 } }; // B57320F6-A58A-589C-9F41-AAB02F51E829
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint>{ 0x5828FB51,0x8EBB,0x596D,{ 0xA8,0x71,0x50,0x06,0x34,0x79,0x36,0x2D } }; // 5828FB51-8EBB-596D-A871-50063479362D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPointFactory>{ 0xF2FD8403,0x679E,0x5C31,{ 0xB4,0x31,0x72,0xA0,0xE0,0x01,0x4E,0x6A } }; // F2FD8403-679E-5C31-B431-72A0E0014E6A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint>{ 0x1FA6DBBE,0x5E11,0x5D32,{ 0x87,0x3B,0xC9,0x2B,0x1D,0x17,0x15,0x38 } }; // 1FA6DBBE-5E11-5D32-873B-C92B1D171538
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPointFactory>{ 0x7D032A7C,0xD91C,0x5660,{ 0xB1,0xC2,0xB3,0x6E,0x88,0x10,0xAC,0x65 } }; // 7D032A7C-D91C-5660-B1C2-B36E8810AC65
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollBar>{ 0x568CBF41,0xF741,0x5F05,{ 0x8E,0x08,0xC0,0xA5,0x0A,0xC1,0x7C,0x8C } }; // 568CBF41-F741-5F05-8E08-C0A50AC17C8C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollBarStatics>{ 0x88B52E18,0x9528,0x579F,{ 0xBD,0x84,0xEB,0xA5,0x85,0xA0,0x1C,0x7A } }; // 88B52E18-9528-579F-BD84-EBA585A01C7A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>{ 0x54396786,0x1726,0x53D6,{ 0x97,0xA3,0x40,0xAF,0x08,0x38,0x31,0x4C } }; // 54396786-1726-53D6-97A3-40AF0838314C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgs>{ 0x317BBC1A,0x0CF7,0x5815,{ 0xA8,0xA7,0xBD,0x7E,0x6E,0xEF,0x96,0x6A } }; // 317BBC1A-0CF7-5815-A8A7-BD7E6EEF966A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgsFactory>{ 0x9221D193,0x6F82,0x5E21,{ 0xAA,0xCC,0x0B,0x14,0x60,0x81,0x8A,0xB5 } }; // 9221D193-6F82-5E21-AACC-0B1460818AB5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanRequestedEventArgs>{ 0xBEEE064E,0x1D4D,0x5A1A,{ 0x87,0x81,0xAC,0xF1,0x58,0x7A,0x5D,0x6A } }; // BEEE064E-1D4D-5A1A-8781-ACF1587A5D6A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanRequestedEventArgsFactory>{ 0xC3B0A6C1,0x6732,0x5832,{ 0xBE,0x50,0x4E,0xCA,0xDE,0x58,0x5C,0xBC } }; // C3B0A6C1-6732-5832-BE50-4ECADE585CBC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanningInfo>{ 0x53D5B301,0x9AAB,0x59BC,{ 0x92,0xCD,0x42,0xCF,0x21,0xAB,0xD5,0x90 } }; // 53D5B301-9AAB-59BC-92CD-42CF21ABD590
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs>{ 0xE7F305FA,0x4073,0x5D88,{ 0x8B,0xF1,0xAE,0x4E,0xCB,0x92,0x08,0xBF } }; // E7F305FA-4073-5D88-8BF1-AE4ECB9208BF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgsFactory>{ 0x7ECF01A7,0xEF3F,0x5AF9,{ 0x93,0xB4,0x38,0xBC,0x1B,0xAF,0xD3,0x35 } }; // 7ECF01A7-EF3F-5AF9-93B4-38BC1BAFD335
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs>{ 0x73F16B99,0x7310,0x5C73,{ 0x87,0x2B,0x27,0x6E,0x5A,0x9D,0x49,0x13 } }; // 73F16B99-7310-5C73-872B-276E5A9D4913
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgsFactory>{ 0x01675DC4,0x1074,0x54E8,{ 0xBE,0xBB,0x66,0xB0,0x3A,0x33,0xDA,0x0D } }; // 01675DC4-1074-54E8-BEBB-66B03A33DA0D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollEventArgs>{ 0xDBD27F11,0xF937,0x5AD0,{ 0x9F,0x75,0xB9,0x62,0xC3,0x32,0x54,0xCF } }; // DBD27F11-F937-5AD0-9F75-B962C33254CF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>{ 0x424B8AFD,0xF7AA,0x5E5B,{ 0x9D,0x0B,0x5F,0x0E,0xA4,0xE1,0xA5,0x6E } }; // 424B8AFD-F7AA-5E5B-9D0B-5F0EA4E1A56E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterFactory>{ 0x9F5CDC57,0xD229,0x52B2,{ 0xAE,0xE4,0x37,0xC4,0x96,0x76,0x4E,0xA3 } }; // 9F5CDC57-D229-52B2-AEE4-37C496764EA3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterStatics>{ 0xE27BA947,0xF8A5,0x5869,{ 0x9A,0x71,0xCD,0x51,0x4D,0x41,0xC6,0x23 } }; // E27BA947-F8A5-5869-9A71-CD514D41C623
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint>{ 0x73D918FF,0xD16C,0x52CD,{ 0x96,0x57,0xE3,0x92,0xEE,0x08,0x86,0x8A } }; // 73D918FF-D16C-52CD-9657-E392EE08868A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase>{ 0x45D7319D,0xC9EB,0x5109,{ 0x96,0x68,0xFF,0x3F,0xC6,0xCC,0xDF,0x11 } }; // 45D7319D-C9EB-5109-9668-FF3FC6CCDF11
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBaseFactory>{ 0x3FA2E552,0x1A45,0x5691,{ 0x99,0xDC,0x64,0x00,0x08,0x7C,0xBB,0x38 } }; // 3FA2E552-1A45-5691-99DC-6400087CBB38
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointFactory>{ 0x39304BC7,0x0E54,0x5C06,{ 0x89,0x20,0xAD,0xCF,0x67,0xE7,0xC4,0x66 } }; // 39304BC7-0E54-5C06-8920-ADCF67E7C466
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>{ 0xD3EA6E09,0xECF7,0x51A8,{ 0xBD,0x54,0xFC,0x84,0xB9,0x65,0x37,0x66 } }; // D3EA6E09-ECF7-51A8-BD54-FC84B9653766
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelector>{ 0x8F7E2159,0xE61D,0x576F,{ 0x84,0x76,0xF8,0x3F,0xDE,0x3D,0x68,0x9E } }; // 8F7E2159-E61D-576F-8476-F83FDE3D689E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorFactory>{ 0x21A42024,0xAF07,0x58F9,{ 0x87,0x89,0x84,0x8D,0x33,0x24,0xD9,0x01 } }; // 21A42024-AF07-58F9-8789-848D3324D901
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem>{ 0x5772C4DE,0x60EA,0x5492,{ 0x8C,0x5E,0xB3,0x32,0x3D,0x5A,0x3C,0xA6 } }; // 5772C4DE-60EA-5492-8C5E-B3323D5A3CA6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItemFactory>{ 0x078039F5,0x76ED,0x5299,{ 0x97,0x15,0xFC,0x8C,0x58,0x17,0x35,0x60 } }; // 078039F5-76ED-5299-9715-FC8C58173560
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItemStatics>{ 0x4B201A54,0xA414,0x5E79,{ 0x9B,0x6B,0x3D,0xA9,0xDE,0x44,0x2A,0x35 } }; // 4B201A54-A414-5E79-9B6B-3DA9DE442A35
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorStatics>{ 0x569B2234,0x1CEB,0x516E,{ 0xB6,0x4E,0x0D,0x47,0x94,0x52,0xE2,0x79 } }; // 569B2234-1CEB-516E-B64E-0D479452E279
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase>{ 0x14ED1089,0xFB97,0x5211,{ 0x8C,0x45,0xC3,0x52,0xCD,0x8B,0x96,0xA1 } }; // 14ED1089-FB97-5211-8C45-C352CD8B96A1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBaseFactory>{ 0x50266508,0x15F8,0x530A,{ 0xA2,0x13,0xE9,0x76,0xE0,0x4E,0x67,0x0B } }; // 50266508-15F8-530A-A213-E976E04E670B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISplitViewTemplateSettings>{ 0x44D6F6F7,0x0058,0x5EAC,{ 0x88,0x37,0xF7,0xF1,0x6D,0x96,0x1F,0x7C } }; // 44D6F6F7-0058-5EAC-8837-F7F16D961F7C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListView>{ 0xEC48EFB5,0x2CB3,0x562B,{ 0x92,0x1C,0xE5,0x54,0x92,0x3C,0xE1,0xD5 } }; // EC48EFB5-2CB3-562B-921C-E554923CE1D5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListViewFactory>{ 0x8A084FDD,0x86F0,0x51EE,{ 0x98,0xDF,0x5F,0xBD,0x0B,0x56,0x69,0xBE } }; // 8A084FDD-86F0-51EE-98DF-5FBD0B5669BE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IThumb>{ 0x9B540AE4,0x98ED,0x5A19,{ 0x95,0x12,0xA5,0x68,0x78,0xC5,0x2F,0xEE } }; // 9B540AE4-98ED-5A19-9512-A56878C52FEE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IThumbStatics>{ 0x900C4924,0x886A,0x5F24,{ 0x96,0xD1,0x1E,0xC3,0xA3,0x6E,0x8D,0x66 } }; // 900C4924-886A-5F24-96D1-1EC3A36E8D66
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITickBar>{ 0x573293BD,0x3F6A,0x56C3,{ 0xBF,0x95,0x62,0x54,0xC9,0xBB,0xBC,0x89 } }; // 573293BD-3F6A-56C3-BF95-6254C9BBBC89
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITickBarStatics>{ 0x41C210CF,0x7060,0x5B7B,{ 0x83,0xAB,0xA3,0x02,0xAA,0x6E,0xED,0x6B } }; // 41C210CF-7060-5B7B-83AB-A302AA6EED6B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton>{ 0x686FBAA4,0xC866,0x568B,{ 0x8F,0x75,0x48,0x1D,0x8D,0x54,0x52,0x91 } }; // 686FBAA4-C866-568B-8F75-481D8D545291
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonFactory>{ 0x519511BB,0xD35B,0x5E2D,{ 0x96,0x6C,0x83,0x69,0x40,0x5A,0x44,0x08 } }; // 519511BB-D35B-5E2D-966C-8369405A4408
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonOverrides>{ 0xEE55F85D,0x9061,0x5D18,{ 0xB3,0x1A,0x90,0xBC,0x56,0x25,0xCF,0xE9 } }; // EE55F85D-9061-5D18-B31A-90BC5625CFE9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonStatics>{ 0x4B8397E3,0x76FD,0x59DF,{ 0x82,0x4F,0x40,0xAE,0x33,0x9F,0xB0,0x0B } }; // 4B8397E3-76FD-59DF-824F-40AE339FB00B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleSwitchTemplateSettings>{ 0x8F9640A3,0xAA4E,0x52DA,{ 0xA2,0xC6,0x91,0x67,0xC8,0x00,0xBA,0xBA } }; // 8F9640A3-AA4E-52DA-A2C6-9167C800BABA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToolTipTemplateSettings>{ 0x4F725950,0xFF64,0x5CF1,{ 0x9E,0x86,0x90,0x11,0xFB,0x10,0xE8,0x8E } }; // 4F725950-FF64-5CF1-9E86-9011FB10E88E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint>{ 0x8101D353,0x8DB3,0x5AC6,{ 0xA7,0xF8,0xB1,0x8E,0xB9,0xC1,0x23,0xAC } }; // 8101D353-8DB3-5AC6-A7F8-B18EB9C123AC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase>{ 0xC6D08756,0x0860,0x5C2D,{ 0xAB,0xEC,0x6E,0xB4,0xAA,0x4B,0x53,0xD7 } }; // C6D08756-0860-5C2D-ABEC-6EB4AA4B53D7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBaseFactory>{ 0x2C689EEA,0xB6CF,0x5024,{ 0x84,0x7B,0x58,0x93,0x55,0xD5,0xA2,0xFA } }; // 2C689EEA-B6CF-5024-847B-589355D5A2FA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointFactory>{ 0x0B3B5418,0xBFF6,0x5A9E,{ 0xB7,0x34,0xB6,0x8A,0xDF,0x49,0xF7,0x75 } }; // 0B3B5418-BFF6-5A9E-B734-B68ADF49F775
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventHandler>{ 0xA27012CB,0x923F,0x5992,{ 0xAD,0xE2,0x87,0x8F,0x7C,0x79,0x4E,0xF5 } }; // A27012CB-923F-5992-ADE2-878F7C794EF5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragDeltaEventHandler>{ 0x49CA91D0,0xFC43,0x56B1,{ 0x98,0xBD,0x68,0xE2,0xE1,0xE2,0x4D,0xE9 } }; // 49CA91D0-FC43-56B1-98BD-68E2E1E24DE9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragStartedEventHandler>{ 0x13191F6D,0xA651,0x5870,{ 0xB3,0xA1,0x22,0x15,0x50,0x00,0x35,0x12 } }; // 13191F6D-A651-5870-B3A1-221550003512
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler>{ 0x8E15E39E,0x23F7,0x5FCF,{ 0xB0,0x4B,0xD1,0xB7,0x89,0x1D,0xCC,0xC4 } }; // 8E15E39E-23F7-5FCF-B04B-D1B7891DCCC4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::RangeBaseValueChangedEventHandler>{ 0x23F0E209,0x9455,0x54CB,{ 0xB8,0xBC,0x0B,0x49,0x55,0x3C,0x7D,0xCC } }; // 23F0E209-9455-54CB-B8BC-0B49553C7DCC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollEventHandler>{ 0xFF661BA9,0x8C06,0x5785,{ 0xA2,0x3C,0x30,0xD6,0xB3,0x16,0x31,0xE8 } }; // FF661BA9-8C06-5785-A23C-30D6B31631E8
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::AppBarButtonTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarButtonTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::AppBarTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::AppBarToggleButtonTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarToggleButtonTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::AutoSuggestBoxHelper>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelper; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ButtonBase>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::CalendarPanel>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ICalendarPanel; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::CalendarViewTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ICalendarViewTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::CarouselPanel>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ICarouselPanel; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColumnMajorUniformToLargestGridLayout>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayout; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ComboBoxHelper>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelper; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ComboBoxTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusFilterConverter>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusToThicknessConverter>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragDeltaEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragStartedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBaseClosingEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseClosingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptions; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPositionHelper>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IGeneratorPositionHelper; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::GridViewItemPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::GridViewItemTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::InfoBarPanel>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanel; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ItemsChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IItemsChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::JumpListItemBackgroundConverter>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::JumpListItemForegroundConverter>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::LayoutInformation>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ILayoutInformation; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ListViewItemPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ListViewItemTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::LoopingSelector>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::LoopingSelectorItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::LoopingSelectorPanel>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorPanel; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::MenuFlyoutItemTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IMenuFlyoutItemTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::MenuFlyoutPresenterTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IMenuFlyoutPresenterTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::MonochromaticOverlayPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenterTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::OrientedVirtualizingPanel>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanel; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::PickerFlyoutBase>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::PivotHeaderItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::PivotHeaderPanel>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderPanel; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::PivotPanel>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotPanel; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::Popup>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::RangeBase>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::RangeBaseValueChangedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatButton>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatButton; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedScrollSnapPoint>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedZoomSnapPoint>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollBar>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollBar; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerAddScrollVelocityRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerPanRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPoint>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::Selector>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelector; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::SelectorItem>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::SnapPointBase>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::SplitViewTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ISplitViewTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::TabViewListView>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListView; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::Thumb>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IThumb; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::TickBar>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ITickBar; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ToggleButton>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ToggleSwitchTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleSwitchTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ToolTipTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IToolTipTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPoint>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPointBase>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase; };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarButtonTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeyboardAcceleratorTextMinWidth(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ClipRect(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall get_CompactVerticalDelta(double*) noexcept = 0;
            virtual int32_t __stdcall get_CompactRootMargin(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall get_MinimalVerticalDelta(double*) noexcept = 0;
            virtual int32_t __stdcall get_MinimalRootMargin(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall get_HiddenVerticalDelta(double*) noexcept = 0;
            virtual int32_t __stdcall get_HiddenRootMargin(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall get_NegativeCompactVerticalDelta(double*) noexcept = 0;
            virtual int32_t __stdcall get_NegativeMinimalVerticalDelta(double*) noexcept = 0;
            virtual int32_t __stdcall get_NegativeHiddenVerticalDelta(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarToggleButtonTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeyboardAcceleratorTextMinWidth(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelper>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelperStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeepInteriorCornersSquareProperty(void**) noexcept = 0;
            virtual int32_t __stdcall SetKeepInteriorCornersSquare(void*, bool) noexcept = 0;
            virtual int32_t __stdcall GetKeepInteriorCornersSquare(void*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBase>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ClickMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ClickMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsPointerOver(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsPressed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Command(void**) noexcept = 0;
            virtual int32_t __stdcall put_Command(void*) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_CommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall add_Click(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Click(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBaseFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBaseStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ClickModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPointerOverProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPressedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameterProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICalendarPanel>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICalendarViewTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MinViewWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderText(void**) noexcept = 0;
            virtual int32_t __stdcall get_WeekDay1(void**) noexcept = 0;
            virtual int32_t __stdcall get_WeekDay2(void**) noexcept = 0;
            virtual int32_t __stdcall get_WeekDay3(void**) noexcept = 0;
            virtual int32_t __stdcall get_WeekDay4(void**) noexcept = 0;
            virtual int32_t __stdcall get_WeekDay5(void**) noexcept = 0;
            virtual int32_t __stdcall get_WeekDay6(void**) noexcept = 0;
            virtual int32_t __stdcall get_WeekDay7(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasMoreContentAfter(bool*) noexcept = 0;
            virtual int32_t __stdcall get_HasMoreContentBefore(bool*) noexcept = 0;
            virtual int32_t __stdcall get_HasMoreViews(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ClipRect(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall get_CenterX(double*) noexcept = 0;
            virtual int32_t __stdcall get_CenterY(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICarouselPanel>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CanVerticallyScroll(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanVerticallyScroll(bool) noexcept = 0;
            virtual int32_t __stdcall get_CanHorizontallyScroll(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanHorizontallyScroll(bool) noexcept = 0;
            virtual int32_t __stdcall get_ExtentWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExtentHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollOwner(void**) noexcept = 0;
            virtual int32_t __stdcall put_ScrollOwner(void*) noexcept = 0;
            virtual int32_t __stdcall LineUp() noexcept = 0;
            virtual int32_t __stdcall LineDown() noexcept = 0;
            virtual int32_t __stdcall LineLeft() noexcept = 0;
            virtual int32_t __stdcall LineRight() noexcept = 0;
            virtual int32_t __stdcall PageUp() noexcept = 0;
            virtual int32_t __stdcall PageDown() noexcept = 0;
            virtual int32_t __stdcall PageLeft() noexcept = 0;
            virtual int32_t __stdcall PageRight() noexcept = 0;
            virtual int32_t __stdcall MouseWheelUp() noexcept = 0;
            virtual int32_t __stdcall MouseWheelDown() noexcept = 0;
            virtual int32_t __stdcall MouseWheelLeft() noexcept = 0;
            virtual int32_t __stdcall MouseWheelRight() noexcept = 0;
            virtual int32_t __stdcall SetHorizontalOffset(double) noexcept = 0;
            virtual int32_t __stdcall SetVerticalOffset(double) noexcept = 0;
            virtual int32_t __stdcall MakeVisible(void*, winrt::Windows::Foundation::Rect, winrt::Windows::Foundation::Rect*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICarouselPanelFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ColorChannel(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ColorChannel(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ColorChannelProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Color(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_Color(struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall get_HsvColor(winrt::Windows::Foundation::Numerics::float4*) noexcept = 0;
            virtual int32_t __stdcall put_HsvColor(winrt::Windows::Foundation::Numerics::float4) noexcept = 0;
            virtual int32_t __stdcall get_MinHue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinHue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxHue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxHue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinSaturation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinSaturation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxSaturation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxSaturation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinValue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxValue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Shape(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Shape(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Components(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Components(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_ColorChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ColorChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HsvColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinHueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxHueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinSaturationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxSaturationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShapeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ComponentsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MaxColumns(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxColumns(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ColumnSpacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_ColumnSpacing(double) noexcept = 0;
            virtual int32_t __stdcall get_RowSpacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_RowSpacing(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MaxColumnsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ColumnSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RowSpacingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelper>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelperStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeepInteriorCornersSquareProperty(void**) noexcept = 0;
            virtual int32_t __stdcall SetKeepInteriorCornersSquare(void*, bool) noexcept = 0;
            virtual int32_t __stdcall GetKeepInteriorCornersSquare(void*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DropDownOpenedHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_DropDownClosedHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_DropDownOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItemDirection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_DropDownContentMinWidth(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FlyoutTemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SystemBackdrop(void**) noexcept = 0;
            virtual int32_t __stdcall put_SystemBackdrop(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarAutomationPropertiesStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ControlTypeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetControlType(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetControlType(void*, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SystemBackdropProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OpenAnimationStartPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_OpenAnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_CloseAnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_CurrentWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandedWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_WidthExpansionDelta(double*) noexcept = 0;
            virtual int32_t __stdcall get_WidthExpansionAnimationStartPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_WidthExpansionAnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_WidthExpansionMoreButtonAnimationStartPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_WidthExpansionMoreButtonAnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandUpOverflowVerticalPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandDownOverflowVerticalPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandUpAnimationStartPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandUpAnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandUpAnimationHoldPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandDownAnimationStartPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandDownAnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandDownAnimationHoldPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ContentClipRect(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall get_OverflowContentClipRect(winrt::Windows::Foundation::Rect*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_OverflowContentClipRect(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall get_OverflowContentMinWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_OverflowContentMaxWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_OverflowContentMaxHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_OverflowContentHorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_OverflowContentHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_NegativeOverflowContentHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_EffectiveOverflowButtonVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_OverflowContentCompactYTranslation(double*) noexcept = 0;
            virtual int32_t __stdcall get_OverflowContentMinimalYTranslation(double*) noexcept = 0;
            virtual int32_t __stdcall get_OverflowContentHiddenYTranslation(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Filter(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Filter(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Scale(double*) noexcept = 0;
            virtual int32_t __stdcall put_Scale(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverterStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FilterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ScaleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ConversionKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ConversionKind(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Multiplier(double*) noexcept = 0;
            virtual int32_t __stdcall put_Multiplier(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverterStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ConversionKindProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MultiplierProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalChange(double*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalChange(double*) noexcept = 0;
            virtual int32_t __stdcall get_Canceled(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventArgsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstanceWithHorizontalChangeVerticalChangeAndCanceled(double, double, bool, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalChange(double*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalChange(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstanceWithHorizontalChangeAndVerticalChange(double, double, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffset(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventArgsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstanceWithHorizontalOffsetAndVerticalOffset(double, double, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Placement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Placement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Target(void**) noexcept = 0;
            virtual int32_t __stdcall get_AllowFocusOnInteraction(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AllowFocusOnInteraction(bool) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LightDismissOverlayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_AllowFocusWhenDisabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AllowFocusWhenDisabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_ShowMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ShowMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_InputDevicePrefersPrimaryCommands(bool*) noexcept = 0;
            virtual int32_t __stdcall get_AreOpenCloseAnimationsEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreOpenCloseAnimationsEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_ShouldConstrainToRootBounds(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShouldConstrainToRootBounds(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsConstrainedToRootBounds(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ElementSoundMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ElementSoundMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_OverlayInputPassThroughElement(void**) noexcept = 0;
            virtual int32_t __stdcall put_OverlayInputPassThroughElement(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall get_XamlRoot(void**) noexcept = 0;
            virtual int32_t __stdcall put_XamlRoot(void*) noexcept = 0;
            virtual int32_t __stdcall add_Opened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Opened(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Opening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Opening(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closing(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closing(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall ShowAt(void*) noexcept = 0;
            virtual int32_t __stdcall ShowAtWithOptions(void*, void*) noexcept = 0;
            virtual int32_t __stdcall Hide() noexcept = 0;
            virtual int32_t __stdcall TryInvokeKeyboardAccelerator(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SystemBackdrop(void**) noexcept = 0;
            virtual int32_t __stdcall put_SystemBackdrop(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseClosingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreatePresenter(void**) noexcept = 0;
            virtual int32_t __stdcall OnProcessKeyboardAccelerators(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AllowFocusOnInteractionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AllowFocusWhenDisabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShowModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_InputDevicePrefersPrimaryCommandsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AreOpenCloseAnimationsEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShouldConstrainToRootBoundsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ElementSoundModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OverlayInputPassThroughElementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AttachedFlyoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetAttachedFlyout(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetAttachedFlyout(void*, void*) noexcept = 0;
            virtual int32_t __stdcall ShowAttachedFlyout(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SystemBackdropProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptions>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Position(void**) noexcept = 0;
            virtual int32_t __stdcall put_Position(void*) noexcept = 0;
            virtual int32_t __stdcall get_ExclusionRect(void**) noexcept = 0;
            virtual int32_t __stdcall put_ExclusionRect(void*) noexcept = 0;
            virtual int32_t __stdcall get_ShowMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ShowMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Placement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Placement(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptionsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGeneratorPositionHelper>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGeneratorPositionHelperStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall FromIndexAndOffset(int32_t, int32_t, struct struct_Microsoft_UI_Xaml_Controls_Primitives_GeneratorPosition*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemPresenter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionCheckMarkVisualEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionCheckMarkVisualEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_CheckHintBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckHintBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckSelectingBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckSelectingBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_DragBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_DragBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_DragForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_DragForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_FocusBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_FocusBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPointerOverBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedPointerOverBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPointerOverBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedPointerOverBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBorderThickness(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_SelectedBorderThickness(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_DisabledOpacity(double*) noexcept = 0;
            virtual int32_t __stdcall put_DisabledOpacity(double) noexcept = 0;
            virtual int32_t __stdcall get_DragOpacity(double*) noexcept = 0;
            virtual int32_t __stdcall put_DragOpacity(double) noexcept = 0;
            virtual int32_t __stdcall get_ReorderHintOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_ReorderHintOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_GridViewItemPresenterHorizontalContentAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_GridViewItemPresenterHorizontalContentAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_GridViewItemPresenterVerticalContentAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_GridViewItemPresenterVerticalContentAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_GridViewItemPresenterPadding(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_GridViewItemPresenterPadding(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverBackgroundMargin(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverBackgroundMargin(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_ContentMargin(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_ContentMargin(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemPresenterFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemPresenterStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionCheckMarkVisualEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckHintBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckSelectingBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DragBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DragForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FocusBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPointerOverBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPointerOverBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBorderThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisabledOpacityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DragOpacityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ReorderHintOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GridViewItemPresenterHorizontalContentAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GridViewItemPresenterVerticalContentAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GridViewItemPresenterPaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverBackgroundMarginProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentMarginProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DragItemsCount(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanel>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalOrientationPadding(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalOrientationPadding(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOrientationPadding(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalOrientationPadding(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalOrientationPaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOrientationPaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall SetHorizontalOrientationMargin(void*, struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall GetHorizontalOrientationMargin(void*, struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalOrientationMarginProperty(void**) noexcept = 0;
            virtual int32_t __stdcall SetVerticalOrientationMargin(void*, struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall GetVerticalOrientationMargin(void*, struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOrientationMarginProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IItemsChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Action(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(struct struct_Microsoft_UI_Xaml_Controls_Primitives_GeneratorPosition*) noexcept = 0;
            virtual int32_t __stdcall get_OldPosition(struct struct_Microsoft_UI_Xaml_Controls_Primitives_GeneratorPosition*) noexcept = 0;
            virtual int32_t __stdcall get_ItemCount(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ItemUICount(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Enabled(void**) noexcept = 0;
            virtual int32_t __stdcall put_Enabled(void*) noexcept = 0;
            virtual int32_t __stdcall get_Disabled(void**) noexcept = 0;
            virtual int32_t __stdcall put_Disabled(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverterStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_EnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Enabled(void**) noexcept = 0;
            virtual int32_t __stdcall put_Enabled(void*) noexcept = 0;
            virtual int32_t __stdcall get_Disabled(void**) noexcept = 0;
            virtual int32_t __stdcall put_Disabled(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverterStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_EnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILayoutInformation>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILayoutInformationStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetLayoutExceptionElement(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetLayoutSlot(void*, winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall GetAvailableSize(void*, winrt::Windows::Foundation::Size*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemPresenter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionCheckMarkVisualEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionCheckMarkVisualEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_CheckHintBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckHintBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckSelectingBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckSelectingBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_DragBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_DragBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_DragForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_DragForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_FocusBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_FocusBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPointerOverBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedPointerOverBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPointerOverBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedPointerOverBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBorderThickness(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_SelectedBorderThickness(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_DisabledOpacity(double*) noexcept = 0;
            virtual int32_t __stdcall put_DisabledOpacity(double) noexcept = 0;
            virtual int32_t __stdcall get_DragOpacity(double*) noexcept = 0;
            virtual int32_t __stdcall put_DragOpacity(double) noexcept = 0;
            virtual int32_t __stdcall get_ReorderHintOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_ReorderHintOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_ListViewItemPresenterHorizontalContentAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ListViewItemPresenterHorizontalContentAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ListViewItemPresenterVerticalContentAlignment(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ListViewItemPresenterVerticalContentAlignment(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ListViewItemPresenterPadding(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_ListViewItemPresenterPadding(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverBackgroundMargin(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverBackgroundMargin(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_ContentMargin(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_ContentMargin(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPressedBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedPressedBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_PressedBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_PressedBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckBoxBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_FocusSecondaryBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_FocusSecondaryBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CheckMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverForeground(void**) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverForeground(void*) noexcept = 0;
            virtual int32_t __stdcall get_RevealBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_RevealBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_RevealBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_RevealBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_RevealBorderThickness(struct struct_Microsoft_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_RevealBorderThickness(struct struct_Microsoft_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_RevealBackgroundShowsAboveContent(bool*) noexcept = 0;
            virtual int32_t __stdcall put_RevealBackgroundShowsAboveContent(bool) noexcept = 0;
            virtual int32_t __stdcall get_SelectedDisabledBackground(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedDisabledBackground(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckPressedBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckPressedBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckDisabledBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckDisabledBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxPointerOverBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckBoxPointerOverBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxPressedBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckBoxPressedBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxDisabledBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckBoxDisabledBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxSelectedBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckBoxSelectedBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxSelectedPointerOverBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckBoxSelectedPointerOverBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxSelectedPressedBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckBoxSelectedPressedBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxSelectedDisabledBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckBoxSelectedDisabledBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckBoxBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxPointerOverBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckBoxPointerOverBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxPressedBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckBoxPressedBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxDisabledBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_CheckBoxDisabledBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxCornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius*) noexcept = 0;
            virtual int32_t __stdcall put_CheckBoxCornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius) noexcept = 0;
            virtual int32_t __stdcall get_SelectionIndicatorCornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionIndicatorCornerRadius(struct struct_Microsoft_UI_Xaml_CornerRadius) noexcept = 0;
            virtual int32_t __stdcall get_SelectionIndicatorVisualEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionIndicatorVisualEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_SelectionIndicatorMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionIndicatorMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectionIndicatorBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionIndicatorBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionIndicatorPointerOverBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionIndicatorPointerOverBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionIndicatorPressedBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionIndicatorPressedBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionIndicatorDisabledBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionIndicatorDisabledBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPressedBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedPressedBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedDisabledBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedDisabledBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedInnerBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedInnerBorderBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverBorderBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverBorderBrush(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemPresenterFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemPresenterStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionCheckMarkVisualEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckHintBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckSelectingBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DragBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DragForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FocusBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPointerOverBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPointerOverBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBorderThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisabledOpacityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DragOpacityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ReorderHintOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ListViewItemPresenterHorizontalContentAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ListViewItemPresenterVerticalContentAlignmentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ListViewItemPresenterPaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverBackgroundMarginProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentMarginProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPressedBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PressedBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FocusSecondaryBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RevealBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RevealBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RevealBorderThicknessProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RevealBackgroundShowsAboveContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedDisabledBackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckPressedBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckDisabledBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxPointerOverBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxPressedBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxDisabledBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxSelectedBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxSelectedPointerOverBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxSelectedPressedBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxSelectedDisabledBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxPointerOverBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxPressedBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxDisabledBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CheckBoxCornerRadiusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionIndicatorCornerRadiusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionIndicatorVisualEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionIndicatorModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionIndicatorBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionIndicatorPointerOverBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionIndicatorPressedBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionIndicatorDisabledBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedPressedBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedDisabledBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedInnerBorderBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverBorderBrushProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DragItemsCount(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ShouldLoop(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShouldLoop(bool) noexcept = 0;
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
            virtual int32_t __stdcall put_Items(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectedIndex(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedItem(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemWidth(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ItemWidth(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ItemHeight(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ItemHeight(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorPanel>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ShouldLoopProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItemProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMenuFlyoutItemTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeyboardAcceleratorTextMinWidth(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMenuFlyoutPresenterTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FlyoutContentMinWidth(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SourceElement(void**) noexcept = 0;
            virtual int32_t __stdcall put_SourceElement(void*) noexcept = 0;
            virtual int32_t __stdcall get_ReplacementColor(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_ReplacementColor(struct struct_Windows_UI_Color) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SourceElementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ReplacementColorProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Icon(void**) noexcept = 0;
            virtual int32_t __stdcall put_Icon(void*) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_InfoBadge(void**) noexcept = 0;
            virtual int32_t __stdcall put_InfoBadge(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettingsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_InfoBadgeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_SmallerIconWidth(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SmallerIconWidthProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanel>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CanVerticallyScroll(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanVerticallyScroll(bool) noexcept = 0;
            virtual int32_t __stdcall get_CanHorizontallyScroll(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanHorizontallyScroll(bool) noexcept = 0;
            virtual int32_t __stdcall get_ExtentWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExtentHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollOwner(void**) noexcept = 0;
            virtual int32_t __stdcall put_ScrollOwner(void*) noexcept = 0;
            virtual int32_t __stdcall LineUp() noexcept = 0;
            virtual int32_t __stdcall LineDown() noexcept = 0;
            virtual int32_t __stdcall LineLeft() noexcept = 0;
            virtual int32_t __stdcall LineRight() noexcept = 0;
            virtual int32_t __stdcall PageUp() noexcept = 0;
            virtual int32_t __stdcall PageDown() noexcept = 0;
            virtual int32_t __stdcall PageLeft() noexcept = 0;
            virtual int32_t __stdcall PageRight() noexcept = 0;
            virtual int32_t __stdcall MouseWheelUp() noexcept = 0;
            virtual int32_t __stdcall MouseWheelDown() noexcept = 0;
            virtual int32_t __stdcall MouseWheelLeft() noexcept = 0;
            virtual int32_t __stdcall MouseWheelRight() noexcept = 0;
            virtual int32_t __stdcall SetHorizontalOffset(double) noexcept = 0;
            virtual int32_t __stdcall SetVerticalOffset(double) noexcept = 0;
            virtual int32_t __stdcall MakeVisible(void*, winrt::Windows::Foundation::Rect, winrt::Windows::Foundation::Rect*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanelFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBase>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall OnConfirmed() noexcept = 0;
            virtual int32_t __stdcall ShouldShowConfirmationButtons(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TitleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetTitle(void*, void**) noexcept = 0;
            virtual int32_t __stdcall SetTitle(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderPanel>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotPanel>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Child(void**) noexcept = 0;
            virtual int32_t __stdcall put_Child(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_ChildTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_ChildTransitions(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsLightDismissEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsLightDismissEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LightDismissOverlayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ShouldConstrainToRootBounds(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShouldConstrainToRootBounds(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsConstrainedToRootBounds(bool*) noexcept = 0;
            virtual int32_t __stdcall add_Opened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Opened(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closed(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PlacementTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlacementTarget(void*) noexcept = 0;
            virtual int32_t __stdcall get_DesiredPlacement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_DesiredPlacement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ActualPlacement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall add_ActualPlacementChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ActualPlacementChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SystemBackdrop(void**) noexcept = 0;
            virtual int32_t __stdcall put_SystemBackdrop(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ChildProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ChildTransitionsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsLightDismissEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LightDismissOverlayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShouldConstrainToRootBoundsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PlacementTargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DesiredPlacementProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SystemBackdropProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBase>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Minimum(double*) noexcept = 0;
            virtual int32_t __stdcall put_Minimum(double) noexcept = 0;
            virtual int32_t __stdcall get_Maximum(double*) noexcept = 0;
            virtual int32_t __stdcall put_Maximum(double) noexcept = 0;
            virtual int32_t __stdcall get_SmallChange(double*) noexcept = 0;
            virtual int32_t __stdcall put_SmallChange(double) noexcept = 0;
            virtual int32_t __stdcall get_LargeChange(double*) noexcept = 0;
            virtual int32_t __stdcall put_LargeChange(double) noexcept = 0;
            virtual int32_t __stdcall get_Value(double*) noexcept = 0;
            virtual int32_t __stdcall put_Value(double) noexcept = 0;
            virtual int32_t __stdcall add_ValueChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ValueChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall OnMinimumChanged(double, double) noexcept = 0;
            virtual int32_t __stdcall OnMaximumChanged(double, double) noexcept = 0;
            virtual int32_t __stdcall OnValueChanged(double, double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MinimumProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaximumProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SmallChangeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LargeChangeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ValueProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldValue(double*) noexcept = 0;
            virtual int32_t __stdcall get_NewValue(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Delay(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Delay(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Interval(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Interval(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatButtonStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DelayProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IntervalProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Offset(double*) noexcept = 0;
            virtual int32_t __stdcall get_Interval(double*) noexcept = 0;
            virtual int32_t __stdcall get_Start(double*) noexcept = 0;
            virtual int32_t __stdcall get_End(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPointFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(double, double, double, double, int32_t, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Offset(double*) noexcept = 0;
            virtual int32_t __stdcall get_Interval(double*) noexcept = 0;
            virtual int32_t __stdcall get_Start(double*) noexcept = 0;
            virtual int32_t __stdcall get_End(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPointFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(double, double, double, double, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollBar>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ViewportSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_ViewportSize(double) noexcept = 0;
            virtual int32_t __stdcall get_IndicatorMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_IndicatorMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_Scroll(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Scroll(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollBarStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ViewportSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IndicatorModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PanningInfo(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanScroll(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsScrollingWithMouse(bool*) noexcept = 0;
            virtual int32_t __stdcall SetIsScrollable(bool) noexcept = 0;
            virtual int32_t __stdcall SetValues(double, double, double, double) noexcept = 0;
            virtual int32_t __stdcall GetScrollAnimation(int32_t, winrt::Windows::Foundation::Numerics::float2, winrt::Windows::Foundation::Numerics::float2, void*, void**) noexcept = 0;
            virtual int32_t __stdcall NotifyRequestedScrollCompleted(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_CanScrollChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CanScrollChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_IsScrollingWithMouseChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_IsScrollingWithMouseChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ScrollToRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ScrollToRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ScrollByRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ScrollByRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_AddScrollVelocityRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_AddScrollVelocityRequested(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OffsetVelocity(float*) noexcept = 0;
            virtual int32_t __stdcall get_InertiaDecayRate(void**) noexcept = 0;
            virtual int32_t __stdcall get_CorrelationId(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CorrelationId(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(float, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PointerPoint(void**) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanRequestedEventArgsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanningInfo>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsRailEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall get_PanOrientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_PanningElementAncestor(void**) noexcept = 0;
            virtual int32_t __stdcall SetPanningElementExpressionAnimationSources(void*, void*, void*, void*, void*) noexcept = 0;
            virtual int32_t __stdcall add_Changed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Changed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PanRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PanRequested(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OffsetDelta(double*) noexcept = 0;
            virtual int32_t __stdcall get_Options(void**) noexcept = 0;
            virtual int32_t __stdcall get_CorrelationId(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CorrelationId(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(double, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Offset(double*) noexcept = 0;
            virtual int32_t __stdcall get_Options(void**) noexcept = 0;
            virtual int32_t __stdcall get_CorrelationId(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CorrelationId(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(double, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_NewValue(double*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollEventType(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Background(void**) noexcept = 0;
            virtual int32_t __stdcall put_Background(void*) noexcept = 0;
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_ExpressionAnimationSources(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_ZoomFactor(float*) noexcept = 0;
            virtual int32_t __stdcall get_ExtentWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExtentHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollableWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollableHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_ContentOrientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ContentOrientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollChainMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalScrollChainMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollChainMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalScrollChainMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollRailMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalScrollRailMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollRailMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalScrollRailMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalScrollMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalScrollMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ComputedHorizontalScrollMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ComputedVerticalScrollMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ZoomChainMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ZoomChainMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ZoomMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ZoomMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IgnoredInputKinds(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_IgnoredInputKinds(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinZoomFactor(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinZoomFactor(double) noexcept = 0;
            virtual int32_t __stdcall get_MaxZoomFactor(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxZoomFactor(double) noexcept = 0;
            virtual int32_t __stdcall get_State(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollController(void**) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalScrollController(void*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollController(void**) noexcept = 0;
            virtual int32_t __stdcall put_VerticalScrollController(void*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalAnchorRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalAnchorRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_VerticalAnchorRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalAnchorRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSnapPoints(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSnapPoints(void**) noexcept = 0;
            virtual int32_t __stdcall get_ZoomSnapPoints(void**) noexcept = 0;
            virtual int32_t __stdcall ScrollTo(double, double, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ScrollToWithOptions(double, double, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ScrollBy(double, double, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ScrollByWithOptions(double, double, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall AddScrollVelocity(winrt::Windows::Foundation::Numerics::float2, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ZoomTo(float, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ZoomToWithOptions(float, void*, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ZoomBy(float, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ZoomByWithOptions(float, void*, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall AddZoomVelocity(float, void*, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall add_ExtentChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ExtentChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_StateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_StateChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ViewChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ViewChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ScrollAnimationStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ScrollAnimationStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ZoomAnimationStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ZoomAnimationStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ScrollCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ScrollCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ZoomCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ZoomCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_BringingIntoView(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_BringingIntoView(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_AnchorRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_AnchorRequested(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentOrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollChainModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollChainModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollRailModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollRailModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ComputedHorizontalScrollModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ComputedVerticalScrollModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ZoomChainModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ZoomModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IgnoredInputKindsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinZoomFactorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxZoomFactorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalAnchorRatioProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalAnchorRatioProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Value(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Alignment(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBaseFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(double, int32_t, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AreHorizontalSnapPointsRegular(bool*) noexcept = 0;
            virtual int32_t __stdcall get_AreVerticalSnapPointsRegular(bool*) noexcept = 0;
            virtual int32_t __stdcall add_HorizontalSnapPointsChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_HorizontalSnapPointsChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_VerticalSnapPointsChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_VerticalSnapPointsChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall GetIrregularSnapPoints(int32_t, int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetRegularSnapPoints(int32_t, int32_t, float*, float*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelector>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectedIndex(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedItem(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedValue(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedValue(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedValuePath(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedValuePath(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsSynchronizedWithCurrentItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_IsSynchronizedWithCurrentItem(void*) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsSelected(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSelected(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsSelectedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItemProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedValuePathProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSynchronizedWithCurrentItemProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetIsSelectionActive(void*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBaseFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISplitViewTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OpenPaneLength(double*) noexcept = 0;
            virtual int32_t __stdcall get_NegativeOpenPaneLength(double*) noexcept = 0;
            virtual int32_t __stdcall get_OpenPaneLengthMinusCompactLength(double*) noexcept = 0;
            virtual int32_t __stdcall get_NegativeOpenPaneLengthMinusCompactLength(double*) noexcept = 0;
            virtual int32_t __stdcall get_OpenPaneGridLength(struct struct_Microsoft_UI_Xaml_GridLength*) noexcept = 0;
            virtual int32_t __stdcall get_CompactPaneGridLength(struct struct_Microsoft_UI_Xaml_GridLength*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IThumb>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDragging(bool*) noexcept = 0;
            virtual int32_t __stdcall add_DragStarted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DragStarted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DragDelta(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DragDelta(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DragCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DragCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall CancelDrag() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IThumbStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsDraggingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITickBar>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Fill(void**) noexcept = 0;
            virtual int32_t __stdcall put_Fill(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITickBarStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FillProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsChecked(void**) noexcept = 0;
            virtual int32_t __stdcall put_IsChecked(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsThreeState(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsThreeState(bool) noexcept = 0;
            virtual int32_t __stdcall add_Checked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Checked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Unchecked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Unchecked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Indeterminate(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Indeterminate(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall OnToggle() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsCheckedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsThreeStateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleSwitchTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_KnobCurrentToOnOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_KnobCurrentToOffOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_KnobOnToOffOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_KnobOffToOnOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_CurtainCurrentToOnOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_CurtainCurrentToOffOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_CurtainOnToOffOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_CurtainOffToOnOffset(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToolTipTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FromHorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_FromVerticalOffset(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Value(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBaseFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(double, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragDeltaEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::DragStartedEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::RangeBaseValueChangedEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollEventHandler>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*, void*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IAppBarButtonTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) KeyboardAcceleratorTextMinWidth() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarButtonTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IAppBarButtonTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IAppBarTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) ClipRect() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) CompactVerticalDelta() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Thickness) CompactRootMargin() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) MinimalVerticalDelta() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Thickness) MinimalRootMargin() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) HiddenVerticalDelta() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Thickness) HiddenRootMargin() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) NegativeCompactVerticalDelta() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) NegativeMinimalVerticalDelta() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) NegativeHiddenVerticalDelta() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IAppBarTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IAppBarToggleButtonTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) KeyboardAcceleratorTextMinWidth() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAppBarToggleButtonTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IAppBarToggleButtonTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IAutoSuggestBoxHelper
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelper>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IAutoSuggestBoxHelper<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IAutoSuggestBoxHelperStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) KeepInteriorCornersSquareProperty() const;
        WINRT_IMPL_AUTO(void) SetKeepInteriorCornersSquare(winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBox const& autoSuggestBox, bool value) const;
        WINRT_IMPL_AUTO(bool) GetKeepInteriorCornersSquare(winrt::Microsoft::UI::Xaml::Controls::AutoSuggestBox const& autoSuggestBox) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelperStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IAutoSuggestBoxHelperStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IButtonBase
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ClickMode) ClickMode() const;
        WINRT_IMPL_AUTO(void) ClickMode(winrt::Microsoft::UI::Xaml::Controls::ClickMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsPointerOver() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsPressed() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Input::ICommand) Command() const;
        WINRT_IMPL_AUTO(void) Command(winrt::Microsoft::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) CommandParameter() const;
        WINRT_IMPL_AUTO(void) CommandParameter(winrt::Windows::Foundation::IInspectable const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) Click(winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        using Click_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBase, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBase>::remove_Click>;
        [[nodiscard]] Click_revoker Click(auto_revoke_t, winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        WINRT_IMPL_AUTO(void) Click(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IButtonBase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ButtonBase) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBaseFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ClickModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) IsPointerOverProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) IsPressedProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CommandProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CommandParameterProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IButtonBaseStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IButtonBaseStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICalendarPanel
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICalendarPanel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICalendarPanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) MinViewWidth() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) HeaderText() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) WeekDay1() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) WeekDay2() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) WeekDay3() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) WeekDay4() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) WeekDay5() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) WeekDay6() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) WeekDay7() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) HasMoreContentAfter() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) HasMoreContentBefore() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) HasMoreViews() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) ClipRect() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) CenterX() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) CenterY() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICalendarViewTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICalendarViewTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) CanVerticallyScroll() const;
        WINRT_IMPL_AUTO(void) CanVerticallyScroll(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) CanHorizontallyScroll() const;
        WINRT_IMPL_AUTO(void) CanHorizontallyScroll(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ExtentWidth() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ExtentHeight() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ViewportWidth() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ViewportHeight() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) HorizontalOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) VerticalOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) ScrollOwner() const;
        WINRT_IMPL_AUTO(void) ScrollOwner(winrt::Windows::Foundation::IInspectable const& value) const;
        WINRT_IMPL_AUTO(void) LineUp() const;
        WINRT_IMPL_AUTO(void) LineDown() const;
        WINRT_IMPL_AUTO(void) LineLeft() const;
        WINRT_IMPL_AUTO(void) LineRight() const;
        WINRT_IMPL_AUTO(void) PageUp() const;
        WINRT_IMPL_AUTO(void) PageDown() const;
        WINRT_IMPL_AUTO(void) PageLeft() const;
        WINRT_IMPL_AUTO(void) PageRight() const;
        WINRT_IMPL_AUTO(void) MouseWheelUp() const;
        WINRT_IMPL_AUTO(void) MouseWheelDown() const;
        WINRT_IMPL_AUTO(void) MouseWheelLeft() const;
        WINRT_IMPL_AUTO(void) MouseWheelRight() const;
        WINRT_IMPL_AUTO(void) SetHorizontalOffset(double offset) const;
        WINRT_IMPL_AUTO(void) SetVerticalOffset(double offset) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) MakeVisible(winrt::Microsoft::UI::Xaml::UIElement const& visual, winrt::Windows::Foundation::Rect const& rectangle) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICarouselPanel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanelFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::CarouselPanel) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICarouselPanelFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICarouselPanelFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSlider
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel) ColorChannel() const;
        WINRT_IMPL_AUTO(void) ColorChannel(winrt::Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSlider<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ColorChannelProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Color) Color() const;
        WINRT_IMPL_AUTO(void) Color(winrt::Windows::UI::Color const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float4) HsvColor() const;
        WINRT_IMPL_AUTO(void) HsvColor(winrt::Windows::Foundation::Numerics::float4 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MinHue() const;
        WINRT_IMPL_AUTO(void) MinHue(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MaxHue() const;
        WINRT_IMPL_AUTO(void) MaxHue(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MinSaturation() const;
        WINRT_IMPL_AUTO(void) MinSaturation(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MaxSaturation() const;
        WINRT_IMPL_AUTO(void) MaxSaturation(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MinValue() const;
        WINRT_IMPL_AUTO(void) MinValue(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MaxValue() const;
        WINRT_IMPL_AUTO(void) MaxValue(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ColorSpectrumShape) Shape() const;
        WINRT_IMPL_AUTO(void) Shape(winrt::Microsoft::UI::Xaml::Controls::ColorSpectrumShape const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ColorSpectrumComponents) Components() const;
        WINRT_IMPL_AUTO(void) Components(winrt::Microsoft::UI::Xaml::Controls::ColorSpectrumComponents const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) ColorChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum, winrt::Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const;
        using ColorChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum>::remove_ColorChanged>;
        [[nodiscard]] ColorChanged_revoker ColorChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum, winrt::Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ColorChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ColorProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) HsvColorProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) MinHueProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) MaxHueProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) MinSaturationProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) MaxSaturationProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) MinValueProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) MaxValueProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ShapeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ComponentsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayout
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MaxColumns() const;
        WINRT_IMPL_AUTO(void) MaxColumns(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ColumnSpacing() const;
        WINRT_IMPL_AUTO(void) ColumnSpacing(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) RowSpacing() const;
        WINRT_IMPL_AUTO(void) RowSpacing(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ColumnMajorUniformToLargestGridLayout) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) MaxColumnsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ColumnSpacingProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) RowSpacingProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IComboBoxHelper
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelper>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IComboBoxHelper<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IComboBoxHelperStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) KeepInteriorCornersSquareProperty() const;
        WINRT_IMPL_AUTO(void) SetKeepInteriorCornersSquare(winrt::Microsoft::UI::Xaml::Controls::ComboBox const& comboBox, bool value) const;
        WINRT_IMPL_AUTO(bool) GetKeepInteriorCornersSquare(winrt::Microsoft::UI::Xaml::Controls::ComboBox const& comboBox) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelperStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IComboBoxHelperStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IComboBoxTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) DropDownOpenedHeight() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) DropDownClosedHeight() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) DropDownOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::AnimationDirection) SelectedItemDirection() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) DropDownContentMinWidth() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IComboBoxTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarTemplateSettings) FlyoutTemplateSettings() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar2
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::SystemBackdrop) SystemBackdrop() const;
        WINRT_IMPL_AUTO(void) SystemBackdrop(winrt::Microsoft::UI::Xaml::Media::SystemBackdrop const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarAutomationPropertiesStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ControlTypeProperty() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType) GetControlType(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
        WINRT_IMPL_AUTO(void) SetControlType(winrt::Microsoft::UI::Xaml::UIElement const& element, winrt::Microsoft::UI::Xaml::Automation::Peers::AutomationControlType const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarAutomationPropertiesStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarAutomationPropertiesStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SystemBackdropProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) OpenAnimationStartPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) OpenAnimationEndPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) CloseAnimationEndPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) CurrentWidth() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ExpandedWidth() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) WidthExpansionDelta() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) WidthExpansionAnimationStartPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) WidthExpansionAnimationEndPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) WidthExpansionMoreButtonAnimationStartPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) WidthExpansionMoreButtonAnimationEndPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ExpandUpOverflowVerticalPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ExpandDownOverflowVerticalPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ExpandUpAnimationStartPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ExpandUpAnimationEndPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ExpandUpAnimationHoldPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ExpandDownAnimationStartPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ExpandDownAnimationEndPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ExpandDownAnimationHoldPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) ContentClipRect() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) OverflowContentClipRect() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) ContentHeight() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) OverflowContentClipRect() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) OverflowContentMinWidth() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) OverflowContentMaxWidth() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) OverflowContentMaxHeight() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) OverflowContentHorizontalOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) OverflowContentHeight() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) NegativeOverflowContentHeight() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Visibility) EffectiveOverflowButtonVisibility() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) OverflowContentCompactYTranslation() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) OverflowContentMinimalYTranslation() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) OverflowContentHiddenYTranslation() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverter
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusFilterKind) Filter() const;
        WINRT_IMPL_AUTO(void) Filter(winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusFilterKind const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) Scale() const;
        WINRT_IMPL_AUTO(void) Scale(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverterStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) FilterProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ScaleProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverter
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusToThicknessConverterKind) ConversionKind() const;
        WINRT_IMPL_AUTO(void) ConversionKind(winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusToThicknessConverterKind const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) Multiplier() const;
        WINRT_IMPL_AUTO(void) Multiplier(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverterStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ConversionKindProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) MultiplierProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) HorizontalChange() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) VerticalChange() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Canceled() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgsFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventArgs) CreateInstanceWithHorizontalChangeVerticalChangeAndCanceled(double horizontalChange, double verticalChange, bool canceled, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragCompletedEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IDragCompletedEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) HorizontalChange() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) VerticalChange() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgsFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::DragDeltaEventArgs) CreateInstanceWithHorizontalChangeAndVerticalChange(double horizontalChange, double verticalChange, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragDeltaEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IDragDeltaEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) HorizontalOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) VerticalOffset() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgsFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::DragStartedEventArgs) CreateInstanceWithHorizontalOffsetAndVerticalOffset(double horizontalOffset, double verticalOffset, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IDragStartedEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IDragStartedEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode) Placement() const;
        WINRT_IMPL_AUTO(void) Placement(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::FrameworkElement) Target() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AllowFocusOnInteraction() const;
        WINRT_IMPL_AUTO(void) AllowFocusOnInteraction(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode) LightDismissOverlayMode() const;
        WINRT_IMPL_AUTO(void) LightDismissOverlayMode(winrt::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AllowFocusWhenDisabled() const;
        WINRT_IMPL_AUTO(void) AllowFocusWhenDisabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowMode) ShowMode() const;
        WINRT_IMPL_AUTO(void) ShowMode(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) InputDevicePrefersPrimaryCommands() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AreOpenCloseAnimationsEnabled() const;
        WINRT_IMPL_AUTO(void) AreOpenCloseAnimationsEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ShouldConstrainToRootBounds() const;
        WINRT_IMPL_AUTO(void) ShouldConstrainToRootBounds(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsConstrainedToRootBounds() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::ElementSoundMode) ElementSoundMode() const;
        WINRT_IMPL_AUTO(void) ElementSoundMode(winrt::Microsoft::UI::Xaml::ElementSoundMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyObject) OverlayInputPassThroughElement() const;
        WINRT_IMPL_AUTO(void) OverlayInputPassThroughElement(winrt::Microsoft::UI::Xaml::DependencyObject const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsOpen() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::XamlRoot) XamlRoot() const;
        WINRT_IMPL_AUTO(void) XamlRoot(winrt::Microsoft::UI::Xaml::XamlRoot const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) Opened(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Opened_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase>::remove_Opened>;
        [[nodiscard]] Opened_revoker Opened(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) Opened(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Closed(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Closed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase>::remove_Closed>;
        [[nodiscard]] Closed_revoker Closed(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) Closed(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Opening(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Opening_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase>::remove_Opening>;
        [[nodiscard]] Opening_revoker Opening(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) Opening(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Closing(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBaseClosingEventArgs> const& handler) const;
        using Closing_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase>::remove_Closing>;
        [[nodiscard]] Closing_revoker Closing(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase, winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBaseClosingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Closing(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(void) ShowAt(winrt::Microsoft::UI::Xaml::FrameworkElement const& placementTarget) const;
        WINRT_IMPL_AUTO(void) ShowAt(winrt::Microsoft::UI::Xaml::DependencyObject const& placementTarget, winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions const& showOptions) const;
        WINRT_IMPL_AUTO(void) Hide() const;
        WINRT_IMPL_AUTO(void) TryInvokeKeyboardAccelerator(winrt::Microsoft::UI::Xaml::Input::ProcessKeyboardAcceleratorEventArgs const& args) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase2
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::SystemBackdrop) SystemBackdrop() const;
        WINRT_IMPL_AUTO(void) SystemBackdrop(winrt::Microsoft::UI::Xaml::Media::SystemBackdrop const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBase2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBase2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseClosingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Cancel() const;
        WINRT_IMPL_AUTO(void) Cancel(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseClosingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseClosingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseOverrides
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Control) CreatePresenter() const;
        WINRT_IMPL_AUTO(void) OnProcessKeyboardAccelerators(winrt::Microsoft::UI::Xaml::Input::ProcessKeyboardAcceleratorEventArgs const& args) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) TargetProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) PlacementProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) AllowFocusOnInteractionProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) LightDismissOverlayModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) AllowFocusWhenDisabledProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ShowModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) InputDevicePrefersPrimaryCommandsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) AreOpenCloseAnimationsEnabledProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ShouldConstrainToRootBoundsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ElementSoundModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) OverlayInputPassThroughElementProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) IsOpenProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) AttachedFlyoutProperty() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase) GetAttachedFlyout(winrt::Microsoft::UI::Xaml::FrameworkElement const& element) const;
        WINRT_IMPL_AUTO(void) SetAttachedFlyout(winrt::Microsoft::UI::Xaml::FrameworkElement const& element, winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
        WINRT_IMPL_AUTO(void) ShowAttachedFlyout(winrt::Microsoft::UI::Xaml::FrameworkElement const& flyoutOwner) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics2
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SystemBackdropProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutBaseStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptions
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Point>) Position() const;
        WINRT_IMPL_AUTO(void) Position(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Point> const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Rect>) ExclusionRect() const;
        WINRT_IMPL_AUTO(void) ExclusionRect(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Rect> const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowMode) ShowMode() const;
        WINRT_IMPL_AUTO(void) ShowMode(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode) Placement() const;
        WINRT_IMPL_AUTO(void) Placement(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutPlacementMode const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptions>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptions<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptionsFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::FlyoutShowOptions) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IFlyoutShowOptionsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IFlyoutShowOptionsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IGeneratorPositionHelper
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGeneratorPositionHelper>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IGeneratorPositionHelper<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IGeneratorPositionHelperStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition) FromIndexAndOffset(int32_t index, int32_t offset) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGeneratorPositionHelperStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IGeneratorPositionHelperStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) SelectionCheckMarkVisualEnabled() const;
        WINRT_IMPL_AUTO(void) SelectionCheckMarkVisualEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckHintBrush() const;
        WINRT_IMPL_AUTO(void) CheckHintBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckSelectingBrush() const;
        WINRT_IMPL_AUTO(void) CheckSelectingBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckBrush() const;
        WINRT_IMPL_AUTO(void) CheckBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) DragBackground() const;
        WINRT_IMPL_AUTO(void) DragBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) DragForeground() const;
        WINRT_IMPL_AUTO(void) DragForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) FocusBorderBrush() const;
        WINRT_IMPL_AUTO(void) FocusBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) PlaceholderBackground() const;
        WINRT_IMPL_AUTO(void) PlaceholderBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) PointerOverBackground() const;
        WINRT_IMPL_AUTO(void) PointerOverBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectedBackground() const;
        WINRT_IMPL_AUTO(void) SelectedBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectedForeground() const;
        WINRT_IMPL_AUTO(void) SelectedForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectedPointerOverBackground() const;
        WINRT_IMPL_AUTO(void) SelectedPointerOverBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectedPointerOverBorderBrush() const;
        WINRT_IMPL_AUTO(void) SelectedPointerOverBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Thickness) SelectedBorderThickness() const;
        WINRT_IMPL_AUTO(void) SelectedBorderThickness(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) DisabledOpacity() const;
        WINRT_IMPL_AUTO(void) DisabledOpacity(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) DragOpacity() const;
        WINRT_IMPL_AUTO(void) DragOpacity(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ReorderHintOffset() const;
        WINRT_IMPL_AUTO(void) ReorderHintOffset(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::HorizontalAlignment) GridViewItemPresenterHorizontalContentAlignment() const;
        WINRT_IMPL_AUTO(void) GridViewItemPresenterHorizontalContentAlignment(winrt::Microsoft::UI::Xaml::HorizontalAlignment const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::VerticalAlignment) GridViewItemPresenterVerticalContentAlignment() const;
        WINRT_IMPL_AUTO(void) GridViewItemPresenterVerticalContentAlignment(winrt::Microsoft::UI::Xaml::VerticalAlignment const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Thickness) GridViewItemPresenterPadding() const;
        WINRT_IMPL_AUTO(void) GridViewItemPresenterPadding(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Thickness) PointerOverBackgroundMargin() const;
        WINRT_IMPL_AUTO(void) PointerOverBackgroundMargin(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Thickness) ContentMargin() const;
        WINRT_IMPL_AUTO(void) ContentMargin(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::GridViewItemPresenter) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemPresenterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectionCheckMarkVisualEnabledProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckHintBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckSelectingBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) DragBackgroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) DragForegroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) FocusBorderBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) PlaceholderBackgroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) PointerOverBackgroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedBackgroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedForegroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedPointerOverBackgroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedPointerOverBorderBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedBorderThicknessProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) DisabledOpacityProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) DragOpacityProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ReorderHintOffsetProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) GridViewItemPresenterHorizontalContentAlignmentProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) GridViewItemPresenterVerticalContentAlignmentProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) GridViewItemPresenterPaddingProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) PointerOverBackgroundMarginProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ContentMarginProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemPresenterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) DragItemsCount() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IGridViewItemTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IGridViewItemTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanel
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Thickness) HorizontalOrientationPadding() const;
        WINRT_IMPL_AUTO(void) HorizontalOrientationPadding(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Thickness) VerticalOrientationPadding() const;
        WINRT_IMPL_AUTO(void) VerticalOrientationPadding(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::InfoBarPanel) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) HorizontalOrientationPaddingProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) VerticalOrientationPaddingProperty() const;
        WINRT_IMPL_AUTO(void) SetHorizontalOrientationMargin(winrt::Microsoft::UI::Xaml::DependencyObject const& object, winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Thickness) GetHorizontalOrientationMargin(winrt::Microsoft::UI::Xaml::DependencyObject const& object) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) HorizontalOrientationMarginProperty() const;
        WINRT_IMPL_AUTO(void) SetVerticalOrientationMargin(winrt::Microsoft::UI::Xaml::DependencyObject const& object, winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Thickness) GetVerticalOrientationMargin(winrt::Microsoft::UI::Xaml::DependencyObject const& object) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) VerticalOrientationMarginProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IItemsChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) Action() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition) Position() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition) OldPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) ItemCount() const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) ItemUICount() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IItemsChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IItemsChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemBackgroundConverter
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) Enabled() const;
        WINRT_IMPL_AUTO(void) Enabled(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) Disabled() const;
        WINRT_IMPL_AUTO(void) Disabled(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemBackgroundConverter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemBackgroundConverterStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) EnabledProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) DisabledProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemBackgroundConverterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemBackgroundConverterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemForegroundConverter
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) Enabled() const;
        WINRT_IMPL_AUTO(void) Enabled(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) Disabled() const;
        WINRT_IMPL_AUTO(void) Disabled(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemForegroundConverter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemForegroundConverterStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) EnabledProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) DisabledProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IJumpListItemForegroundConverterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IJumpListItemForegroundConverterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ILayoutInformation
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILayoutInformation>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ILayoutInformation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ILayoutInformationStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::UIElement) GetLayoutExceptionElement(winrt::Windows::Foundation::IInspectable const& dispatcher) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) GetLayoutSlot(winrt::Microsoft::UI::Xaml::FrameworkElement const& element) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Size) GetAvailableSize(winrt::Microsoft::UI::Xaml::UIElement const& element) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILayoutInformationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ILayoutInformationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) SelectionCheckMarkVisualEnabled() const;
        WINRT_IMPL_AUTO(void) SelectionCheckMarkVisualEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckHintBrush() const;
        WINRT_IMPL_AUTO(void) CheckHintBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckSelectingBrush() const;
        WINRT_IMPL_AUTO(void) CheckSelectingBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckBrush() const;
        WINRT_IMPL_AUTO(void) CheckBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) DragBackground() const;
        WINRT_IMPL_AUTO(void) DragBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) DragForeground() const;
        WINRT_IMPL_AUTO(void) DragForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) FocusBorderBrush() const;
        WINRT_IMPL_AUTO(void) FocusBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) PlaceholderBackground() const;
        WINRT_IMPL_AUTO(void) PlaceholderBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) PointerOverBackground() const;
        WINRT_IMPL_AUTO(void) PointerOverBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectedBackground() const;
        WINRT_IMPL_AUTO(void) SelectedBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectedForeground() const;
        WINRT_IMPL_AUTO(void) SelectedForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectedPointerOverBackground() const;
        WINRT_IMPL_AUTO(void) SelectedPointerOverBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectedPointerOverBorderBrush() const;
        WINRT_IMPL_AUTO(void) SelectedPointerOverBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Thickness) SelectedBorderThickness() const;
        WINRT_IMPL_AUTO(void) SelectedBorderThickness(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) DisabledOpacity() const;
        WINRT_IMPL_AUTO(void) DisabledOpacity(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) DragOpacity() const;
        WINRT_IMPL_AUTO(void) DragOpacity(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ReorderHintOffset() const;
        WINRT_IMPL_AUTO(void) ReorderHintOffset(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::HorizontalAlignment) ListViewItemPresenterHorizontalContentAlignment() const;
        WINRT_IMPL_AUTO(void) ListViewItemPresenterHorizontalContentAlignment(winrt::Microsoft::UI::Xaml::HorizontalAlignment const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::VerticalAlignment) ListViewItemPresenterVerticalContentAlignment() const;
        WINRT_IMPL_AUTO(void) ListViewItemPresenterVerticalContentAlignment(winrt::Microsoft::UI::Xaml::VerticalAlignment const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Thickness) ListViewItemPresenterPadding() const;
        WINRT_IMPL_AUTO(void) ListViewItemPresenterPadding(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Thickness) PointerOverBackgroundMargin() const;
        WINRT_IMPL_AUTO(void) PointerOverBackgroundMargin(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Thickness) ContentMargin() const;
        WINRT_IMPL_AUTO(void) ContentMargin(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectedPressedBackground() const;
        WINRT_IMPL_AUTO(void) SelectedPressedBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) PressedBackground() const;
        WINRT_IMPL_AUTO(void) PressedBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckBoxBrush() const;
        WINRT_IMPL_AUTO(void) CheckBoxBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) FocusSecondaryBorderBrush() const;
        WINRT_IMPL_AUTO(void) FocusSecondaryBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ListViewItemPresenterCheckMode) CheckMode() const;
        WINRT_IMPL_AUTO(void) CheckMode(winrt::Microsoft::UI::Xaml::Controls::Primitives::ListViewItemPresenterCheckMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) PointerOverForeground() const;
        WINRT_IMPL_AUTO(void) PointerOverForeground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) RevealBackground() const;
        WINRT_IMPL_AUTO(void) RevealBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) RevealBorderBrush() const;
        WINRT_IMPL_AUTO(void) RevealBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Thickness) RevealBorderThickness() const;
        WINRT_IMPL_AUTO(void) RevealBorderThickness(winrt::Microsoft::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) RevealBackgroundShowsAboveContent() const;
        WINRT_IMPL_AUTO(void) RevealBackgroundShowsAboveContent(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectedDisabledBackground() const;
        WINRT_IMPL_AUTO(void) SelectedDisabledBackground(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckPressedBrush() const;
        WINRT_IMPL_AUTO(void) CheckPressedBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckDisabledBrush() const;
        WINRT_IMPL_AUTO(void) CheckDisabledBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckBoxPointerOverBrush() const;
        WINRT_IMPL_AUTO(void) CheckBoxPointerOverBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckBoxPressedBrush() const;
        WINRT_IMPL_AUTO(void) CheckBoxPressedBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckBoxDisabledBrush() const;
        WINRT_IMPL_AUTO(void) CheckBoxDisabledBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckBoxSelectedBrush() const;
        WINRT_IMPL_AUTO(void) CheckBoxSelectedBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckBoxSelectedPointerOverBrush() const;
        WINRT_IMPL_AUTO(void) CheckBoxSelectedPointerOverBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckBoxSelectedPressedBrush() const;
        WINRT_IMPL_AUTO(void) CheckBoxSelectedPressedBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckBoxSelectedDisabledBrush() const;
        WINRT_IMPL_AUTO(void) CheckBoxSelectedDisabledBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckBoxBorderBrush() const;
        WINRT_IMPL_AUTO(void) CheckBoxBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckBoxPointerOverBorderBrush() const;
        WINRT_IMPL_AUTO(void) CheckBoxPointerOverBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckBoxPressedBorderBrush() const;
        WINRT_IMPL_AUTO(void) CheckBoxPressedBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) CheckBoxDisabledBorderBrush() const;
        WINRT_IMPL_AUTO(void) CheckBoxDisabledBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::CornerRadius) CheckBoxCornerRadius() const;
        WINRT_IMPL_AUTO(void) CheckBoxCornerRadius(winrt::Microsoft::UI::Xaml::CornerRadius const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::CornerRadius) SelectionIndicatorCornerRadius() const;
        WINRT_IMPL_AUTO(void) SelectionIndicatorCornerRadius(winrt::Microsoft::UI::Xaml::CornerRadius const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) SelectionIndicatorVisualEnabled() const;
        WINRT_IMPL_AUTO(void) SelectionIndicatorVisualEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ListViewItemPresenterSelectionIndicatorMode) SelectionIndicatorMode() const;
        WINRT_IMPL_AUTO(void) SelectionIndicatorMode(winrt::Microsoft::UI::Xaml::Controls::Primitives::ListViewItemPresenterSelectionIndicatorMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectionIndicatorBrush() const;
        WINRT_IMPL_AUTO(void) SelectionIndicatorBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectionIndicatorPointerOverBrush() const;
        WINRT_IMPL_AUTO(void) SelectionIndicatorPointerOverBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectionIndicatorPressedBrush() const;
        WINRT_IMPL_AUTO(void) SelectionIndicatorPressedBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectionIndicatorDisabledBrush() const;
        WINRT_IMPL_AUTO(void) SelectionIndicatorDisabledBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectedBorderBrush() const;
        WINRT_IMPL_AUTO(void) SelectedBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectedPressedBorderBrush() const;
        WINRT_IMPL_AUTO(void) SelectedPressedBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectedDisabledBorderBrush() const;
        WINRT_IMPL_AUTO(void) SelectedDisabledBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) SelectedInnerBorderBrush() const;
        WINRT_IMPL_AUTO(void) SelectedInnerBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) PointerOverBorderBrush() const;
        WINRT_IMPL_AUTO(void) PointerOverBorderBrush(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ListViewItemPresenter) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemPresenterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectionCheckMarkVisualEnabledProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckHintBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckSelectingBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) DragBackgroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) DragForegroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) FocusBorderBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) PlaceholderBackgroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) PointerOverBackgroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedBackgroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedForegroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedPointerOverBackgroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedPointerOverBorderBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedBorderThicknessProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) DisabledOpacityProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) DragOpacityProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ReorderHintOffsetProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ListViewItemPresenterHorizontalContentAlignmentProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ListViewItemPresenterVerticalContentAlignmentProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ListViewItemPresenterPaddingProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) PointerOverBackgroundMarginProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ContentMarginProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedPressedBackgroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) PressedBackgroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckBoxBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) FocusSecondaryBorderBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) PointerOverForegroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) RevealBackgroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) RevealBorderBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) RevealBorderThicknessProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) RevealBackgroundShowsAboveContentProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedDisabledBackgroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckPressedBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckDisabledBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckBoxPointerOverBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckBoxPressedBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckBoxDisabledBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckBoxSelectedBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckBoxSelectedPointerOverBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckBoxSelectedPressedBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckBoxSelectedDisabledBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckBoxBorderBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckBoxPointerOverBorderBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckBoxPressedBorderBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckBoxDisabledBorderBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) CheckBoxCornerRadiusProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectionIndicatorCornerRadiusProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectionIndicatorVisualEnabledProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectionIndicatorModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectionIndicatorBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectionIndicatorPointerOverBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectionIndicatorPressedBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectionIndicatorDisabledBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedBorderBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedPressedBorderBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedDisabledBorderBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedInnerBorderBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) PointerOverBorderBrushProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemPresenterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IListViewItemPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IListViewItemTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) DragItemsCount() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IListViewItemTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IListViewItemTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ShouldLoop() const;
        WINRT_IMPL_AUTO(void) ShouldLoop(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Windows::Foundation::IInspectable>) Items() const;
        WINRT_IMPL_AUTO(void) Items(param::vector<winrt::Windows::Foundation::IInspectable> const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) SelectedIndex() const;
        WINRT_IMPL_AUTO(void) SelectedIndex(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) SelectedItem() const;
        WINRT_IMPL_AUTO(void) SelectedItem(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) ItemWidth() const;
        WINRT_IMPL_AUTO(void) ItemWidth(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) ItemHeight() const;
        WINRT_IMPL_AUTO(void) ItemHeight(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DataTemplate) ItemTemplate() const;
        WINRT_IMPL_AUTO(void) ItemTemplate(winrt::Microsoft::UI::Xaml::DataTemplate const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) SelectionChanged(winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector>::remove_SelectionChanged>;
        [[nodiscard]] SelectionChanged_revoker SelectionChanged(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const;
        WINRT_IMPL_AUTO(void) SelectionChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelector>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelector<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorItem
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorPanel
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorPanel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorPanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ShouldLoopProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ItemsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedIndexProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedItemProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ItemWidthProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ItemHeightProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ItemTemplateProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ILoopingSelectorStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ILoopingSelectorStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IMenuFlyoutItemTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) KeyboardAcceleratorTextMinWidth() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMenuFlyoutItemTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IMenuFlyoutItemTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IMenuFlyoutPresenterTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) FlyoutContentMinWidth() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMenuFlyoutPresenterTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IMenuFlyoutPresenterTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenter
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::UIElement) SourceElement() const;
        WINRT_IMPL_AUTO(void) SourceElement(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Color) ReplacementColor() const;
        WINRT_IMPL_AUTO(void) ReplacementColor(winrt::Windows::UI::Color const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::MonochromaticOverlayPresenter) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SourceElementProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ReplacementColorProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::IconElement) Icon() const;
        WINRT_IMPL_AUTO(void) Icon(winrt::Microsoft::UI::Xaml::Controls::IconElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenterTemplateSettings) TemplateSettings() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter2
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::InfoBadge) InfoBadge() const;
        WINRT_IMPL_AUTO(void) InfoBadge(winrt::Microsoft::UI::Xaml::Controls::InfoBadge const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) IconProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) TemplateSettingsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics2
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) InfoBadgeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) IconWidth() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) SmallerIconWidth() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenterTemplateSettings) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) IconWidthProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SmallerIconWidthProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) CanVerticallyScroll() const;
        WINRT_IMPL_AUTO(void) CanVerticallyScroll(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) CanHorizontallyScroll() const;
        WINRT_IMPL_AUTO(void) CanHorizontallyScroll(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ExtentWidth() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ExtentHeight() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ViewportWidth() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ViewportHeight() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) HorizontalOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) VerticalOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) ScrollOwner() const;
        WINRT_IMPL_AUTO(void) ScrollOwner(winrt::Windows::Foundation::IInspectable const& value) const;
        WINRT_IMPL_AUTO(void) LineUp() const;
        WINRT_IMPL_AUTO(void) LineDown() const;
        WINRT_IMPL_AUTO(void) LineLeft() const;
        WINRT_IMPL_AUTO(void) LineRight() const;
        WINRT_IMPL_AUTO(void) PageUp() const;
        WINRT_IMPL_AUTO(void) PageDown() const;
        WINRT_IMPL_AUTO(void) PageLeft() const;
        WINRT_IMPL_AUTO(void) PageRight() const;
        WINRT_IMPL_AUTO(void) MouseWheelUp() const;
        WINRT_IMPL_AUTO(void) MouseWheelDown() const;
        WINRT_IMPL_AUTO(void) MouseWheelLeft() const;
        WINRT_IMPL_AUTO(void) MouseWheelRight() const;
        WINRT_IMPL_AUTO(void) SetHorizontalOffset(double offset) const;
        WINRT_IMPL_AUTO(void) SetVerticalOffset(double offset) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) MakeVisible(winrt::Microsoft::UI::Xaml::UIElement const& visual, winrt::Windows::Foundation::Rect const& rectangle) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanelFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanelFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IOrientedVirtualizingPanelFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBase
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::PickerFlyoutBase) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseOverrides
    {
        WINRT_IMPL_AUTO(void) OnConfirmed() const;
        WINRT_IMPL_AUTO(bool) ShouldShowConfirmationButtons() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) TitleProperty() const;
        WINRT_IMPL_AUTO(hstring) GetTitle(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
        WINRT_IMPL_AUTO(void) SetTitle(winrt::Microsoft::UI::Xaml::DependencyObject const& element, param::hstring const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPickerFlyoutBaseStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IPickerFlyoutBaseStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderItem
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderItemFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::PivotHeaderItem) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderPanel
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotHeaderPanel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IPivotHeaderPanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IPivotPanel
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPivotPanel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IPivotPanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IPopup
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::UIElement) Child() const;
        WINRT_IMPL_AUTO(void) Child(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsOpen() const;
        WINRT_IMPL_AUTO(void) IsOpen(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) HorizontalOffset() const;
        WINRT_IMPL_AUTO(void) HorizontalOffset(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) VerticalOffset() const;
        WINRT_IMPL_AUTO(void) VerticalOffset(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Animation::TransitionCollection) ChildTransitions() const;
        WINRT_IMPL_AUTO(void) ChildTransitions(winrt::Microsoft::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsLightDismissEnabled() const;
        WINRT_IMPL_AUTO(void) IsLightDismissEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode) LightDismissOverlayMode() const;
        WINRT_IMPL_AUTO(void) LightDismissOverlayMode(winrt::Microsoft::UI::Xaml::Controls::LightDismissOverlayMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ShouldConstrainToRootBounds() const;
        WINRT_IMPL_AUTO(void) ShouldConstrainToRootBounds(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsConstrainedToRootBounds() const;
        WINRT_IMPL_AUTO(winrt::event_token) Opened(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Opened_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup>::remove_Opened>;
        [[nodiscard]] Opened_revoker Opened(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) Opened(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Closed(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Closed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup>::remove_Closed>;
        [[nodiscard]] Closed_revoker Closed(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) Closed(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IPopup<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IPopup2
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::FrameworkElement) PlacementTarget() const;
        WINRT_IMPL_AUTO(void) PlacementTarget(winrt::Microsoft::UI::Xaml::FrameworkElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::PopupPlacementMode) DesiredPlacement() const;
        WINRT_IMPL_AUTO(void) DesiredPlacement(winrt::Microsoft::UI::Xaml::Controls::Primitives::PopupPlacementMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::PopupPlacementMode) ActualPlacement() const;
        WINRT_IMPL_AUTO(winrt::event_token) ActualPlacementChanged(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ActualPlacementChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup2, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup2>::remove_ActualPlacementChanged>;
        [[nodiscard]] ActualPlacementChanged_revoker ActualPlacementChanged(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) ActualPlacementChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IPopup2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IPopup3
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::SystemBackdrop) SystemBackdrop() const;
        WINRT_IMPL_AUTO(void) SystemBackdrop(winrt::Microsoft::UI::Xaml::Media::SystemBackdrop const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopup3>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IPopup3<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ChildProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) IsOpenProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) HorizontalOffsetProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) VerticalOffsetProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ChildTransitionsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) IsLightDismissEnabledProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) LightDismissOverlayModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ShouldConstrainToRootBoundsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics2
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) PlacementTargetProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) DesiredPlacementProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics3
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SystemBackdropProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IPopupStatics3>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IPopupStatics3<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IRangeBase
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) Minimum() const;
        WINRT_IMPL_AUTO(void) Minimum(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) Maximum() const;
        WINRT_IMPL_AUTO(void) Maximum(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) SmallChange() const;
        WINRT_IMPL_AUTO(void) SmallChange(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) LargeChange() const;
        WINRT_IMPL_AUTO(void) LargeChange(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) Value() const;
        WINRT_IMPL_AUTO(void) Value(double value) const;
        WINRT_IMPL_AUTO(winrt::event_token) ValueChanged(winrt::Microsoft::UI::Xaml::Controls::Primitives::RangeBaseValueChangedEventHandler const& handler) const;
        using ValueChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBase, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBase>::remove_ValueChanged>;
        [[nodiscard]] ValueChanged_revoker ValueChanged(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::Primitives::RangeBaseValueChangedEventHandler const& handler) const;
        WINRT_IMPL_AUTO(void) ValueChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IRangeBase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::RangeBase) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseOverrides
    {
        WINRT_IMPL_AUTO(void) OnMinimumChanged(double oldMinimum, double newMinimum) const;
        WINRT_IMPL_AUTO(void) OnMaximumChanged(double oldMaximum, double newMaximum) const;
        WINRT_IMPL_AUTO(void) OnValueChanged(double oldValue, double newValue) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) MinimumProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) MaximumProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SmallChangeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) LargeChangeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ValueProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseValueChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) OldValue() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) NewValue() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IRangeBaseValueChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatButton
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) Delay() const;
        WINRT_IMPL_AUTO(void) Delay(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) Interval() const;
        WINRT_IMPL_AUTO(void) Interval(int32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatButton>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatButton<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatButtonStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) DelayProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) IntervalProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatButtonStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatButtonStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) Offset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) Interval() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) Start() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) End() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPointFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedScrollSnapPoint) CreateInstance(double offset, double interval, double start, double end, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment const& alignment, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPointFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPointFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) Offset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) Interval() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) Start() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) End() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPointFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedZoomSnapPoint) CreateInstance(double offset, double interval, double start, double end, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPointFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPointFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollBar
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Orientation) Orientation() const;
        WINRT_IMPL_AUTO(void) Orientation(winrt::Microsoft::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ViewportSize() const;
        WINRT_IMPL_AUTO(void) ViewportSize(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollingIndicatorMode) IndicatorMode() const;
        WINRT_IMPL_AUTO(void) IndicatorMode(winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollingIndicatorMode const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) Scroll(winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollEventHandler const& handler) const;
        using Scroll_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollBar, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollBar>::remove_Scroll>;
        [[nodiscard]] Scroll_revoker Scroll(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollEventHandler const& handler) const;
        WINRT_IMPL_AUTO(void) Scroll(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollBar>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollBar<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollBarStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) OrientationProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ViewportSizeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) IndicatorModeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollBarStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollBarStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanningInfo) PanningInfo() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) CanScroll() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsScrollingWithMouse() const;
        WINRT_IMPL_AUTO(void) SetIsScrollable(bool isScrollable) const;
        WINRT_IMPL_AUTO(void) SetValues(double minOffset, double maxOffset, double offset, double viewportLength) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::CompositionAnimation) GetScrollAnimation(int32_t correlationId, winrt::Windows::Foundation::Numerics::float2 const& startPosition, winrt::Windows::Foundation::Numerics::float2 const& endPosition, winrt::Microsoft::UI::Composition::CompositionAnimation const& defaultAnimation) const;
        WINRT_IMPL_AUTO(void) NotifyRequestedScrollCompleted(int32_t correlationId) const;
        WINRT_IMPL_AUTO(winrt::event_token) CanScrollChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using CanScrollChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>::remove_CanScrollChanged>;
        [[nodiscard]] CanScrollChanged_revoker CanScrollChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) CanScrollChanged(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) IsScrollingWithMouseChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using IsScrollingWithMouseChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>::remove_IsScrollingWithMouseChanged>;
        [[nodiscard]] IsScrollingWithMouseChanged_revoker IsScrollingWithMouseChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) IsScrollingWithMouseChanged(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ScrollToRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs> const& handler) const;
        using ScrollToRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>::remove_ScrollToRequested>;
        [[nodiscard]] ScrollToRequested_revoker ScrollToRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ScrollToRequested(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ScrollByRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs> const& handler) const;
        using ScrollByRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>::remove_ScrollByRequested>;
        [[nodiscard]] ScrollByRequested_revoker ScrollByRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ScrollByRequested(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) AddScrollVelocityRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerAddScrollVelocityRequestedEventArgs> const& handler) const;
        using AddScrollVelocityRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>::remove_AddScrollVelocityRequested>;
        [[nodiscard]] AddScrollVelocityRequested_revoker AddScrollVelocityRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerAddScrollVelocityRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) AddScrollVelocityRequested(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(float) OffsetVelocity() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IReference<float>) InertiaDecayRate() const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) CorrelationId() const;
        WINRT_IMPL_AUTO(void) CorrelationId(int32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgsFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerAddScrollVelocityRequestedEventArgs) CreateInstance(float offsetVelocity, winrt::Windows::Foundation::IReference<float> const& inertiaDecayRate) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanRequestedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerPoint) PointerPoint() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Handled() const;
        WINRT_IMPL_AUTO(void) Handled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanRequestedEventArgsFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerPanRequestedEventArgs) CreateInstance(winrt::Microsoft::UI::Input::PointerPoint const& pointerPoint) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanRequestedEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanRequestedEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanningInfo
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsRailEnabled() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Orientation) PanOrientation() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::UIElement) PanningElementAncestor() const;
        WINRT_IMPL_AUTO(void) SetPanningElementExpressionAnimationSources(winrt::Microsoft::UI::Composition::CompositionPropertySet const& propertySet, param::hstring const& minOffsetPropertyName, param::hstring const& maxOffsetPropertyName, param::hstring const& offsetPropertyName, param::hstring const& multiplierPropertyName) const;
        WINRT_IMPL_AUTO(winrt::event_token) Changed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanningInfo, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using Changed_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanningInfo, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanningInfo>::remove_Changed>;
        [[nodiscard]] Changed_revoker Changed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanningInfo, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) Changed(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PanRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanningInfo, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerPanRequestedEventArgs> const& handler) const;
        using PanRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanningInfo, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanningInfo>::remove_PanRequested>;
        [[nodiscard]] PanRequested_revoker PanRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanningInfo, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerPanRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PanRequested(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerPanningInfo>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerPanningInfo<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) OffsetDelta() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollOptions) Options() const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) CorrelationId() const;
        WINRT_IMPL_AUTO(void) CorrelationId(int32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgsFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs) CreateInstance(double offsetDelta, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollOptions const& options) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) Offset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollOptions) Options() const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) CorrelationId() const;
        WINRT_IMPL_AUTO(void) CorrelationId(int32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgsFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs) CreateInstance(double offset, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollOptions const& options) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) NewValue() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollEventType) ScrollEventType() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) Background() const;
        WINRT_IMPL_AUTO(void) Background(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::UIElement) Content() const;
        WINRT_IMPL_AUTO(void) Content(winrt::Microsoft::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::CompositionPropertySet) ExpressionAnimationSources() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) HorizontalOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) VerticalOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) ZoomFactor() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ExtentWidth() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ExtentHeight() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ViewportWidth() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ViewportHeight() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ScrollableWidth() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ScrollableHeight() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ScrollingContentOrientation) ContentOrientation() const;
        WINRT_IMPL_AUTO(void) ContentOrientation(winrt::Microsoft::UI::Xaml::Controls::ScrollingContentOrientation const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ScrollingChainMode) HorizontalScrollChainMode() const;
        WINRT_IMPL_AUTO(void) HorizontalScrollChainMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingChainMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ScrollingChainMode) VerticalScrollChainMode() const;
        WINRT_IMPL_AUTO(void) VerticalScrollChainMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingChainMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ScrollingRailMode) HorizontalScrollRailMode() const;
        WINRT_IMPL_AUTO(void) HorizontalScrollRailMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingRailMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ScrollingRailMode) VerticalScrollRailMode() const;
        WINRT_IMPL_AUTO(void) VerticalScrollRailMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingRailMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollMode) HorizontalScrollMode() const;
        WINRT_IMPL_AUTO(void) HorizontalScrollMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollMode) VerticalScrollMode() const;
        WINRT_IMPL_AUTO(void) VerticalScrollMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollMode) ComputedHorizontalScrollMode() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollMode) ComputedVerticalScrollMode() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ScrollingChainMode) ZoomChainMode() const;
        WINRT_IMPL_AUTO(void) ZoomChainMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingChainMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomMode) ZoomMode() const;
        WINRT_IMPL_AUTO(void) ZoomMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ScrollingInputKinds) IgnoredInputKinds() const;
        WINRT_IMPL_AUTO(void) IgnoredInputKinds(winrt::Microsoft::UI::Xaml::Controls::ScrollingInputKinds const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) MinZoomFactor() const;
        WINRT_IMPL_AUTO(void) MinZoomFactor(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) MaxZoomFactor() const;
        WINRT_IMPL_AUTO(void) MaxZoomFactor(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::ScrollingInteractionState) State() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController) HorizontalScrollController() const;
        WINRT_IMPL_AUTO(void) HorizontalScrollController(winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController) VerticalScrollController() const;
        WINRT_IMPL_AUTO(void) VerticalScrollController(winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) HorizontalAnchorRatio() const;
        WINRT_IMPL_AUTO(void) HorizontalAnchorRatio(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) VerticalAnchorRatio() const;
        WINRT_IMPL_AUTO(void) VerticalAnchorRatio(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase>) HorizontalSnapPoints() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase>) VerticalSnapPoints() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPointBase>) ZoomSnapPoints() const;
        WINRT_IMPL_AUTO(int32_t) ScrollTo(double horizontalOffset, double verticalOffset) const;
        WINRT_IMPL_AUTO(int32_t) ScrollTo(double horizontalOffset, double verticalOffset, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollOptions const& options) const;
        WINRT_IMPL_AUTO(int32_t) ScrollBy(double horizontalOffsetDelta, double verticalOffsetDelta) const;
        WINRT_IMPL_AUTO(int32_t) ScrollBy(double horizontalOffsetDelta, double verticalOffsetDelta, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollOptions const& options) const;
        WINRT_IMPL_AUTO(int32_t) AddScrollVelocity(winrt::Windows::Foundation::Numerics::float2 const& offsetsVelocity, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& inertiaDecayRate) const;
        WINRT_IMPL_AUTO(int32_t) ZoomTo(float zoomFactor, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& centerPoint) const;
        WINRT_IMPL_AUTO(int32_t) ZoomTo(float zoomFactor, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& centerPoint, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomOptions const& options) const;
        WINRT_IMPL_AUTO(int32_t) ZoomBy(float zoomFactorDelta, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& centerPoint) const;
        WINRT_IMPL_AUTO(int32_t) ZoomBy(float zoomFactorDelta, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& centerPoint, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomOptions const& options) const;
        WINRT_IMPL_AUTO(int32_t) AddZoomVelocity(float zoomFactorVelocity, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& centerPoint, winrt::Windows::Foundation::IReference<float> const& inertiaDecayRate) const;
        WINRT_IMPL_AUTO(winrt::event_token) ExtentChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ExtentChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_ExtentChanged>;
        [[nodiscard]] ExtentChanged_revoker ExtentChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) ExtentChanged(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) StateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using StateChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_StateChanged>;
        [[nodiscard]] StateChanged_revoker StateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) StateChanged(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ViewChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ViewChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_ViewChanged>;
        [[nodiscard]] ViewChanged_revoker ViewChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) ViewChanged(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ScrollAnimationStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollAnimationStartingEventArgs> const& handler) const;
        using ScrollAnimationStarting_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_ScrollAnimationStarting>;
        [[nodiscard]] ScrollAnimationStarting_revoker ScrollAnimationStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollAnimationStartingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ScrollAnimationStarting(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ZoomAnimationStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomAnimationStartingEventArgs> const& handler) const;
        using ZoomAnimationStarting_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_ZoomAnimationStarting>;
        [[nodiscard]] ZoomAnimationStarting_revoker ZoomAnimationStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomAnimationStartingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ZoomAnimationStarting(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ScrollCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollCompletedEventArgs> const& handler) const;
        using ScrollCompleted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_ScrollCompleted>;
        [[nodiscard]] ScrollCompleted_revoker ScrollCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollCompletedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ScrollCompleted(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ZoomCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomCompletedEventArgs> const& handler) const;
        using ZoomCompleted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_ZoomCompleted>;
        [[nodiscard]] ZoomCompleted_revoker ZoomCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomCompletedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ZoomCompleted(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) BringingIntoView(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingBringingIntoViewEventArgs> const& handler) const;
        using BringingIntoView_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_BringingIntoView>;
        [[nodiscard]] BringingIntoView_revoker BringingIntoView(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingBringingIntoViewEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) BringingIntoView(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) AnchorRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingAnchorRequestedEventArgs> const& handler) const;
        using AnchorRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_AnchorRequested>;
        [[nodiscard]] AnchorRequested_revoker AnchorRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingAnchorRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) AnchorRequested(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) BackgroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ContentProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ContentOrientationProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) HorizontalScrollChainModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) VerticalScrollChainModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) HorizontalScrollRailModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) VerticalScrollRailModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) HorizontalScrollModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) VerticalScrollModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ComputedHorizontalScrollModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ComputedVerticalScrollModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ZoomChainModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) ZoomModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) IgnoredInputKindsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) MinZoomFactorProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) MaxZoomFactorProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) HorizontalAnchorRatioProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) VerticalAnchorRatioProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPoint
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) Value() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPoint<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBase
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment) Alignment() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBaseFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBaseFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBaseFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPoint) CreateInstance(double snapPointValue, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment const& alignment, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AreHorizontalSnapPointsRegular() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AreVerticalSnapPointsRegular() const;
        WINRT_IMPL_AUTO(winrt::event_token) HorizontalSnapPointsChanged(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using HorizontalSnapPointsChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>::remove_HorizontalSnapPointsChanged>;
        [[nodiscard]] HorizontalSnapPointsChanged_revoker HorizontalSnapPointsChanged(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) HorizontalSnapPointsChanged(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) VerticalSnapPointsChanged(winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        using VerticalSnapPointsChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>::remove_VerticalSnapPointsChanged>;
        [[nodiscard]] VerticalSnapPointsChanged_revoker VerticalSnapPointsChanged(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) VerticalSnapPointsChanged(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVectorView<float>) GetIrregularSnapPoints(winrt::Microsoft::UI::Xaml::Controls::Orientation const& orientation, winrt::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment const& alignment) const;
        WINRT_IMPL_AUTO(float) GetRegularSnapPoints(winrt::Microsoft::UI::Xaml::Controls::Orientation const& orientation, winrt::Microsoft::UI::Xaml::Controls::Primitives::SnapPointsAlignment const& alignment, float& offset) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointsInfo<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ISelector
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) SelectedIndex() const;
        WINRT_IMPL_AUTO(void) SelectedIndex(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) SelectedItem() const;
        WINRT_IMPL_AUTO(void) SelectedItem(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) SelectedValue() const;
        WINRT_IMPL_AUTO(void) SelectedValue(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) SelectedValuePath() const;
        WINRT_IMPL_AUTO(void) SelectedValuePath(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IReference<bool>) IsSynchronizedWithCurrentItem() const;
        WINRT_IMPL_AUTO(void) IsSynchronizedWithCurrentItem(winrt::Windows::Foundation::IReference<bool> const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) SelectionChanged(winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelector, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelector>::remove_SelectionChanged>;
        [[nodiscard]] SelectionChanged_revoker SelectionChanged(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const;
        WINRT_IMPL_AUTO(void) SelectionChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelector>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ISelector<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ISelectorFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ISelectorFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ISelectorItem
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSelected() const;
        WINRT_IMPL_AUTO(void) IsSelected(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ISelectorItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ISelectorItemFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::SelectorItem) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ISelectorItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ISelectorItemStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) IsSelectedProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ISelectorItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ISelectorStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedIndexProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedItemProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedValueProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) SelectedValuePathProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) IsSynchronizedWithCurrentItemProperty() const;
        WINRT_IMPL_AUTO(bool) GetIsSelectionActive(winrt::Microsoft::UI::Xaml::DependencyObject const& element) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISelectorStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ISelectorStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBase
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBaseFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBaseFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBaseFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ISplitViewTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) OpenPaneLength() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) NegativeOpenPaneLength() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) OpenPaneLengthMinusCompactLength() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) NegativeOpenPaneLengthMinusCompactLength() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::GridLength) OpenPaneGridLength() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::GridLength) CompactPaneGridLength() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISplitViewTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ISplitViewTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ITabViewListView
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ITabViewListView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ITabViewListViewFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::TabViewListView) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ITabViewListViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IThumb
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsDragging() const;
        WINRT_IMPL_AUTO(winrt::event_token) DragStarted(winrt::Microsoft::UI::Xaml::Controls::Primitives::DragStartedEventHandler const& handler) const;
        using DragStarted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IThumb, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IThumb>::remove_DragStarted>;
        [[nodiscard]] DragStarted_revoker DragStarted(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::Primitives::DragStartedEventHandler const& handler) const;
        WINRT_IMPL_AUTO(void) DragStarted(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) DragDelta(winrt::Microsoft::UI::Xaml::Controls::Primitives::DragDeltaEventHandler const& handler) const;
        using DragDelta_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IThumb, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IThumb>::remove_DragDelta>;
        [[nodiscard]] DragDelta_revoker DragDelta(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::Primitives::DragDeltaEventHandler const& handler) const;
        WINRT_IMPL_AUTO(void) DragDelta(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) DragCompleted(winrt::Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventHandler const& handler) const;
        using DragCompleted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IThumb, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IThumb>::remove_DragCompleted>;
        [[nodiscard]] DragCompleted_revoker DragCompleted(auto_revoke_t, winrt::Microsoft::UI::Xaml::Controls::Primitives::DragCompletedEventHandler const& handler) const;
        WINRT_IMPL_AUTO(void) DragCompleted(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(void) CancelDrag() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IThumb>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IThumb<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IThumbStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) IsDraggingProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IThumbStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IThumbStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ITickBar
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Media::Brush) Fill() const;
        WINRT_IMPL_AUTO(void) Fill(winrt::Microsoft::UI::Xaml::Media::Brush const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITickBar>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ITickBar<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ITickBarStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) FillProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITickBarStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ITickBarStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IToggleButton
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IReference<bool>) IsChecked() const;
        WINRT_IMPL_AUTO(void) IsChecked(winrt::Windows::Foundation::IReference<bool> const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsThreeState() const;
        WINRT_IMPL_AUTO(void) IsThreeState(bool value) const;
        WINRT_IMPL_AUTO(winrt::event_token) Checked(winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        using Checked_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton>::remove_Checked>;
        [[nodiscard]] Checked_revoker Checked(auto_revoke_t, winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        WINRT_IMPL_AUTO(void) Checked(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Unchecked(winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        using Unchecked_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton>::remove_Unchecked>;
        [[nodiscard]] Unchecked_revoker Unchecked(auto_revoke_t, winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        WINRT_IMPL_AUTO(void) Unchecked(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Indeterminate(winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        using Indeterminate_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton>::remove_Indeterminate>;
        [[nodiscard]] Indeterminate_revoker Indeterminate(auto_revoke_t, winrt::Microsoft::UI::Xaml::RoutedEventHandler const& handler) const;
        WINRT_IMPL_AUTO(void) Indeterminate(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButton>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IToggleButton<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ToggleButton) CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonOverrides
    {
        WINRT_IMPL_AUTO(void) OnToggle() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) IsCheckedProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::DependencyProperty) IsThreeStateProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleButtonStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IToggleButtonStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IToggleSwitchTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) KnobCurrentToOnOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) KnobCurrentToOffOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) KnobOnToOffOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) KnobOffToOnOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) CurtainCurrentToOnOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) CurtainCurrentToOffOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) CurtainOnToOffOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) CurtainOffToOnOffset() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToggleSwitchTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IToggleSwitchTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IToolTipTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) FromHorizontalOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) FromVerticalOffset() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IToolTipTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IToolTipTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPoint
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) Value() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPoint<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBase
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBaseFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBaseFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBaseFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointFactory
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPoint) CreateInstance(double snapPointValue, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointFactory<D>;
    };
    struct struct_Microsoft_UI_Xaml_Controls_Primitives_GeneratorPosition
    {
        int32_t Index;
        int32_t Offset;
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::Primitives::GeneratorPosition>
    {
        using type = struct_Microsoft_UI_Xaml_Controls_Primitives_GeneratorPosition;
    };
}
#endif
