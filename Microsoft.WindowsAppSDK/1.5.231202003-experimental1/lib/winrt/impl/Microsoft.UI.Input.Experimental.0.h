// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220110.5

#pragma once
#ifndef WINRT_Microsoft_UI_Input_Experimental_0_H
#define WINRT_Microsoft_UI_Input_Experimental_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Input
{
    struct IPointerPointTransform;
    struct PointerPoint;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct EventRegistrationToken;
    struct Rect;
    template <typename TSender, typename TResult> struct __declspec(empty_bases) TypedEventHandler;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct __declspec(empty_bases) IVector;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Input::Experimental
{
    enum class ExpFocusChangedDirection : int32_t
    {
        None = 0,
        Next = 1,
        Previous = 2,
        Up = 3,
        Down = 4,
        Left = 5,
        Right = 6,
    };
    enum class ExpFocusNavigationReason : int32_t
    {
        Programmatic = 0,
        Restore = 1,
        First = 2,
        Last = 3,
        Left = 4,
        Up = 5,
        Right = 6,
        Down = 7,
    };
    struct IExpFocusChangedEventArgs;
    struct IExpFocusController;
    struct IExpFocusControllerStatics;
    struct IExpFocusNavigationHost;
    struct IExpFocusNavigationHostStatics;
    struct IExpFocusNavigationRequest;
    struct IExpFocusNavigationRequestStatics;
    struct IExpFocusNavigationResult;
    struct IExpInputSite;
    struct IExpNavigateFocusRequestedEventArgs;
    struct IExpPointerPoint;
    struct IExpPointerPointStatics;
    struct ExpFocusChangedEventArgs;
    struct ExpFocusController;
    struct ExpFocusNavigationHost;
    struct ExpFocusNavigationRequest;
    struct ExpFocusNavigationResult;
    struct ExpInputSite;
    struct ExpNavigateFocusRequestedEventArgs;
    struct ExpPointerPoint;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusController>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpInputSite>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpFocusController>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpInputSite>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedDirection>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs> = L"Microsoft.UI.Input.Experimental.ExpFocusChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpFocusController> = L"Microsoft.UI.Input.Experimental.ExpFocusController";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost> = L"Microsoft.UI.Input.Experimental.ExpFocusNavigationHost";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest> = L"Microsoft.UI.Input.Experimental.ExpFocusNavigationRequest";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult> = L"Microsoft.UI.Input.Experimental.ExpFocusNavigationResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpInputSite> = L"Microsoft.UI.Input.Experimental.ExpInputSite";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> = L"Microsoft.UI.Input.Experimental.ExpNavigateFocusRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint> = L"Microsoft.UI.Input.Experimental.ExpPointerPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedDirection> = L"Microsoft.UI.Input.Experimental.ExpFocusChangedDirection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason> = L"Microsoft.UI.Input.Experimental.ExpFocusNavigationReason";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs> = L"Microsoft.UI.Input.Experimental.IExpFocusChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusController> = L"Microsoft.UI.Input.Experimental.IExpFocusController";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics> = L"Microsoft.UI.Input.Experimental.IExpFocusControllerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost> = L"Microsoft.UI.Input.Experimental.IExpFocusNavigationHost";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics> = L"Microsoft.UI.Input.Experimental.IExpFocusNavigationHostStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest> = L"Microsoft.UI.Input.Experimental.IExpFocusNavigationRequest";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics> = L"Microsoft.UI.Input.Experimental.IExpFocusNavigationRequestStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult> = L"Microsoft.UI.Input.Experimental.IExpFocusNavigationResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpInputSite> = L"Microsoft.UI.Input.Experimental.IExpInputSite";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs> = L"Microsoft.UI.Input.Experimental.IExpNavigateFocusRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint> = L"Microsoft.UI.Input.Experimental.IExpPointerPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics> = L"Microsoft.UI.Input.Experimental.IExpPointerPointStatics";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs>{ 0x714933B6,0xBA0D,0x58BC,{ 0x97,0xA9,0xBC,0xC8,0x9A,0x0B,0x34,0x31 } }; // 714933B6-BA0D-58BC-97A9-BCC89A0B3431
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusController>{ 0xFD86E2D9,0x1550,0x59BA,{ 0x8B,0x4A,0x97,0x3C,0x72,0x51,0xCD,0x2C } }; // FD86E2D9-1550-59BA-8B4A-973C7251CD2C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics>{ 0xF7D9123F,0x9364,0x566B,{ 0xB6,0xF0,0x19,0xC4,0x9E,0xD1,0x42,0xB9 } }; // F7D9123F-9364-566B-B6F0-19C49ED142B9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost>{ 0x49B02D03,0xB0D8,0x55DB,{ 0x98,0x5A,0x48,0x61,0x1E,0x47,0xE8,0x38 } }; // 49B02D03-B0D8-55DB-985A-48611E47E838
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics>{ 0x7634E568,0x2177,0x50D9,{ 0x9D,0x95,0x18,0xE3,0xCA,0xCA,0x2B,0x40 } }; // 7634E568-2177-50D9-9D95-18E3CACA2B40
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest>{ 0x4DE7C4D0,0x6F4B,0x5176,{ 0x9A,0xE2,0x34,0x6D,0x33,0x18,0xDB,0x4E } }; // 4DE7C4D0-6F4B-5176-9AE2-346D3318DB4E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics>{ 0x1CC934BB,0xEC15,0x5FAA,{ 0xAF,0x75,0xAF,0xE4,0x5D,0x0C,0xE1,0xA9 } }; // 1CC934BB-EC15-5FAA-AF75-AFE45D0CE1A9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult>{ 0x33007903,0x6CD1,0x54A2,{ 0xA5,0xD3,0x57,0x24,0xEF,0x67,0x3C,0x6C } }; // 33007903-6CD1-54A2-A5D3-5724EF673C6C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpInputSite>{ 0x6B707B95,0xBBE8,0x5131,{ 0xA6,0xD7,0xB1,0x1C,0x26,0xCB,0x7C,0xB6 } }; // 6B707B95-BBE8-5131-A6D7-B11C26CB7CB6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs>{ 0x563B3F71,0xECA0,0x5652,{ 0xB7,0x48,0x13,0xC6,0xD6,0x79,0x4C,0xEE } }; // 563B3F71-ECA0-5652-B748-13C6D6794CEE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint>{ 0xF9DC0C95,0xF286,0x5A1C,{ 0xB0,0x38,0x7F,0xF8,0x4A,0x4E,0x4A,0xF5 } }; // F9DC0C95-F286-5A1C-B038-7FF84A4E4AF5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>{ 0xFAE05D62,0x8E52,0x5BF5,{ 0xA5,0x77,0xFF,0x07,0xBB,0x15,0xE0,0x31 } }; // FAE05D62-8E52-5BF5-A577-FF07BB15E031
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpFocusController>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpFocusController; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpInputSite>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpInputSite; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint; };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Direction(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusController>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HasFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall TrySetFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall DepartFocus(void*, void**) noexcept = 0;
            virtual int32_t __stdcall add_NavigateFocusRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_NavigateFocusRequested(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetForInputSite(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall NavigateFocus(void*, void**) noexcept = 0;
            virtual int32_t __stdcall add_TakeFocusRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TakeFocusRequested(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetForInputSite(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CorrelationId(winrt::guid*) noexcept = 0;
            virtual int32_t __stdcall get_HintRect(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall get_Reason(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateFocusNavigationRequestReasonAndHintRect(int32_t, winrt::Windows::Foundation::Rect, void**) noexcept = 0;
            virtual int32_t __stdcall CreateFocusNavigationRequestReasonHintRectAndId(int32_t, winrt::Windows::Foundation::Rect, winrt::guid, void**) noexcept = 0;
            virtual int32_t __stdcall CreateFocusNavigationRequestWithReason(int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_WasMoved(bool*) noexcept = 0;
            virtual int32_t __stdcall put_WasMoved(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpInputSite>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Request(void**) noexcept = 0;
            virtual int32_t __stdcall get_WasMoved(bool*) noexcept = 0;
            virtual int32_t __stdcall put_WasMoved(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetCurrentPoint(uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetCurrentPointTransformed(uint32_t, void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetIntermediatePoints(uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetIntermediatePointsTransformed(uint32_t, void*, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedDirection) Direction() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusController
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) HasFocus() const;
        WINRT_IMPL_AUTO(bool) TrySetFocus() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult) DepartFocus(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest const& request) const;
        WINRT_IMPL_AUTO(winrt::event_token) NavigateFocusRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusController, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const;
        using NavigateFocusRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpFocusController, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpFocusController>::remove_NavigateFocusRequested>;
        [[nodiscard]] NavigateFocusRequested_revoker NavigateFocusRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusController, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) NavigateFocusRequested(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusController>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusController<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusControllerStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusController) GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusControllerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHost
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult) NavigateFocus(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest const& request) const;
        WINRT_IMPL_AUTO(winrt::event_token) TakeFocusRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const;
        using TakeFocusRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost>::remove_TakeFocusRequested>;
        [[nodiscard]] TakeFocusRequested_revoker TakeFocusRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) TakeFocusRequested(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHost<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHostStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost) GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHostStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequest
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::guid) CorrelationId() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) HintRect() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason) Reason() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequest<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequestStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest) CreateFocusNavigationRequestReasonAndHintRect(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason, winrt::Windows::Foundation::Rect const& hintRect) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest) CreateFocusNavigationRequestReasonHintRectAndId(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason, winrt::Windows::Foundation::Rect const& hintRect, winrt::guid const& correlationId) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest) CreateFocusNavigationRequestWithReason(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequestStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationResult
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) WasMoved() const;
        WINRT_IMPL_AUTO(void) WasMoved(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationResult<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpInputSite
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpInputSite>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpInputSite<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpNavigateFocusRequestedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest) Request() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) WasMoved() const;
        WINRT_IMPL_AUTO(void) WasMoved(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpNavigateFocusRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpPointerPoint
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpPointerPoint<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerPoint) GetCurrentPoint(uint32_t pointerId) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerPoint) GetCurrentPointTransformed(uint32_t pointerId, winrt::Microsoft::UI::Input::IPointerPointTransform const& transform) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::PointerPoint>) GetIntermediatePoints(uint32_t pointerId) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::PointerPoint>) GetIntermediatePointsTransformed(uint32_t pointerId, winrt::Microsoft::UI::Input::IPointerPointTransform const& transform) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics<D>;
    };
}
#endif
