// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220110.5

#pragma once
#ifndef WINRT_Microsoft_Windows_Management_Deployment_2_H
#define WINRT_Microsoft_Windows_Management_Deployment_2_H
#include "winrt/impl/Microsoft.Windows.Management.Deployment.1.h"
WINRT_EXPORT namespace winrt::Microsoft::Windows::Management::Deployment
{
    struct __declspec(empty_bases) AddPackageOptions : winrt::Microsoft::Windows::Management::Deployment::IAddPackageOptions
    {
        AddPackageOptions(std::nullptr_t) noexcept {}
        AddPackageOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IAddPackageOptions(ptr, take_ownership_from_abi) {}
        AddPackageOptions();
    };
    struct __declspec(empty_bases) AddPackageSetOptions : winrt::Microsoft::Windows::Management::Deployment::IAddPackageSetOptions
    {
        AddPackageSetOptions(std::nullptr_t) noexcept {}
        AddPackageSetOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IAddPackageSetOptions(ptr, take_ownership_from_abi) {}
        AddPackageSetOptions();
    };
    struct __declspec(empty_bases) EnsureIsReadyOptions : winrt::Microsoft::Windows::Management::Deployment::IEnsureIsReadyOptions
    {
        EnsureIsReadyOptions(std::nullptr_t) noexcept {}
        EnsureIsReadyOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IEnsureIsReadyOptions(ptr, take_ownership_from_abi) {}
        EnsureIsReadyOptions();
    };
    struct __declspec(empty_bases) FindPackageSetOptions : winrt::Microsoft::Windows::Management::Deployment::IFindPackageSetOptions
    {
        FindPackageSetOptions(std::nullptr_t) noexcept {}
        FindPackageSetOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IFindPackageSetOptions(ptr, take_ownership_from_abi) {}
        FindPackageSetOptions();
    };
    struct __declspec(empty_bases) PackageDeploymentManager : winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentManager
    {
        PackageDeploymentManager(std::nullptr_t) noexcept {}
        PackageDeploymentManager(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentManager(ptr, take_ownership_from_abi) {}
        static auto GetDefault();
    };
    struct __declspec(empty_bases) PackageDeploymentProgress : winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentProgress
    {
        PackageDeploymentProgress(std::nullptr_t) noexcept {}
        PackageDeploymentProgress(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentProgress(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) PackageDeploymentResult : winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentResult
    {
        PackageDeploymentResult(std::nullptr_t) noexcept {}
        PackageDeploymentResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IPackageDeploymentResult(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) PackageRuntimeManager : winrt::Microsoft::Windows::Management::Deployment::IPackageRuntimeManager
    {
        PackageRuntimeManager(std::nullptr_t) noexcept {}
        PackageRuntimeManager(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IPackageRuntimeManager(ptr, take_ownership_from_abi) {}
        static auto GetDefault();
    };
    struct __declspec(empty_bases) PackageSet : winrt::Microsoft::Windows::Management::Deployment::IPackageSet
    {
        PackageSet(std::nullptr_t) noexcept {}
        PackageSet(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IPackageSet(ptr, take_ownership_from_abi) {}
        PackageSet();
    };
    struct __declspec(empty_bases) PackageSetItem : winrt::Microsoft::Windows::Management::Deployment::IPackageSetItem
    {
        PackageSetItem(std::nullptr_t) noexcept {}
        PackageSetItem(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IPackageSetItem(ptr, take_ownership_from_abi) {}
        PackageSetItem();
    };
    struct __declspec(empty_bases) PackageSetItemRuntimeDisposition : winrt::Microsoft::Windows::Management::Deployment::IPackageSetItemRuntimeDisposition
    {
        PackageSetItemRuntimeDisposition(std::nullptr_t) noexcept {}
        PackageSetItemRuntimeDisposition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IPackageSetItemRuntimeDisposition(ptr, take_ownership_from_abi) {}
        PackageSetItemRuntimeDisposition();
    };
    struct __declspec(empty_bases) PackageSetManager : winrt::Microsoft::Windows::Management::Deployment::IPackageSetManager
    {
        PackageSetManager(std::nullptr_t) noexcept {}
        PackageSetManager(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IPackageSetManager(ptr, take_ownership_from_abi) {}
        static auto GetDefault();
    };
    struct __declspec(empty_bases) PackageSetRuntimeDisposition : winrt::Microsoft::Windows::Management::Deployment::IPackageSetRuntimeDisposition
    {
        PackageSetRuntimeDisposition(std::nullptr_t) noexcept {}
        PackageSetRuntimeDisposition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IPackageSetRuntimeDisposition(ptr, take_ownership_from_abi) {}
        PackageSetRuntimeDisposition();
    };
    struct __declspec(empty_bases) PackageVolume : winrt::Microsoft::Windows::Management::Deployment::IPackageVolume
    {
        PackageVolume(std::nullptr_t) noexcept {}
        PackageVolume(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IPackageVolume(ptr, take_ownership_from_abi) {}
        PackageVolume();
    };
    struct PackageVolumeManager
    {
        PackageVolumeManager() = delete;
        static auto FindPackageVolumes();
        static auto FindPackageVolumeByPath(param::hstring const& path);
        static auto FindPackageVolumeByMediaId(param::hstring const& mediaId);
        static auto FindPackageVolumeByName(param::hstring const& name);
    };
    struct __declspec(empty_bases) PackageVolumeStatus : winrt::Microsoft::Windows::Management::Deployment::IPackageVolumeStatus
    {
        PackageVolumeStatus(std::nullptr_t) noexcept {}
        PackageVolumeStatus(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IPackageVolumeStatus(ptr, take_ownership_from_abi) {}
        PackageVolumeStatus();
    };
    struct __declspec(empty_bases) RegisterPackageOptions : winrt::Microsoft::Windows::Management::Deployment::IRegisterPackageOptions
    {
        RegisterPackageOptions(std::nullptr_t) noexcept {}
        RegisterPackageOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IRegisterPackageOptions(ptr, take_ownership_from_abi) {}
        RegisterPackageOptions();
    };
    struct __declspec(empty_bases) RemovePackageOptions : winrt::Microsoft::Windows::Management::Deployment::IRemovePackageOptions
    {
        RemovePackageOptions(std::nullptr_t) noexcept {}
        RemovePackageOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IRemovePackageOptions(ptr, take_ownership_from_abi) {}
        RemovePackageOptions();
    };
    struct __declspec(empty_bases) StagePackageOptions : winrt::Microsoft::Windows::Management::Deployment::IStagePackageOptions
    {
        StagePackageOptions(std::nullptr_t) noexcept {}
        StagePackageOptions(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::Management::Deployment::IStagePackageOptions(ptr, take_ownership_from_abi) {}
        StagePackageOptions();
    };
}
#endif
