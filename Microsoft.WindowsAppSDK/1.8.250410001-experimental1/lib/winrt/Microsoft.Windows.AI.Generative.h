// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_AI_Generative_H
#define WINRT_Microsoft_Windows_AI_Generative_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.240405.15"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.240405.15"
#include "winrt/Microsoft.Windows.AI.h"
#include "winrt/impl/Microsoft.Graphics.Imaging.2.h"
#include "winrt/impl/Microsoft.Windows.AI.2.h"
#include "winrt/impl/Microsoft.Windows.AI.ContentModeration.2.h"
#include "winrt/impl/Microsoft.Windows.SemanticSearch.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Microsoft.Windows.AI.Generative.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_IImageDescriptionGenerator<D>::DescribeAsync(winrt::Microsoft::Graphics::Imaging::ImageBuffer const& image, winrt::Microsoft::Windows::AI::Generative::ImageDescriptionKind const& kind, winrt::Microsoft::Windows::AI::ContentModeration::ContentFilterOptions const& contentFilterOptions) const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::IImageDescriptionGenerator)->DescribeAsync(*(void**)(&image), static_cast<int32_t>(kind), *(void**)(&contentFilterOptions), &operation));
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::Generative::ImageDescriptionResult, hstring>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_IImageDescriptionGeneratorStatics<D>::GetReadyState() const
    {
        winrt::Microsoft::Windows::AI::AIFeatureReadyState result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::IImageDescriptionGeneratorStatics)->GetReadyState(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_IImageDescriptionGeneratorStatics<D>::EnsureReadyAsync() const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::IImageDescriptionGeneratorStatics)->EnsureReadyAsync(&operation));
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::AIFeatureReadyResult, double>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_IImageDescriptionGeneratorStatics<D>::CreateAsync() const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::IImageDescriptionGeneratorStatics)->CreateAsync(&operation));
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Windows::AI::Generative::ImageDescriptionGenerator>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_IImageDescriptionResult<D>::Description() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::IImageDescriptionResult)->get_Description(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_IImageDescriptionResult<D>::Status() const
    {
        winrt::Microsoft::Windows::AI::Generative::ImageDescriptionResultStatus value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::IImageDescriptionResult)->get_Status(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModel<D>::GenerateResponseAsync(param::hstring const& prompt) const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModel)->GenerateResponseAsync(*(void**)(&prompt), &operation));
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::Generative::LanguageModelResponseResult, hstring>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModel<D>::GenerateResponseAsync(param::hstring const& prompt, winrt::Microsoft::Windows::AI::Generative::LanguageModelOptions const& options) const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModel)->GenerateResponseAsync2(*(void**)(&prompt), *(void**)(&options), &operation));
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::Generative::LanguageModelResponseResult, hstring>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModel<D>::GenerateResponseAsync(winrt::Microsoft::Windows::AI::Generative::LanguageModelContext const& context, param::hstring const& prompt, winrt::Microsoft::Windows::AI::Generative::LanguageModelOptions const& options) const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModel)->GenerateResponseAsync3(*(void**)(&context), *(void**)(&prompt), *(void**)(&options), &operation));
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::Generative::LanguageModelResponseResult, hstring>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModel<D>::GenerateResponseFromEmbeddingsAsync(param::async_iterable<winrt::Microsoft::Windows::SemanticSearch::EmbeddingVector> const& promptEmbedding) const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModel)->GenerateResponseFromEmbeddingsAsync(*(void**)(&promptEmbedding), &operation));
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::Generative::LanguageModelResponseResult, hstring>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModel<D>::GenerateResponseFromEmbeddingsAsync(param::async_iterable<winrt::Microsoft::Windows::SemanticSearch::EmbeddingVector> const& promptEmbedding, winrt::Microsoft::Windows::AI::Generative::LanguageModelOptions const& options) const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModel)->GenerateResponseFromEmbeddingsAsync2(*(void**)(&promptEmbedding), *(void**)(&options), &operation));
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::Generative::LanguageModelResponseResult, hstring>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModel<D>::GenerateResponseFromEmbeddingsAsync(winrt::Microsoft::Windows::AI::Generative::LanguageModelContext const& context, param::async_iterable<winrt::Microsoft::Windows::SemanticSearch::EmbeddingVector> const& promptEmbedding, winrt::Microsoft::Windows::AI::Generative::LanguageModelOptions const& options) const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModel)->GenerateResponseFromEmbeddingsAsync3(*(void**)(&context), *(void**)(&promptEmbedding), *(void**)(&options), &operation));
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::Generative::LanguageModelResponseResult, hstring>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModel<D>::GenerateEmbeddingVectors(param::hstring const& prompt) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModel)->GenerateEmbeddingVectors(*(void**)(&prompt), &result));
        return winrt::Microsoft::Windows::AI::Generative::LanguageModelEmbeddingVectorResult{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModel<D>::GenerateEmbeddingVectors(param::hstring const& prompt, winrt::Microsoft::Windows::AI::ContentModeration::ContentFilterOptions const& contentFilterOptions) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModel)->GenerateEmbeddingVectors2(*(void**)(&prompt), *(void**)(&contentFilterOptions), &result));
        return winrt::Microsoft::Windows::AI::Generative::LanguageModelEmbeddingVectorResult{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModel<D>::GetUsablePromptLength(param::hstring const& prompt) const
    {
        uint64_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModel)->GetUsablePromptLength(*(void**)(&prompt), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModel<D>::GetUsablePromptLength(winrt::Microsoft::Windows::AI::Generative::LanguageModelContext const& context, param::hstring const& prompt) const
    {
        uint64_t result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModel)->GetUsablePromptLength2(*(void**)(&context), *(void**)(&prompt), &result));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModel<D>::GetVectorSpaceId() const
    {
        winrt::guid result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModel)->GetVectorSpaceId(put_abi(result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModel<D>::CreateContext() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModel)->CreateContext(&result));
        return winrt::Microsoft::Windows::AI::Generative::LanguageModelContext{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModel<D>::CreateContext(param::hstring const& systemPrompt) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModel)->CreateContext2(*(void**)(&systemPrompt), &result));
        return winrt::Microsoft::Windows::AI::Generative::LanguageModelContext{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModel<D>::CreateContext(param::hstring const& systemPrompt, winrt::Microsoft::Windows::AI::ContentModeration::ContentFilterOptions const& contentFilterOptions) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModel)->CreateContext3(*(void**)(&systemPrompt), *(void**)(&contentFilterOptions), &result));
        return winrt::Microsoft::Windows::AI::Generative::LanguageModelContext{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModelEmbeddingVectorResult<D>::EmbeddingVectors() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModelEmbeddingVectorResult)->get_EmbeddingVectors(&value));
        return winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::SemanticSearch::EmbeddingVector>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModelEmbeddingVectorResult<D>::Status() const
    {
        winrt::Microsoft::Windows::AI::Generative::LanguageModelResponseStatus value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModelEmbeddingVectorResult)->get_Status(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModelEmbeddingVectorResult<D>::ExtendedError() const
    {
        winrt::hresult value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModelEmbeddingVectorResult)->get_ExtendedError(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModelOptions<D>::Temperature() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModelOptions)->get_Temperature(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModelOptions<D>::Temperature(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModelOptions)->put_Temperature(value));
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModelOptions<D>::TopP() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModelOptions)->get_TopP(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModelOptions<D>::TopP(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModelOptions)->put_TopP(value));
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModelOptions<D>::TopK() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModelOptions)->get_TopK(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModelOptions<D>::TopK(uint32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModelOptions)->put_TopK(value));
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModelOptions<D>::ContentFilterOptions() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModelOptions)->get_ContentFilterOptions(&value));
        return winrt::Microsoft::Windows::AI::ContentModeration::ContentFilterOptions{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModelOptions<D>::ContentFilterOptions(winrt::Microsoft::Windows::AI::ContentModeration::ContentFilterOptions const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModelOptions)->put_ContentFilterOptions(*(void**)(&value)));
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModelResponseResult<D>::Text() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModelResponseResult)->get_Text(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModelResponseResult<D>::Status() const
    {
        winrt::Microsoft::Windows::AI::Generative::LanguageModelResponseStatus value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModelResponseResult)->get_Status(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModelResponseResult<D>::ExtendedError() const
    {
        winrt::hresult value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModelResponseResult)->get_ExtendedError(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModelStatics<D>::GetReadyState() const
    {
        winrt::Microsoft::Windows::AI::AIFeatureReadyState result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModelStatics)->GetReadyState(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModelStatics<D>::EnsureReadyAsync() const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModelStatics)->EnsureReadyAsync(&operation));
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::AIFeatureReadyResult, double>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_Generative_ILanguageModelStatics<D>::CreateAsync() const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::AI::Generative::ILanguageModelStatics)->CreateAsync(&operation));
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Windows::AI::Generative::LanguageModel>{ operation, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::Generative::IImageDescriptionGenerator> : produce_base<D, winrt::Microsoft::Windows::AI::Generative::IImageDescriptionGenerator>
    {
        int32_t __stdcall DescribeAsync(void* image, int32_t kind, void* contentFilterOptions, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::Generative::ImageDescriptionResult, hstring>>(this->shim().DescribeAsync(*reinterpret_cast<winrt::Microsoft::Graphics::Imaging::ImageBuffer const*>(&image), *reinterpret_cast<winrt::Microsoft::Windows::AI::Generative::ImageDescriptionKind const*>(&kind), *reinterpret_cast<winrt::Microsoft::Windows::AI::ContentModeration::ContentFilterOptions const*>(&contentFilterOptions)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::Generative::IImageDescriptionGeneratorStatics> : produce_base<D, winrt::Microsoft::Windows::AI::Generative::IImageDescriptionGeneratorStatics>
    {
        int32_t __stdcall GetReadyState(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::AI::AIFeatureReadyState>(this->shim().GetReadyState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall EnsureReadyAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::AIFeatureReadyResult, double>>(this->shim().EnsureReadyAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Windows::AI::Generative::ImageDescriptionGenerator>>(this->shim().CreateAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::Generative::IImageDescriptionResult> : produce_base<D, winrt::Microsoft::Windows::AI::Generative::IImageDescriptionResult>
    {
        int32_t __stdcall get_Description(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Description());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Status(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::AI::Generative::ImageDescriptionResultStatus>(this->shim().Status());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::Generative::ILanguageModel> : produce_base<D, winrt::Microsoft::Windows::AI::Generative::ILanguageModel>
    {
        int32_t __stdcall GenerateResponseAsync(void* prompt, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::Generative::LanguageModelResponseResult, hstring>>(this->shim().GenerateResponseAsync(*reinterpret_cast<hstring const*>(&prompt)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GenerateResponseAsync2(void* prompt, void* options, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::Generative::LanguageModelResponseResult, hstring>>(this->shim().GenerateResponseAsync(*reinterpret_cast<hstring const*>(&prompt), *reinterpret_cast<winrt::Microsoft::Windows::AI::Generative::LanguageModelOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GenerateResponseAsync3(void* context, void* prompt, void* options, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::Generative::LanguageModelResponseResult, hstring>>(this->shim().GenerateResponseAsync(*reinterpret_cast<winrt::Microsoft::Windows::AI::Generative::LanguageModelContext const*>(&context), *reinterpret_cast<hstring const*>(&prompt), *reinterpret_cast<winrt::Microsoft::Windows::AI::Generative::LanguageModelOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GenerateResponseFromEmbeddingsAsync(void* promptEmbedding, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::Generative::LanguageModelResponseResult, hstring>>(this->shim().GenerateResponseFromEmbeddingsAsync(*reinterpret_cast<winrt::Windows::Foundation::Collections::IIterable<winrt::Microsoft::Windows::SemanticSearch::EmbeddingVector> const*>(&promptEmbedding)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GenerateResponseFromEmbeddingsAsync2(void* promptEmbedding, void* options, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::Generative::LanguageModelResponseResult, hstring>>(this->shim().GenerateResponseFromEmbeddingsAsync(*reinterpret_cast<winrt::Windows::Foundation::Collections::IIterable<winrt::Microsoft::Windows::SemanticSearch::EmbeddingVector> const*>(&promptEmbedding), *reinterpret_cast<winrt::Microsoft::Windows::AI::Generative::LanguageModelOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GenerateResponseFromEmbeddingsAsync3(void* context, void* promptEmbedding, void* options, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::Generative::LanguageModelResponseResult, hstring>>(this->shim().GenerateResponseFromEmbeddingsAsync(*reinterpret_cast<winrt::Microsoft::Windows::AI::Generative::LanguageModelContext const*>(&context), *reinterpret_cast<winrt::Windows::Foundation::Collections::IIterable<winrt::Microsoft::Windows::SemanticSearch::EmbeddingVector> const*>(&promptEmbedding), *reinterpret_cast<winrt::Microsoft::Windows::AI::Generative::LanguageModelOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GenerateEmbeddingVectors(void* prompt, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::AI::Generative::LanguageModelEmbeddingVectorResult>(this->shim().GenerateEmbeddingVectors(*reinterpret_cast<hstring const*>(&prompt)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GenerateEmbeddingVectors2(void* prompt, void* contentFilterOptions, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::AI::Generative::LanguageModelEmbeddingVectorResult>(this->shim().GenerateEmbeddingVectors(*reinterpret_cast<hstring const*>(&prompt), *reinterpret_cast<winrt::Microsoft::Windows::AI::ContentModeration::ContentFilterOptions const*>(&contentFilterOptions)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetUsablePromptLength(void* prompt, uint64_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint64_t>(this->shim().GetUsablePromptLength(*reinterpret_cast<hstring const*>(&prompt)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetUsablePromptLength2(void* context, void* prompt, uint64_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint64_t>(this->shim().GetUsablePromptLength(*reinterpret_cast<winrt::Microsoft::Windows::AI::Generative::LanguageModelContext const*>(&context), *reinterpret_cast<hstring const*>(&prompt)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetVectorSpaceId(winrt::guid* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::guid>(this->shim().GetVectorSpaceId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateContext(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::AI::Generative::LanguageModelContext>(this->shim().CreateContext());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateContext2(void* systemPrompt, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::AI::Generative::LanguageModelContext>(this->shim().CreateContext(*reinterpret_cast<hstring const*>(&systemPrompt)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateContext3(void* systemPrompt, void* contentFilterOptions, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::AI::Generative::LanguageModelContext>(this->shim().CreateContext(*reinterpret_cast<hstring const*>(&systemPrompt), *reinterpret_cast<winrt::Microsoft::Windows::AI::ContentModeration::ContentFilterOptions const*>(&contentFilterOptions)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::Generative::ILanguageModelContext> : produce_base<D, winrt::Microsoft::Windows::AI::Generative::ILanguageModelContext>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::Generative::ILanguageModelEmbeddingVectorResult> : produce_base<D, winrt::Microsoft::Windows::AI::Generative::ILanguageModelEmbeddingVectorResult>
    {
        int32_t __stdcall get_EmbeddingVectors(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::SemanticSearch::EmbeddingVector>>(this->shim().EmbeddingVectors());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Status(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::AI::Generative::LanguageModelResponseStatus>(this->shim().Status());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExtendedError(winrt::hresult* value) noexcept final try
        {
            zero_abi<winrt::hresult>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::hresult>(this->shim().ExtendedError());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::Generative::ILanguageModelOptions> : produce_base<D, winrt::Microsoft::Windows::AI::Generative::ILanguageModelOptions>
    {
        int32_t __stdcall get_Temperature(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Temperature());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Temperature(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Temperature(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TopP(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().TopP());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TopP(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TopP(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TopK(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().TopK());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TopK(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TopK(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ContentFilterOptions(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::AI::ContentModeration::ContentFilterOptions>(this->shim().ContentFilterOptions());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ContentFilterOptions(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContentFilterOptions(*reinterpret_cast<winrt::Microsoft::Windows::AI::ContentModeration::ContentFilterOptions const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::Generative::ILanguageModelResponseResult> : produce_base<D, winrt::Microsoft::Windows::AI::Generative::ILanguageModelResponseResult>
    {
        int32_t __stdcall get_Text(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Text());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Status(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::AI::Generative::LanguageModelResponseStatus>(this->shim().Status());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExtendedError(winrt::hresult* value) noexcept final try
        {
            zero_abi<winrt::hresult>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::hresult>(this->shim().ExtendedError());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::Generative::ILanguageModelStatics> : produce_base<D, winrt::Microsoft::Windows::AI::Generative::ILanguageModelStatics>
    {
        int32_t __stdcall GetReadyState(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::AI::AIFeatureReadyState>(this->shim().GetReadyState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall EnsureReadyAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::AIFeatureReadyResult, double>>(this->shim().EnsureReadyAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Windows::AI::Generative::LanguageModel>>(this->shim().CreateAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::AI::Generative
{
    inline auto ImageDescriptionGenerator::GetReadyState()
    {
        return impl::call_factory_cast<winrt::Microsoft::Windows::AI::AIFeatureReadyState(*)(IImageDescriptionGeneratorStatics const&), ImageDescriptionGenerator, IImageDescriptionGeneratorStatics>([](IImageDescriptionGeneratorStatics const& f) { return f.GetReadyState(); });
    }
    inline auto ImageDescriptionGenerator::EnsureReadyAsync()
    {
        return impl::call_factory_cast<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::AIFeatureReadyResult, double>(*)(IImageDescriptionGeneratorStatics const&), ImageDescriptionGenerator, IImageDescriptionGeneratorStatics>([](IImageDescriptionGeneratorStatics const& f) { return f.EnsureReadyAsync(); });
    }
    inline auto ImageDescriptionGenerator::CreateAsync()
    {
        return impl::call_factory_cast<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Windows::AI::Generative::ImageDescriptionGenerator>(*)(IImageDescriptionGeneratorStatics const&), ImageDescriptionGenerator, IImageDescriptionGeneratorStatics>([](IImageDescriptionGeneratorStatics const& f) { return f.CreateAsync(); });
    }
    inline auto LanguageModel::GetReadyState()
    {
        return impl::call_factory_cast<winrt::Microsoft::Windows::AI::AIFeatureReadyState(*)(ILanguageModelStatics const&), LanguageModel, ILanguageModelStatics>([](ILanguageModelStatics const& f) { return f.GetReadyState(); });
    }
    inline auto LanguageModel::EnsureReadyAsync()
    {
        return impl::call_factory_cast<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::AIFeatureReadyResult, double>(*)(ILanguageModelStatics const&), LanguageModel, ILanguageModelStatics>([](ILanguageModelStatics const& f) { return f.EnsureReadyAsync(); });
    }
    inline auto LanguageModel::CreateAsync()
    {
        return impl::call_factory_cast<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Windows::AI::Generative::LanguageModel>(*)(ILanguageModelStatics const&), LanguageModel, ILanguageModelStatics>([](ILanguageModelStatics const& f) { return f.CreateAsync(); });
    }
    inline LanguageModelOptions::LanguageModelOptions() :
        LanguageModelOptions(impl::call_factory_cast<LanguageModelOptions(*)(winrt::Windows::Foundation::IActivationFactory const&), LanguageModelOptions>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<LanguageModelOptions>(); }))
    {
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::AI::Generative::IImageDescriptionGenerator> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::Generative::IImageDescriptionGeneratorStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::Generative::IImageDescriptionResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::Generative::ILanguageModel> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::Generative::ILanguageModelContext> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::Generative::ILanguageModelEmbeddingVectorResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::Generative::ILanguageModelOptions> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::Generative::ILanguageModelResponseResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::Generative::ILanguageModelStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::Generative::ImageDescriptionGenerator> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::Generative::ImageDescriptionResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::Generative::LanguageModel> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::Generative::LanguageModelContext> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::Generative::LanguageModelEmbeddingVectorResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::Generative::LanguageModelOptions> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::Generative::LanguageModelResponseResult> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
