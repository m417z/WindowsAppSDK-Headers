// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_Windows_Vision_H
#define WINRT_Microsoft_Windows_Vision_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.240405.15"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.240405.15"
#include "winrt/impl/Microsoft.Graphics.Imaging.2.h"
#include "winrt/impl/Microsoft.Windows.AI.2.h"
#include "winrt/impl/Microsoft.Windows.Workloads.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Graphics.2.h"
#include "winrt/impl/Microsoft.Windows.Vision.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Windows_Vision_IRecognizedLine<D>::Text() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::IRecognizedLine)->get_Text(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_IRecognizedLine<D>::BoundingBox() const
    {
        winrt::Microsoft::Windows::Vision::BoundingBox value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::IRecognizedLine)->get_BoundingBox(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_IRecognizedLine<D>::Words() const
    {
        uint32_t value_impl_size{};
        void** value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::IRecognizedLine)->get_Words(&value_impl_size, &value));
        return com_array<winrt::Microsoft::Windows::Vision::RecognizedWord>{ value, value_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_IRecognizedLine<D>::Style() const
    {
        winrt::Microsoft::Windows::Vision::RecognizedLineStyle value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::IRecognizedLine)->get_Style(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_IRecognizedText<D>::Lines() const
    {
        uint32_t value_impl_size{};
        void** value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::IRecognizedText)->get_Lines(&value_impl_size, &value));
        return com_array<winrt::Microsoft::Windows::Vision::RecognizedLine>{ value, value_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_IRecognizedText<D>::ImageAngle() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::IRecognizedText)->get_ImageAngle(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_IRecognizedWord<D>::Text() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::IRecognizedWord)->get_Text(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_IRecognizedWord<D>::BoundingBox() const
    {
        winrt::Microsoft::Windows::Vision::BoundingBox value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::IRecognizedWord)->get_BoundingBox(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_IRecognizedWord<D>::Confidence() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::IRecognizedWord)->get_Confidence(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_ITextRecognizer<D>::RecognizeTextFromImageAsync(winrt::Microsoft::Graphics::Imaging::ImageBuffer const& imageBuffer, winrt::Microsoft::Windows::Vision::TextRecognizerOptions const& options) const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::ITextRecognizer)->RecognizeTextFromImageAsync(*(void**)(&imageBuffer), *(void**)(&options), &operation));
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Windows::Vision::RecognizedText>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_ITextRecognizer<D>::RecognizeTextFromImage(winrt::Microsoft::Graphics::Imaging::ImageBuffer const& imageBuffer, winrt::Microsoft::Windows::Vision::TextRecognizerOptions const& options) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::ITextRecognizer)->RecognizeTextFromImage(*(void**)(&imageBuffer), *(void**)(&options), &result));
        return winrt::Microsoft::Windows::Vision::RecognizedText{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_ITextRecognizer<D>::RecognizeTextFromImageAsync(winrt::Microsoft::Graphics::Imaging::ImageBuffer const& imageBuffer, winrt::Microsoft::Windows::Vision::TextRecognizerOptions const& options, winrt::Microsoft::Windows::Workloads::WorkloadPriority const& priority) const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::ITextRecognizer)->RecognizeTextFromImageAsync2(*(void**)(&imageBuffer), *(void**)(&options), static_cast<int32_t>(priority), &operation));
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Windows::Vision::RecognizedText>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_ITextRecognizer<D>::RecognizeTextFromImage(winrt::Microsoft::Graphics::Imaging::ImageBuffer const& imageBuffer, winrt::Microsoft::Windows::Vision::TextRecognizerOptions const& options, winrt::Microsoft::Windows::Workloads::WorkloadPriority const& priority) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::ITextRecognizer)->RecognizeTextFromImage2(*(void**)(&imageBuffer), *(void**)(&options), static_cast<int32_t>(priority), &result));
        return winrt::Microsoft::Windows::Vision::RecognizedText{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_ITextRecognizerOptions<D>::OrientationDetection() const
    {
        winrt::Microsoft::Windows::Vision::OrientationDetectionOptions value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::ITextRecognizerOptions)->get_OrientationDetection(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_ITextRecognizerOptions<D>::OrientationDetection(winrt::Microsoft::Windows::Vision::OrientationDetectionOptions const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::ITextRecognizerOptions)->put_OrientationDetection(static_cast<int32_t>(value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_ITextRecognizerOptions<D>::MaxAnalysisSize() const
    {
        winrt::Windows::Graphics::SizeInt32 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::ITextRecognizerOptions)->get_MaxAnalysisSize(put_abi(value)));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_ITextRecognizerOptions<D>::MaxAnalysisSize(winrt::Windows::Graphics::SizeInt32 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::ITextRecognizerOptions)->put_MaxAnalysisSize(impl::bind_in(value)));
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_ITextRecognizerOptions<D>::MaxLineCount() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::ITextRecognizerOptions)->get_MaxLineCount(&value));
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_ITextRecognizerOptions<D>::MaxLineCount(uint32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::ITextRecognizerOptions)->put_MaxLineCount(value));
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_ITextRecognizerStatics<D>::GetReadyState() const
    {
        winrt::Microsoft::Windows::AI::AIFeatureReadyState result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::ITextRecognizerStatics)->GetReadyState(reinterpret_cast<int32_t*>(&result)));
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_ITextRecognizerStatics<D>::EnsureReadyAsync() const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::ITextRecognizerStatics)->EnsureReadyAsync(&operation));
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::AIFeatureReadyResult, double>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_Vision_ITextRecognizerStatics<D>::CreateAsync() const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::Vision::ITextRecognizerStatics)->CreateAsync(&operation));
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Windows::Vision::TextRecognizer>{ operation, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Vision::IRecognizedLine> : produce_base<D, winrt::Microsoft::Windows::Vision::IRecognizedLine>
    {
        int32_t __stdcall get_Text(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Text());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BoundingBox(struct struct_Microsoft_Windows_Vision_BoundingBox* value) noexcept final try
        {
            zero_abi<winrt::Microsoft::Windows::Vision::BoundingBox>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Vision::BoundingBox>(this->shim().BoundingBox());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Words(uint32_t* __valueSize, void*** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueSize, *value) = detach_abi(this->shim().Words());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Style(struct struct_Microsoft_Windows_Vision_RecognizedLineStyle* value) noexcept final try
        {
            zero_abi<winrt::Microsoft::Windows::Vision::RecognizedLineStyle>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Vision::RecognizedLineStyle>(this->shim().Style());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Vision::IRecognizedText> : produce_base<D, winrt::Microsoft::Windows::Vision::IRecognizedText>
    {
        int32_t __stdcall get_Lines(uint32_t* __valueSize, void*** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            std::tie(*__valueSize, *value) = detach_abi(this->shim().Lines());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ImageAngle(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().ImageAngle());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Vision::IRecognizedWord> : produce_base<D, winrt::Microsoft::Windows::Vision::IRecognizedWord>
    {
        int32_t __stdcall get_Text(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Text());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BoundingBox(struct struct_Microsoft_Windows_Vision_BoundingBox* value) noexcept final try
        {
            zero_abi<winrt::Microsoft::Windows::Vision::BoundingBox>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Vision::BoundingBox>(this->shim().BoundingBox());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Confidence(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Confidence());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Vision::ITextRecognizer> : produce_base<D, winrt::Microsoft::Windows::Vision::ITextRecognizer>
    {
        int32_t __stdcall RecognizeTextFromImageAsync(void* imageBuffer, void* options, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Windows::Vision::RecognizedText>>(this->shim().RecognizeTextFromImageAsync(*reinterpret_cast<winrt::Microsoft::Graphics::Imaging::ImageBuffer const*>(&imageBuffer), *reinterpret_cast<winrt::Microsoft::Windows::Vision::TextRecognizerOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RecognizeTextFromImage(void* imageBuffer, void* options, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Vision::RecognizedText>(this->shim().RecognizeTextFromImage(*reinterpret_cast<winrt::Microsoft::Graphics::Imaging::ImageBuffer const*>(&imageBuffer), *reinterpret_cast<winrt::Microsoft::Windows::Vision::TextRecognizerOptions const*>(&options)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RecognizeTextFromImageAsync2(void* imageBuffer, void* options, int32_t priority, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Windows::Vision::RecognizedText>>(this->shim().RecognizeTextFromImageAsync(*reinterpret_cast<winrt::Microsoft::Graphics::Imaging::ImageBuffer const*>(&imageBuffer), *reinterpret_cast<winrt::Microsoft::Windows::Vision::TextRecognizerOptions const*>(&options), *reinterpret_cast<winrt::Microsoft::Windows::Workloads::WorkloadPriority const*>(&priority)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RecognizeTextFromImage2(void* imageBuffer, void* options, int32_t priority, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::Vision::RecognizedText>(this->shim().RecognizeTextFromImage(*reinterpret_cast<winrt::Microsoft::Graphics::Imaging::ImageBuffer const*>(&imageBuffer), *reinterpret_cast<winrt::Microsoft::Windows::Vision::TextRecognizerOptions const*>(&options), *reinterpret_cast<winrt::Microsoft::Windows::Workloads::WorkloadPriority const*>(&priority)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Vision::ITextRecognizerOptions> : produce_base<D, winrt::Microsoft::Windows::Vision::ITextRecognizerOptions>
    {
        int32_t __stdcall get_OrientationDetection(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::Vision::OrientationDetectionOptions>(this->shim().OrientationDetection());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_OrientationDetection(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OrientationDetection(*reinterpret_cast<winrt::Microsoft::Windows::Vision::OrientationDetectionOptions const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxAnalysisSize(struct struct_Windows_Graphics_SizeInt32* value) noexcept final try
        {
            zero_abi<winrt::Windows::Graphics::SizeInt32>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Graphics::SizeInt32>(this->shim().MaxAnalysisSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaxAnalysisSize(struct struct_Windows_Graphics_SizeInt32 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxAnalysisSize(*reinterpret_cast<winrt::Windows::Graphics::SizeInt32 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MaxLineCount(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().MaxLineCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MaxLineCount(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MaxLineCount(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Vision::ITextRecognizerStatics> : produce_base<D, winrt::Microsoft::Windows::Vision::ITextRecognizerStatics>
    {
        int32_t __stdcall GetReadyState(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::AI::AIFeatureReadyState>(this->shim().GetReadyState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall EnsureReadyAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::AIFeatureReadyResult, double>>(this->shim().EnsureReadyAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Windows::Vision::TextRecognizer>>(this->shim().CreateAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Vision
{
    inline auto TextRecognizer::GetReadyState()
    {
        return impl::call_factory_cast<winrt::Microsoft::Windows::AI::AIFeatureReadyState(*)(ITextRecognizerStatics const&), TextRecognizer, ITextRecognizerStatics>([](ITextRecognizerStatics const& f) { return f.GetReadyState(); });
    }
    inline auto TextRecognizer::EnsureReadyAsync()
    {
        return impl::call_factory_cast<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::AIFeatureReadyResult, double>(*)(ITextRecognizerStatics const&), TextRecognizer, ITextRecognizerStatics>([](ITextRecognizerStatics const& f) { return f.EnsureReadyAsync(); });
    }
    inline auto TextRecognizer::CreateAsync()
    {
        return impl::call_factory_cast<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Windows::Vision::TextRecognizer>(*)(ITextRecognizerStatics const&), TextRecognizer, ITextRecognizerStatics>([](ITextRecognizerStatics const& f) { return f.CreateAsync(); });
    }
    inline TextRecognizerOptions::TextRecognizerOptions() :
        TextRecognizerOptions(impl::call_factory_cast<TextRecognizerOptions(*)(winrt::Windows::Foundation::IActivationFactory const&), TextRecognizerOptions>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<TextRecognizerOptions>(); }))
    {
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::Vision::IRecognizedLine> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Vision::IRecognizedText> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Vision::IRecognizedWord> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Vision::ITextRecognizer> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Vision::ITextRecognizerOptions> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Vision::ITextRecognizerStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Vision::RecognizedLine> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Vision::RecognizedText> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Vision::RecognizedWord> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Vision::TextRecognizer> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Vision::TextRecognizerOptions> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
