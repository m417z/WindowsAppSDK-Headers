// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_VisionInternal_0_H
#define WINRT_Microsoft_Windows_VisionInternal_0_H
WINRT_EXPORT namespace winrt::Microsoft::Windows::PrivateCommon
{
    struct ImageBufferResource;
    struct ImageBufferView;
    struct ImageBufferViewData;
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Vision
{
    struct ScreenRegionBoundingBox;
    enum class ScreenRegionLabel : int32_t;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct Point;
}
WINRT_EXPORT namespace winrt::Windows::Graphics
{
    struct SizeInt32;
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::VisionInternal
{
    enum class DetectedLineStyle : int32_t
    {
        Handwritten = 0,
        Other = 1,
    };
    enum class OrientationDetectionOptions : int32_t
    {
        None = 0,
        DetectOrientation = 1,
    };
    enum class ScreenRegionLabel : int32_t
    {
        Text = 0,
        Image = 1,
        Table = 2,
        Container = 3,
        Menu = 4,
        ToolBar = 5,
        AddressBar = 6,
        Toolpane = 7,
        TabBar = 8,
        TitleBar = 9,
    };
    struct IRecognizedTextInternal;
    struct IScreenRegionDetectorSession;
    struct IScreenRegionDetectorSession2;
    struct IScreenRegionDetectorSession3;
    struct IScreenRegionDetectorSession4;
    struct ITextRecognizerSession;
    struct ITextRecognizerSession2;
    struct ITextRecognizerSession3;
    struct BoundingBox;
    struct LineInternal;
    struct RecognizedLineStyle;
    struct RecognizedTextInternal;
    struct ScreenRegionBoundingBox;
    struct ScreenRegionInternal;
    struct ScreenRegionInternal4;
    struct TextRecognizerOptionsInternal;
    struct WordInternal;
    struct ScreenRegionDetectorSessionContract;
    struct TextRecognitionSessionContract;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::IRecognizedTextInternal>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession3>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession4>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession3>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::DetectedLineStyle>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::OrientationDetectionOptions>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::ScreenRegionLabel>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::BoundingBox>{ using type = struct_category<winrt::Windows::Foundation::Point, winrt::Windows::Foundation::Point, winrt::Windows::Foundation::Point, winrt::Windows::Foundation::Point>; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::LineInternal>{ using type = struct_category<winrt::Microsoft::Windows::VisionInternal::BoundingBox, winrt::Microsoft::Windows::VisionInternal::RecognizedLineStyle, uint32_t>; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::RecognizedLineStyle>{ using type = struct_category<float, winrt::Microsoft::Windows::VisionInternal::DetectedLineStyle>; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::RecognizedTextInternal>{ using type = struct_category<float, uint32_t>; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::ScreenRegionBoundingBox>{ using type = struct_category<uint32_t, uint32_t, uint32_t, uint32_t>; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::ScreenRegionInternal>{ using type = struct_category<winrt::Microsoft::Windows::Vision::ScreenRegionBoundingBox, winrt::Microsoft::Windows::Vision::ScreenRegionLabel, float>; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::ScreenRegionInternal4>{ using type = struct_category<winrt::Microsoft::Windows::VisionInternal::ScreenRegionBoundingBox, winrt::Microsoft::Windows::VisionInternal::ScreenRegionLabel, float>; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::TextRecognizerOptionsInternal>{ using type = struct_category<winrt::Microsoft::Windows::VisionInternal::OrientationDetectionOptions, winrt::Windows::Graphics::SizeInt32, uint32_t>; };
    template <> struct category<winrt::Microsoft::Windows::VisionInternal::WordInternal>{ using type = struct_category<winrt::Microsoft::Windows::VisionInternal::BoundingBox, float>; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::DetectedLineStyle> = L"Microsoft.Windows.VisionInternal.DetectedLineStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::OrientationDetectionOptions> = L"Microsoft.Windows.VisionInternal.OrientationDetectionOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::ScreenRegionLabel> = L"Microsoft.Windows.VisionInternal.ScreenRegionLabel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::BoundingBox> = L"Microsoft.Windows.VisionInternal.BoundingBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::LineInternal> = L"Microsoft.Windows.VisionInternal.LineInternal";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::RecognizedLineStyle> = L"Microsoft.Windows.VisionInternal.RecognizedLineStyle";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::RecognizedTextInternal> = L"Microsoft.Windows.VisionInternal.RecognizedTextInternal";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::ScreenRegionBoundingBox> = L"Microsoft.Windows.VisionInternal.ScreenRegionBoundingBox";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::ScreenRegionInternal> = L"Microsoft.Windows.VisionInternal.ScreenRegionInternal";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::ScreenRegionInternal4> = L"Microsoft.Windows.VisionInternal.ScreenRegionInternal4";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::TextRecognizerOptionsInternal> = L"Microsoft.Windows.VisionInternal.TextRecognizerOptionsInternal";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::WordInternal> = L"Microsoft.Windows.VisionInternal.WordInternal";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::IRecognizedTextInternal> = L"Microsoft.Windows.VisionInternal.IRecognizedTextInternal";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession> = L"Microsoft.Windows.VisionInternal.IScreenRegionDetectorSession";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession2> = L"Microsoft.Windows.VisionInternal.IScreenRegionDetectorSession2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession3> = L"Microsoft.Windows.VisionInternal.IScreenRegionDetectorSession3";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession4> = L"Microsoft.Windows.VisionInternal.IScreenRegionDetectorSession4";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession> = L"Microsoft.Windows.VisionInternal.ITextRecognizerSession";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession2> = L"Microsoft.Windows.VisionInternal.ITextRecognizerSession2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession3> = L"Microsoft.Windows.VisionInternal.ITextRecognizerSession3";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::ScreenRegionDetectorSessionContract> = L"Microsoft.Windows.VisionInternal.ScreenRegionDetectorSessionContract";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::VisionInternal::TextRecognitionSessionContract> = L"Microsoft.Windows.VisionInternal.TextRecognitionSessionContract";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::VisionInternal::IRecognizedTextInternal>{ 0x84F250E5,0x6F64,0x5C73,{ 0xB2,0x75,0xBC,0x51,0x89,0x14,0x9D,0xC7 } }; // 84F250E5-6F64-5C73-B275-BC5189149DC7
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession>{ 0x07234F42,0x5583,0x5654,{ 0xBA,0x13,0xDF,0xED,0x32,0xF4,0x15,0xD0 } }; // 07234F42-5583-5654-BA13-DFED32F415D0
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession2>{ 0x5131DE05,0x6A19,0x41F4,{ 0x8D,0xDE,0xE7,0x67,0x73,0xAD,0xE1,0x87 } }; // 5131DE05-6A19-41F4-8DDE-E76773ADE187
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession3>{ 0x97D64954,0x8CCB,0x56A3,{ 0x86,0x9D,0xE7,0x62,0xC2,0x69,0x66,0xF7 } }; // 97D64954-8CCB-56A3-869D-E762C26966F7
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession4>{ 0xEA5C3523,0x25FA,0x5E9D,{ 0xB0,0xAF,0x9A,0x68,0x1A,0x92,0x05,0xEC } }; // EA5C3523-25FA-5E9D-B0AF-9A681A9205EC
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession>{ 0x36AE1E63,0x2A32,0x53B4,{ 0x9D,0x0D,0xA5,0xB7,0xA3,0x2F,0x80,0xB0 } }; // 36AE1E63-2A32-53B4-9D0D-A5B7A32F80B0
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession2>{ 0x2C94B208,0x5641,0x4240,{ 0xB8,0x1D,0x13,0x95,0x7F,0xC4,0x1C,0xB8 } }; // 2C94B208-5641-4240-B81D-13957FC41CB8
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession3>{ 0x92007775,0x0015,0x53DA,{ 0xA4,0x8C,0x47,0xFA,0xDD,0xDC,0x07,0x94 } }; // 92007775-0015-53DA-A48C-47FADDDC0794
    template <> struct abi<winrt::Microsoft::Windows::VisionInternal::IRecognizedTextInternal>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetDataLength(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall GetData(uint32_t, uint8_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetScreenRegionsAsync(struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetScreenRegionsAsync(struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData, uint32_t, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession3>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetScreenRegions(void*, uint32_t, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession4>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetScreenRegions4(void*, uint32_t, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall RecognizeTextFromImageAsync(struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData, struct struct_Microsoft_Windows_VisionInternal_TextRecognizerOptionsInternal, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall RecognizeTextFromImageAsync(struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData, struct struct_Microsoft_Windows_VisionInternal_TextRecognizerOptionsInternal, uint32_t, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession3>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall RecognizeTextFromImage(void*, struct struct_Microsoft_Windows_VisionInternal_TextRecognizerOptionsInternal, uint32_t, uint32_t, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_VisionInternal_IRecognizedTextInternal
    {
        auto GetDataLength() const;
        auto GetData(array_view<uint8_t> buffer) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::VisionInternal::IRecognizedTextInternal>
    {
        template <typename D> using type = consume_Microsoft_Windows_VisionInternal_IRecognizedTextInternal<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_VisionInternal_IScreenRegionDetectorSession
    {
        auto GetScreenRegionsAsync(winrt::Microsoft::Windows::PrivateCommon::ImageBufferView const& inputImageBufferView, winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData const& inputImageBufferViewData) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession>
    {
        template <typename D> using type = consume_Microsoft_Windows_VisionInternal_IScreenRegionDetectorSession<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_VisionInternal_IScreenRegionDetectorSession2
    {
        auto GetScreenRegionsAsync(winrt::Microsoft::Windows::PrivateCommon::ImageBufferView const& inputImageBufferView, winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData const& inputImageBufferViewData, uint32_t priority, uint32_t frequency) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession2>
    {
        template <typename D> using type = consume_Microsoft_Windows_VisionInternal_IScreenRegionDetectorSession2<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_VisionInternal_IScreenRegionDetectorSession3
    {
        auto GetScreenRegions(winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& inputImageBufferResource, uint32_t priority, uint32_t frequency) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession3>
    {
        template <typename D> using type = consume_Microsoft_Windows_VisionInternal_IScreenRegionDetectorSession3<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_VisionInternal_IScreenRegionDetectorSession4
    {
        auto GetScreenRegions4(winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& inputImageBufferResource, uint32_t priority, uint32_t frequency) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession4>
    {
        template <typename D> using type = consume_Microsoft_Windows_VisionInternal_IScreenRegionDetectorSession4<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_VisionInternal_ITextRecognizerSession
    {
        auto RecognizeTextFromImageAsync(winrt::Microsoft::Windows::PrivateCommon::ImageBufferView const& imageBufferView, winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData const& imageBufferViewData, winrt::Microsoft::Windows::VisionInternal::TextRecognizerOptionsInternal const& options) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession>
    {
        template <typename D> using type = consume_Microsoft_Windows_VisionInternal_ITextRecognizerSession<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_VisionInternal_ITextRecognizerSession2
    {
        auto RecognizeTextFromImageAsync(winrt::Microsoft::Windows::PrivateCommon::ImageBufferView const& imageBufferView, winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData const& imageBufferViewData, winrt::Microsoft::Windows::VisionInternal::TextRecognizerOptionsInternal const& options, uint32_t priority, uint32_t frequency) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession2>
    {
        template <typename D> using type = consume_Microsoft_Windows_VisionInternal_ITextRecognizerSession2<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_VisionInternal_ITextRecognizerSession3
    {
        auto RecognizeTextFromImage(winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& imageBufferResource, winrt::Microsoft::Windows::VisionInternal::TextRecognizerOptionsInternal const& options, uint32_t priority, uint32_t frequency) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession3>
    {
        template <typename D> using type = consume_Microsoft_Windows_VisionInternal_ITextRecognizerSession3<D>;
    };
    struct struct_Microsoft_Windows_VisionInternal_BoundingBox
    {
        winrt::Windows::Foundation::Point BottomLeft;
        winrt::Windows::Foundation::Point BottomRight;
        winrt::Windows::Foundation::Point TopLeft;
        winrt::Windows::Foundation::Point TopRight;
    };
    template <> struct abi<Microsoft::Windows::VisionInternal::BoundingBox>
    {
        using type = struct_Microsoft_Windows_VisionInternal_BoundingBox;
    };
    struct struct_Microsoft_Windows_VisionInternal_LineInternal
    {
        struct{ winrt::Windows::Foundation::Point BottomLeft; winrt::Windows::Foundation::Point BottomRight; winrt::Windows::Foundation::Point TopLeft; winrt::Windows::Foundation::Point TopRight; } BoundingBox;
        struct{ float Confidence; int32_t Name; } Style;
        uint32_t WordCount;
    };
    template <> struct abi<Microsoft::Windows::VisionInternal::LineInternal>
    {
        using type = struct_Microsoft_Windows_VisionInternal_LineInternal;
    };
    struct struct_Microsoft_Windows_VisionInternal_RecognizedLineStyle
    {
        float Confidence;
        int32_t Name;
    };
    template <> struct abi<Microsoft::Windows::VisionInternal::RecognizedLineStyle>
    {
        using type = struct_Microsoft_Windows_VisionInternal_RecognizedLineStyle;
    };
    struct struct_Microsoft_Windows_VisionInternal_RecognizedTextInternal
    {
        float ImageAngle;
        uint32_t LineCount;
    };
    template <> struct abi<Microsoft::Windows::VisionInternal::RecognizedTextInternal>
    {
        using type = struct_Microsoft_Windows_VisionInternal_RecognizedTextInternal;
    };
    struct struct_Microsoft_Windows_VisionInternal_ScreenRegionBoundingBox
    {
        uint32_t Left;
        uint32_t Top;
        uint32_t Right;
        uint32_t Bottom;
    };
    template <> struct abi<Microsoft::Windows::VisionInternal::ScreenRegionBoundingBox>
    {
        using type = struct_Microsoft_Windows_VisionInternal_ScreenRegionBoundingBox;
    };
    struct struct_Microsoft_Windows_VisionInternal_ScreenRegionInternal
    {
        struct{ uint32_t Left; uint32_t Top; uint32_t Right; uint32_t Bottom; } BoundingBox;
        int32_t Label;
        float Score;
    };
    template <> struct abi<Microsoft::Windows::VisionInternal::ScreenRegionInternal>
    {
        using type = struct_Microsoft_Windows_VisionInternal_ScreenRegionInternal;
    };
    struct struct_Microsoft_Windows_VisionInternal_ScreenRegionInternal4
    {
        struct{ uint32_t Left; uint32_t Top; uint32_t Right; uint32_t Bottom; } BoundingBox;
        int32_t Label;
        float Score;
    };
    template <> struct abi<Microsoft::Windows::VisionInternal::ScreenRegionInternal4>
    {
        using type = struct_Microsoft_Windows_VisionInternal_ScreenRegionInternal4;
    };
    struct struct_Microsoft_Windows_VisionInternal_TextRecognizerOptionsInternal
    {
        int32_t OrientationDetection;
        struct{ int32_t Width; int32_t Height; } MaxAnalysisSize;
        uint32_t MaxLineCount;
    };
    template <> struct abi<Microsoft::Windows::VisionInternal::TextRecognizerOptionsInternal>
    {
        using type = struct_Microsoft_Windows_VisionInternal_TextRecognizerOptionsInternal;
    };
    struct struct_Microsoft_Windows_VisionInternal_WordInternal
    {
        struct{ winrt::Windows::Foundation::Point BottomLeft; winrt::Windows::Foundation::Point BottomRight; winrt::Windows::Foundation::Point TopLeft; winrt::Windows::Foundation::Point TopRight; } BoundingBox;
        float Confidence;
    };
    template <> struct abi<Microsoft::Windows::VisionInternal::WordInternal>
    {
        using type = struct_Microsoft_Windows_VisionInternal_WordInternal;
    };
}
#endif
