// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_winrt_winmd_2_H
#define WINRT_winrt_winmd_2_H
#include "winrt/impl/Windows.Foundation.Collections.1.h"
#include "winrt/impl/winrt_winmd.1.h"
WINRT_EXPORT namespace winrt::winrt_winmd
{
    struct WINRT_IMPL_EMPTY_BASES Constant : winrt::winrt_winmd::IConstant
    {
        Constant(std::nullptr_t) noexcept {}
        Constant(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IConstant(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES CustomAttribute : winrt::winrt_winmd::ICustomAttribute
    {
        CustomAttribute(std::nullptr_t) noexcept {}
        CustomAttribute(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::ICustomAttribute(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES CustomAttributeSig : winrt::winrt_winmd::ICustomAttributeSig
    {
        CustomAttributeSig(std::nullptr_t) noexcept {}
        CustomAttributeSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::ICustomAttributeSig(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ElemSig : winrt::winrt_winmd::IElemSig
    {
        ElemSig(std::nullptr_t) noexcept {}
        ElemSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IElemSig(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES Event : winrt::winrt_winmd::IEvent
    {
        Event(std::nullptr_t) noexcept {}
        Event(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IEvent(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES Field : winrt::winrt_winmd::IField
    {
        Field(std::nullptr_t) noexcept {}
        Field(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IField(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES FieldSig : winrt::winrt_winmd::IFieldSig
    {
        FieldSig(std::nullptr_t) noexcept {}
        FieldSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IFieldSig(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES FixedArgSig : winrt::winrt_winmd::IFixedArgSig
    {
        FixedArgSig(std::nullptr_t) noexcept {}
        FixedArgSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IFixedArgSig(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES GenericTypeInstSig : winrt::winrt_winmd::IGenericTypeInstSig
    {
        GenericTypeInstSig(std::nullptr_t) noexcept {}
        GenericTypeInstSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IGenericTypeInstSig(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES InterfaceImpl : winrt::winrt_winmd::IInterfaceImpl
    {
        InterfaceImpl(std::nullptr_t) noexcept {}
        InterfaceImpl(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IInterfaceImpl(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES MethodAttributes : winrt::winrt_winmd::IMethodAttributes
    {
        MethodAttributes(std::nullptr_t) noexcept {}
        MethodAttributes(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IMethodAttributes(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES MethodDef : winrt::winrt_winmd::IMethodDef
    {
        MethodDef(std::nullptr_t) noexcept {}
        MethodDef(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IMethodDef(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES MethodDefSig : winrt::winrt_winmd::IMethodDefSig
    {
        MethodDefSig(std::nullptr_t) noexcept {}
        MethodDefSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IMethodDefSig(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES MethodSemantics : winrt::winrt_winmd::IMethodSemantics
    {
        MethodSemantics(std::nullptr_t) noexcept {}
        MethodSemantics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IMethodSemantics(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES MethodSemanticsAttributes : winrt::winrt_winmd::IMethodSemanticsAttributes
    {
        MethodSemanticsAttributes(std::nullptr_t) noexcept {}
        MethodSemanticsAttributes(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IMethodSemanticsAttributes(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES NamedArgSig : winrt::winrt_winmd::INamedArgSig
    {
        NamedArgSig(std::nullptr_t) noexcept {}
        NamedArgSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::INamedArgSig(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES Namespace : winrt::winrt_winmd::INamespace
    {
        Namespace(std::nullptr_t) noexcept {}
        Namespace(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::INamespace(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES Param : winrt::winrt_winmd::IParam
    {
        Param(std::nullptr_t) noexcept {}
        Param(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IParam(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ParamAttributes : winrt::winrt_winmd::IParamAttributes
    {
        ParamAttributes(std::nullptr_t) noexcept {}
        ParamAttributes(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IParamAttributes(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ParamSig : winrt::winrt_winmd::IParamSig
    {
        ParamSig(std::nullptr_t) noexcept {}
        ParamSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IParamSig(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES Property : winrt::winrt_winmd::IProperty
    {
        Property(std::nullptr_t) noexcept {}
        Property(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IProperty(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES PropertySig : winrt::winrt_winmd::IPropertySig
    {
        PropertySig(std::nullptr_t) noexcept {}
        PropertySig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IPropertySig(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES RetTypeSig : winrt::winrt_winmd::IRetTypeSig
    {
        RetTypeSig(std::nullptr_t) noexcept {}
        RetTypeSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IRetTypeSig(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES Root : winrt::winrt_winmd::IRoot
    {
        Root(std::nullptr_t) noexcept {}
        Root(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::IRoot(ptr, take_ownership_from_abi) {}
        explicit Root(param::vector_view<hstring> const& fileNames);
    };
    struct WINRT_IMPL_EMPTY_BASES TypeDef : winrt::winrt_winmd::ITypeDef
    {
        TypeDef(std::nullptr_t) noexcept {}
        TypeDef(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::ITypeDef(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TypeRef : winrt::winrt_winmd::ITypeRef
    {
        TypeRef(std::nullptr_t) noexcept {}
        TypeRef(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::ITypeRef(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES TypeSig : winrt::winrt_winmd::ITypeSig
    {
        TypeSig(std::nullptr_t) noexcept {}
        TypeSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::winrt_winmd::ITypeSig(ptr, take_ownership_from_abi) {}
    };
}
#endif
