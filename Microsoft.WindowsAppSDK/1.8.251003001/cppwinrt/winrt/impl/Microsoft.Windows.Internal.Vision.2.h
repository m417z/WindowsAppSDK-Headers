// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_Internal_Vision_2_H
#define WINRT_Microsoft_Windows_Internal_Vision_2_H
#include "winrt/impl/Microsoft.Windows.PrivateCommon.1.h"
#include "winrt/impl/Microsoft.Windows.VisionInternal.1.h"
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Microsoft.Windows.Internal.Vision.1.h"
WINRT_EXPORT namespace winrt::Microsoft::Windows::Internal::Vision
{
    struct WINRT_IMPL_EMPTY_BASES RecognizedTextInternal : winrt::Microsoft::Windows::VisionInternal::IRecognizedTextInternal
    {
        RecognizedTextInternal(std::nullptr_t) noexcept {}
        RecognizedTextInternal(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::VisionInternal::IRecognizedTextInternal(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ScreenRegionDetectorSession : winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession4,
        impl::require<ScreenRegionDetectorSession, winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession, winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession2, winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession3, winrt::Microsoft::Windows::PrivateCommon::IAnchorInstance, winrt::Microsoft::Windows::PrivateCommon::IGetSessionHostProcessId, winrt::Microsoft::Windows::PrivateCommon::IModelManager, winrt::Microsoft::Windows::PrivateCommon::IModelManager2, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>
    {
        ScreenRegionDetectorSession(std::nullptr_t) noexcept {}
        ScreenRegionDetectorSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession4(ptr, take_ownership_from_abi) {}
        ScreenRegionDetectorSession();
        using impl::consume_t<ScreenRegionDetectorSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager>::GenerateCacheModel;
        using impl::consume_t<ScreenRegionDetectorSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>::GenerateCacheModel;
        using impl::consume_t<ScreenRegionDetectorSession, winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession>::GetScreenRegionsAsync;
        using impl::consume_t<ScreenRegionDetectorSession, winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession2>::GetScreenRegionsAsync;
    };
    struct WINRT_IMPL_EMPTY_BASES TextRecognizerSession : winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession3,
        impl::require<TextRecognizerSession, winrt::Microsoft::Windows::PrivateCommon::IAnchorInstance, winrt::Microsoft::Windows::PrivateCommon::IGetSessionHostProcessId, winrt::Microsoft::Windows::PrivateCommon::IModelManager, winrt::Microsoft::Windows::PrivateCommon::IModelManager2, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>
    {
        TextRecognizerSession(std::nullptr_t) noexcept {}
        TextRecognizerSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession3(ptr, take_ownership_from_abi) {}
        TextRecognizerSession();
        using impl::consume_t<TextRecognizerSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager>::GenerateCacheModel;
        using impl::consume_t<TextRecognizerSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>::GenerateCacheModel;
    };
}
#endif
