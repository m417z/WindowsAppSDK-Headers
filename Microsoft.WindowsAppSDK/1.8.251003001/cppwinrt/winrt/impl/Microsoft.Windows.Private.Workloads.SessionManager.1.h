// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_Private_Workloads_SessionManager_1_H
#define WINRT_Microsoft_Windows_Private_Workloads_SessionManager_1_H
#include "winrt/impl/Microsoft.Windows.Private.Workloads.SessionManager.0.h"
WINRT_EXPORT namespace winrt::Microsoft::Windows::Private::Workloads::SessionManager
{
    struct WINRT_IMPL_EMPTY_BASES ISessionManager :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISessionManager>
    {
        ISessionManager(std::nullptr_t = nullptr) noexcept {}
        ISessionManager(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ISessionManager2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISessionManager2>
    {
        ISessionManager2(std::nullptr_t = nullptr) noexcept {}
        ISessionManager2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ISessionManager3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISessionManager3>
    {
        ISessionManager3(std::nullptr_t = nullptr) noexcept {}
        ISessionManager3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ISessionManagerStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ISessionManagerStatics>
    {
        ISessionManagerStatics(std::nullptr_t = nullptr) noexcept {}
        ISessionManagerStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
}
#endif
