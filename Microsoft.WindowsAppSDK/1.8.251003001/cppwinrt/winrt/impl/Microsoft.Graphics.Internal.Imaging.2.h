// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Graphics_Internal_Imaging_2_H
#define WINRT_Microsoft_Graphics_Internal_Imaging_2_H
#include "winrt/impl/Microsoft.Graphics.ImagingInternal.1.h"
#include "winrt/impl/Microsoft.Graphics.ImagingInternal.ImageObjectRemover.1.h"
#include "winrt/impl/Microsoft.Windows.PrivateCommon.1.h"
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Microsoft.Graphics.Internal.Imaging.1.h"
WINRT_EXPORT namespace winrt::Microsoft::Graphics::Internal::Imaging
{
    struct WINRT_IMPL_EMPTY_BASES DepthMapCreatorSession : winrt::Microsoft::Graphics::ImagingInternal::IDepthMapCreatorSession2,
        impl::require<DepthMapCreatorSession, winrt::Microsoft::Windows::PrivateCommon::IAnchorInstance, winrt::Microsoft::Windows::PrivateCommon::IGetSessionHostProcessId, winrt::Microsoft::Windows::PrivateCommon::IModelManager, winrt::Microsoft::Windows::PrivateCommon::IModelManager2, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>
    {
        DepthMapCreatorSession(std::nullptr_t) noexcept {}
        DepthMapCreatorSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Graphics::ImagingInternal::IDepthMapCreatorSession2(ptr, take_ownership_from_abi) {}
        DepthMapCreatorSession();
        using impl::consume_t<DepthMapCreatorSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager>::GenerateCacheModel;
        using impl::consume_t<DepthMapCreatorSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>::GenerateCacheModel;
    };
    struct WINRT_IMPL_EMPTY_BASES ImageObjectExtractorSession : winrt::Microsoft::Graphics::ImagingInternal::IImageObjectExtractorSession,
        impl::require<ImageObjectExtractorSession, winrt::Microsoft::Windows::PrivateCommon::IAnchorInstance, winrt::Microsoft::Windows::PrivateCommon::IGetSessionHostProcessId, winrt::Microsoft::Windows::PrivateCommon::IModelManager, winrt::Microsoft::Windows::PrivateCommon::IModelManager2, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>
    {
        ImageObjectExtractorSession(std::nullptr_t) noexcept {}
        ImageObjectExtractorSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Graphics::ImagingInternal::IImageObjectExtractorSession(ptr, take_ownership_from_abi) {}
        ImageObjectExtractorSession();
        using impl::consume_t<ImageObjectExtractorSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager>::GenerateCacheModel;
        using impl::consume_t<ImageObjectExtractorSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>::GenerateCacheModel;
    };
    struct WINRT_IMPL_EMPTY_BASES ImageObjectRemoverSession : winrt::Microsoft::Graphics::ImagingInternal::ImageObjectRemover::IImageObjectRemoverSession,
        impl::require<ImageObjectRemoverSession, winrt::Microsoft::Windows::PrivateCommon::IAnchorInstance, winrt::Microsoft::Windows::PrivateCommon::IGetSessionHostProcessId, winrt::Microsoft::Windows::PrivateCommon::IModelManager, winrt::Microsoft::Windows::PrivateCommon::IModelManager2, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>
    {
        ImageObjectRemoverSession(std::nullptr_t) noexcept {}
        ImageObjectRemoverSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Graphics::ImagingInternal::ImageObjectRemover::IImageObjectRemoverSession(ptr, take_ownership_from_abi) {}
        ImageObjectRemoverSession();
        using impl::consume_t<ImageObjectRemoverSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager>::GenerateCacheModel;
        using impl::consume_t<ImageObjectRemoverSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>::GenerateCacheModel;
    };
    struct WINRT_IMPL_EMPTY_BASES ImageScalerSession : winrt::Microsoft::Graphics::ImagingInternal::IImageScalerSession,
        impl::require<ImageScalerSession, winrt::Microsoft::Windows::PrivateCommon::IAnchorInstance, winrt::Microsoft::Windows::PrivateCommon::IGetSessionHostProcessId, winrt::Microsoft::Windows::PrivateCommon::IModelManager, winrt::Microsoft::Windows::PrivateCommon::IModelManager2, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>
    {
        ImageScalerSession(std::nullptr_t) noexcept {}
        ImageScalerSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Graphics::ImagingInternal::IImageScalerSession(ptr, take_ownership_from_abi) {}
        ImageScalerSession();
        using impl::consume_t<ImageScalerSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager>::GenerateCacheModel;
        using impl::consume_t<ImageScalerSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>::GenerateCacheModel;
    };
    struct WINRT_IMPL_EMPTY_BASES ImageSegmenterSession : winrt::Microsoft::Graphics::ImagingInternal::IImageSegmenterSession,
        impl::require<ImageSegmenterSession, winrt::Microsoft::Windows::PrivateCommon::IAnchorInstance, winrt::Microsoft::Windows::PrivateCommon::IGetSessionHostProcessId, winrt::Microsoft::Windows::PrivateCommon::IModelManager, winrt::Microsoft::Windows::PrivateCommon::IModelManager2, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>
    {
        ImageSegmenterSession(std::nullptr_t) noexcept {}
        ImageSegmenterSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Graphics::ImagingInternal::IImageSegmenterSession(ptr, take_ownership_from_abi) {}
        ImageSegmenterSession();
        using impl::consume_t<ImageSegmenterSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager>::GenerateCacheModel;
        using impl::consume_t<ImageSegmenterSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>::GenerateCacheModel;
    };
    struct WINRT_IMPL_EMPTY_BASES ParallaxCreatorSession : winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession3,
        impl::require<ParallaxCreatorSession, winrt::Microsoft::Windows::PrivateCommon::IAnchorInstance, winrt::Microsoft::Windows::PrivateCommon::IGetSessionHostProcessId, winrt::Microsoft::Windows::PrivateCommon::IModelManager, winrt::Microsoft::Windows::PrivateCommon::IModelManager2, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>
    {
        ParallaxCreatorSession(std::nullptr_t) noexcept {}
        ParallaxCreatorSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession3(ptr, take_ownership_from_abi) {}
        ParallaxCreatorSession();
        using impl::consume_t<ParallaxCreatorSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager>::GenerateCacheModel;
        using impl::consume_t<ParallaxCreatorSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>::GenerateCacheModel;
    };
    struct WINRT_IMPL_EMPTY_BASES TrimapImageSegmenterSession : winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession3,
        impl::require<TrimapImageSegmenterSession, winrt::Microsoft::Windows::PrivateCommon::IAnchorInstance, winrt::Microsoft::Windows::PrivateCommon::IGetSessionHostProcessId, winrt::Microsoft::Windows::PrivateCommon::IModelManager, winrt::Microsoft::Windows::PrivateCommon::IModelManager2, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>
    {
        TrimapImageSegmenterSession(std::nullptr_t) noexcept {}
        TrimapImageSegmenterSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession3(ptr, take_ownership_from_abi) {}
        TrimapImageSegmenterSession();
        using impl::consume_t<TrimapImageSegmenterSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager>::GenerateCacheModel;
        using impl::consume_t<TrimapImageSegmenterSession, winrt::Microsoft::Windows::PrivateCommon::IModelManager3>::GenerateCacheModel;
    };
}
#endif
