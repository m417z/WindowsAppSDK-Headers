// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_AI_MachineLearning_0_H
#define WINRT_Microsoft_Windows_AI_MachineLearning_0_H
WINRT_EXPORT namespace winrt::Windows::ApplicationModel
{
    struct PackageId;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct HResult;
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::AI::MachineLearning
{
    enum class ExecutionProviderCertification : int32_t
    {
        Unknown = 0,
        Certified = 1,
        Uncertified = 2,
    };
    enum class ExecutionProviderReadyResultState : int32_t
    {
        InProgress = 0,
        Success = 1,
        Failure = 2,
    };
    enum class ExecutionProviderReadyState : int32_t
    {
        Ready = 0,
        NotReady = 1,
        NotPresent = 2,
    };
    struct IExecutionProvider;
    struct IExecutionProviderCatalog;
    struct IExecutionProviderCatalogStatics;
    struct IExecutionProviderReadyResult;
    struct ExecutionProvider;
    struct ExecutionProviderCatalog;
    struct ExecutionProviderReadyResult;
    struct MachineLearningContract;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCatalog>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResult>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCertification>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResultState>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyState>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider> = L"Microsoft.Windows.AI.MachineLearning.ExecutionProvider";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCatalog> = L"Microsoft.Windows.AI.MachineLearning.ExecutionProviderCatalog";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResult> = L"Microsoft.Windows.AI.MachineLearning.ExecutionProviderReadyResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCertification> = L"Microsoft.Windows.AI.MachineLearning.ExecutionProviderCertification";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResultState> = L"Microsoft.Windows.AI.MachineLearning.ExecutionProviderReadyResultState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyState> = L"Microsoft.Windows.AI.MachineLearning.ExecutionProviderReadyState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider> = L"Microsoft.Windows.AI.MachineLearning.IExecutionProvider";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog> = L"Microsoft.Windows.AI.MachineLearning.IExecutionProviderCatalog";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics> = L"Microsoft.Windows.AI.MachineLearning.IExecutionProviderCatalogStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult> = L"Microsoft.Windows.AI.MachineLearning.IExecutionProviderReadyResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::MachineLearningContract> = L"Microsoft.Windows.AI.MachineLearning.MachineLearningContract";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>{ 0x98356468,0xCF23,0x504F,{ 0xB2,0x9C,0x93,0x47,0x78,0x19,0x25,0xFF } }; // 98356468-CF23-504F-B29C-9347781925FF
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>{ 0xAA9BFE14,0x2222,0x5921,{ 0x80,0x02,0x4D,0x2A,0x20,0x5E,0xA0,0x3C } }; // AA9BFE14-2222-5921-8002-4D2A205EA03C
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics>{ 0x550DEF98,0x2611,0x5433,{ 0xAF,0xB8,0x43,0x67,0x3B,0x61,0x08,0x48 } }; // 550DEF98-2611-5433-AFB8-43673B610848
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>{ 0x91C1724D,0x93C7,0x5284,{ 0xAD,0xBE,0xBA,0x2B,0xD7,0xBE,0x7C,0x79 } }; // 91C1724D-93C7-5284-ADBE-BA2BD7BE7C79
    template <> struct default_interface<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider>{ using type = winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider; };
    template <> struct default_interface<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCatalog>{ using type = winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog; };
    template <> struct default_interface<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResult>{ using type = winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult; };
    template <> struct abi<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall get_LibraryPath(void**) noexcept = 0;
            virtual int32_t __stdcall get_PackageId(void**) noexcept = 0;
            virtual int32_t __stdcall get_ReadyState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Certification(int32_t*) noexcept = 0;
            virtual int32_t __stdcall EnsureReadyAsync(void**) noexcept = 0;
            virtual int32_t __stdcall TryRegister(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall FindAllProviders(uint32_t* __resultSize, void***) noexcept = 0;
            virtual int32_t __stdcall EnsureAndRegisterCertifiedAsync(void**) noexcept = 0;
            virtual int32_t __stdcall RegisterCertifiedAsync(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetDefault(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Status(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ExtendedError(winrt::hresult*) noexcept = 0;
            virtual int32_t __stdcall get_DiagnosticText(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider
    {
        [[nodiscard]] auto Name() const;
        [[nodiscard]] auto LibraryPath() const;
        [[nodiscard]] auto PackageId() const;
        [[nodiscard]] auto ReadyState() const;
        [[nodiscard]] auto Certification() const;
        auto EnsureReadyAsync() const;
        auto TryRegister() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderCatalog
    {
        auto FindAllProviders() const;
        auto EnsureAndRegisterCertifiedAsync() const;
        auto RegisterCertifiedAsync() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderCatalog<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderCatalogStatics
    {
        auto GetDefault() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderCatalogStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderReadyResult
    {
        [[nodiscard]] auto Status() const;
        [[nodiscard]] auto ExtendedError() const;
        [[nodiscard]] auto DiagnosticText() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderReadyResult<D>;
    };
}
#endif
