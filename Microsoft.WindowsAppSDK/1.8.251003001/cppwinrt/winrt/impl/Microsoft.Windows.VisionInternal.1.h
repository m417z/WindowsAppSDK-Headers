// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_VisionInternal_1_H
#define WINRT_Microsoft_Windows_VisionInternal_1_H
#include "winrt/impl/Windows.Foundation.0.h"
#include "winrt/impl/Microsoft.Windows.VisionInternal.0.h"
WINRT_EXPORT namespace winrt::Microsoft::Windows::VisionInternal
{
    struct WINRT_IMPL_EMPTY_BASES IRecognizedTextInternal :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRecognizedTextInternal>
    {
        IRecognizedTextInternal(std::nullptr_t = nullptr) noexcept {}
        IRecognizedTextInternal(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IScreenRegionDetectorSession :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IScreenRegionDetectorSession>,
        impl::require<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession, winrt::Windows::Foundation::IClosable>
    {
        IScreenRegionDetectorSession(std::nullptr_t = nullptr) noexcept {}
        IScreenRegionDetectorSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IScreenRegionDetectorSession2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IScreenRegionDetectorSession2>,
        impl::require<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession2, winrt::Windows::Foundation::IClosable, winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession>
    {
        IScreenRegionDetectorSession2(std::nullptr_t = nullptr) noexcept {}
        IScreenRegionDetectorSession2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        using impl::consume_t<IScreenRegionDetectorSession2, IScreenRegionDetectorSession2>::GetScreenRegionsAsync;
        using impl::consume_t<IScreenRegionDetectorSession2, winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession>::GetScreenRegionsAsync;
    };
    struct WINRT_IMPL_EMPTY_BASES IScreenRegionDetectorSession3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IScreenRegionDetectorSession3>,
        impl::require<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession3, winrt::Windows::Foundation::IClosable, winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession, winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession2>
    {
        IScreenRegionDetectorSession3(std::nullptr_t = nullptr) noexcept {}
        IScreenRegionDetectorSession3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        using impl::consume_t<IScreenRegionDetectorSession3, winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession>::GetScreenRegionsAsync;
        using impl::consume_t<IScreenRegionDetectorSession3, winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession2>::GetScreenRegionsAsync;
    };
    struct WINRT_IMPL_EMPTY_BASES IScreenRegionDetectorSession4 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IScreenRegionDetectorSession4>,
        impl::require<winrt::Microsoft::Windows::VisionInternal::IScreenRegionDetectorSession4, winrt::Windows::Foundation::IClosable>
    {
        IScreenRegionDetectorSession4(std::nullptr_t = nullptr) noexcept {}
        IScreenRegionDetectorSession4(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ITextRecognizerSession :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextRecognizerSession>,
        impl::require<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession, winrt::Windows::Foundation::IClosable>
    {
        ITextRecognizerSession(std::nullptr_t = nullptr) noexcept {}
        ITextRecognizerSession(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ITextRecognizerSession2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextRecognizerSession2>,
        impl::require<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession2, winrt::Windows::Foundation::IClosable, winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession>
    {
        ITextRecognizerSession2(std::nullptr_t = nullptr) noexcept {}
        ITextRecognizerSession2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        using impl::consume_t<ITextRecognizerSession2, ITextRecognizerSession2>::RecognizeTextFromImageAsync;
        using impl::consume_t<ITextRecognizerSession2, winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession>::RecognizeTextFromImageAsync;
    };
    struct WINRT_IMPL_EMPTY_BASES ITextRecognizerSession3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITextRecognizerSession3>,
        impl::require<winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession3, winrt::Windows::Foundation::IClosable, winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession, winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession2>
    {
        ITextRecognizerSession3(std::nullptr_t = nullptr) noexcept {}
        ITextRecognizerSession3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        using impl::consume_t<ITextRecognizerSession3, winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession>::RecognizeTextFromImageAsync;
        using impl::consume_t<ITextRecognizerSession3, winrt::Microsoft::Windows::VisionInternal::ITextRecognizerSession2>::RecognizeTextFromImageAsync;
    };
}
#endif
