// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_AI_MachineLearning_H
#define WINRT_Microsoft_Windows_AI_MachineLearning_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.250303.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.250303.1"
#include "winrt/Microsoft.Windows.AI.h"
#include "winrt/impl/Windows.ApplicationModel.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Microsoft.Windows.AI.MachineLearning.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider<D>::Name() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)this;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider<D>::LibraryPath() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_LibraryPath(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)this;
            check_hresult(_winrt_abi_type->get_LibraryPath(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider<D>::PackageId() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PackageId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)this;
            check_hresult(_winrt_abi_type->get_PackageId(&value));
        }
        return winrt::Windows::ApplicationModel::PackageId{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider<D>::ReadyState() const
    {
        winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyState value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ReadyState(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)this;
            check_hresult(_winrt_abi_type->get_ReadyState(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider<D>::Certification() const
    {
        winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCertification value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Certification(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)this;
            check_hresult(_winrt_abi_type->get_Certification(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider<D>::EnsureReadyAsync() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->EnsureReadyAsync(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)this;
            check_hresult(_winrt_abi_type->EnsureReadyAsync(&operation));
        }
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResult, double>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider<D>::TryRegister() const
    {
        bool result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->TryRegister(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)this;
            check_hresult(_winrt_abi_type->TryRegister(&result));
        }
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderCatalog<D>::FindAllProviders() const
    {
        uint32_t result_impl_size{};
        void** result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->FindAllProviders(&result_impl_size, &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>**)this;
            check_hresult(_winrt_abi_type->FindAllProviders(&result_impl_size, &result));
        }
        return com_array<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider>{ result, result_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderCatalog<D>::EnsureAndRegisterCertifiedAsync() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->EnsureAndRegisterCertifiedAsync(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>**)this;
            check_hresult(_winrt_abi_type->EnsureAndRegisterCertifiedAsync(&operation));
        }
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider>, double>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderCatalog<D>::RegisterCertifiedAsync() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->RegisterCertifiedAsync(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>**)this;
            check_hresult(_winrt_abi_type->RegisterCertifiedAsync(&operation));
        }
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider>, double>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderCatalogStatics<D>::GetDefault() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetDefault(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics>**)this;
            check_hresult(_winrt_abi_type->GetDefault(&result));
        }
        return winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCatalog{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderReadyResult<D>::Status() const
    {
        winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResultState value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Status(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>**)this;
            check_hresult(_winrt_abi_type->get_Status(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderReadyResult<D>::ExtendedError() const
    {
        winrt::hresult value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ExtendedError(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>**)this;
            check_hresult(_winrt_abi_type->get_ExtendedError(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderReadyResult<D>::DiagnosticText() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DiagnosticText(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>**)this;
            check_hresult(_winrt_abi_type->get_DiagnosticText(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider> : produce_base<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>
    {
        int32_t __stdcall get_Name(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LibraryPath(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().LibraryPath());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PackageId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::ApplicationModel::PackageId>(this->shim().PackageId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ReadyState(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyState>(this->shim().ReadyState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Certification(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCertification>(this->shim().Certification());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall EnsureReadyAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResult, double>>(this->shim().EnsureReadyAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall TryRegister(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().TryRegister());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog> : produce_base<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>
    {
        int32_t __stdcall FindAllProviders(uint32_t* __resultSize, void*** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().FindAllProviders());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall EnsureAndRegisterCertifiedAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider>, double>>(this->shim().EnsureAndRegisterCertifiedAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RegisterCertifiedAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider>, double>>(this->shim().RegisterCertifiedAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics> : produce_base<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics>
    {
        int32_t __stdcall GetDefault(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCatalog>(this->shim().GetDefault());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult> : produce_base<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>
    {
        int32_t __stdcall get_Status(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResultState>(this->shim().Status());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExtendedError(winrt::hresult* value) noexcept final try
        {
            zero_abi<winrt::hresult>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::hresult>(this->shim().ExtendedError());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DiagnosticText(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DiagnosticText());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::AI::MachineLearning
{
    inline auto ExecutionProviderCatalog::GetDefault()
    {
        return impl::call_factory_cast<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCatalog(*)(IExecutionProviderCatalogStatics const&), ExecutionProviderCatalog, IExecutionProviderCatalogStatics>([](IExecutionProviderCatalogStatics const& f) { return f.GetDefault(); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCatalog> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResult> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
