// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_Internal_Vision_H
#define WINRT_Microsoft_Windows_Internal_Vision_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.250303.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.250303.1"
#include "winrt/impl/Microsoft.Windows.PrivateCommon.2.h"
#include "winrt/impl/Microsoft.Windows.VisionInternal.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Microsoft.Windows.Internal.Vision.2.h"
namespace winrt::impl
{
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Internal::Vision
{
    inline ScreenRegionDetectorSession::ScreenRegionDetectorSession() :
        ScreenRegionDetectorSession(impl::call_factory_cast<ScreenRegionDetectorSession(*)(winrt::Windows::Foundation::IActivationFactory const&), ScreenRegionDetectorSession>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ScreenRegionDetectorSession>(); }))
    {
    }
    inline TextRecognizerSession::TextRecognizerSession() :
        TextRecognizerSession(impl::call_factory_cast<TextRecognizerSession(*)(winrt::Windows::Foundation::IActivationFactory const&), TextRecognizerSession>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<TextRecognizerSession>(); }))
    {
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::Internal::Vision::RecognizedTextInternal> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Internal::Vision::ScreenRegionDetectorSession> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Internal::Vision::TextRecognizerSession> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
