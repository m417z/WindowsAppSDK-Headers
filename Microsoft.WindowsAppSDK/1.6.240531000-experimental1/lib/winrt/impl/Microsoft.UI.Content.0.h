// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220110.5

#pragma once
#ifndef WINRT_Microsoft_UI_Content_0_H
#define WINRT_Microsoft_UI_Content_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI
{
    struct DisplayId;
    struct WindowId;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition
{
    enum class CompositionBorderMode : int32_t;
    struct Compositor;
    struct ContainerVisual;
    struct Visual;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Dispatching
{
    struct DispatcherQueue;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    template <typename T> struct __declspec(empty_bases) EventHandler;
    struct EventRegistrationToken;
    template <typename T> struct __declspec(empty_bases) IReference;
    struct Point;
    struct Rect;
    template <typename TSender, typename TResult> struct __declspec(empty_bases) TypedEventHandler;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct __declspec(empty_bases) IIterable;
    struct IPropertySet;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Numerics
{
}
WINRT_EXPORT namespace winrt::Windows::Graphics
{
    struct PointInt32;
    struct RectInt32;
    struct SizeInt32;
}
WINRT_EXPORT namespace winrt::Windows::UI
{
    struct Color;
}
WINRT_EXPORT namespace winrt::Windows::UI::Composition
{
    struct Compositor;
    struct ContainerVisual;
    struct Visual;
}
WINRT_EXPORT namespace winrt::Windows::UI::Core
{
    struct CoreWindow;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Content
{
    enum class ContentCoordinateRoundingMode : int32_t
    {
        Auto = 0,
        Floor = 1,
        Round = 2,
        Ceiling = 3,
    };
    enum class ContentDisplayOrientations : uint32_t
    {
        None = 0,
        Landscape = 0x1,
        Portrait = 0x2,
        LandscapeFlipped = 0x4,
        PortraitFlipped = 0x8,
    };
    enum class ContentLayoutDirection : int32_t
    {
        LeftToRight = 0,
        RightToLeft = 1,
    };
    enum class ContentSizePolicy : int32_t
    {
        None = 0,
        ResizeContentToParentWindow = 1,
        ResizeParentWindowToContent = 2,
    };
    struct IChildContentLink;
    struct IChildContentLinkStatics;
    struct IContentAppWindowBridge;
    struct IContentAppWindowBridgeStatics;
    struct IContentCoordinateConverter;
    struct IContentCoordinateConverterFactory;
    struct IContentCoordinateConverterStatics;
    struct IContentDeferral;
    struct IContentEnvironmentSettingChangedEventArgs;
    struct IContentEnvironmentStateChangedEventArgs;
    struct IContentExternalBackdropLink;
    struct IContentExternalBackdropLinkStatics;
    struct IContentExternalOutputLink;
    struct IContentExternalOutputLinkStatics;
    struct IContentIsland;
    struct IContentIsland2;
    struct IContentIsland3;
    struct IContentIslandAutomationProviderRequestedEventArgs;
    struct IContentIslandEndpointConnectionPrivate;
    struct IContentIslandEnvironment;
    struct IContentIslandEnvironment2;
    struct IContentIslandEnvironmentFactory;
    struct IContentIslandFactory;
    struct IContentIslandStateChangedEventArgs;
    struct IContentIslandStatics;
    struct IContentIslandStatics2;
    struct IContentLink;
    struct IContentNodeOwner;
    struct IContentSite;
    struct IContentSite2;
    struct IContentSite3;
    struct IContentSiteBridge;
    struct IContentSiteBridge2;
    struct IContentSiteBridgeEndpointConnectionPrivate;
    struct IContentSiteEnvironment;
    struct IContentSiteEnvironment2;
    struct IContentSiteEnvironmentFactory;
    struct IContentSiteEnvironmentView;
    struct IContentSiteEnvironmentViewFactory;
    struct IContentSiteFactory;
    struct IContentSiteRequestedStateChangedEventArgs;
    struct IContentSiteView;
    struct IContentSiteView2;
    struct IContentSiteViewFactory;
    struct ICoreWindowSiteBridge;
    struct ICoreWindowSiteBridgeStatics;
    struct IDesktopChildSiteBridge;
    struct IDesktopChildSiteBridgeStatics;
    struct IDesktopSiteBridge;
    struct IDesktopSiteBridge2;
    struct IDesktopSiteBridgeFactory;
    struct IDesktopSiteBridgeStatics;
    struct IEndpointConnectionEventArgs;
    struct IEndpointRequestedStateChangedEventArgs;
    struct IPopupWindowSiteBridge;
    struct IProcessStarter;
    struct IProcessStarterFactory;
    struct IProcessStarterStatics;
    struct IReadOnlyDesktopSiteBridge;
    struct IReadOnlyDesktopSiteBridgeStatics;
    struct ISystemVisualSiteBridge;
    struct ISystemVisualSiteBridgeStatics;
    struct ChildContentLink;
    struct ContentAppWindowBridge;
    struct ContentCoordinateConverter;
    struct ContentDeferral;
    struct ContentEnvironmentSettingChangedEventArgs;
    struct ContentEnvironmentStateChangedEventArgs;
    struct ContentExternalBackdropLink;
    struct ContentExternalOutputLink;
    struct ContentIsland;
    struct ContentIslandAutomationProviderRequestedEventArgs;
    struct ContentIslandEnvironment;
    struct ContentIslandStateChangedEventArgs;
    struct ContentSite;
    struct ContentSiteEnvironment;
    struct ContentSiteEnvironmentView;
    struct ContentSiteRequestedStateChangedEventArgs;
    struct ContentSiteView;
    struct CoreWindowSiteBridge;
    struct CoreWindowTopLevelWindowBridge;
    struct DesktopChildSiteBridge;
    struct DesktopSiteBridge;
    struct EndpointConnectionEventArgs;
    struct EndpointRequestedStateChangedEventArgs;
    struct PopupWindowSiteBridge;
    struct ProcessStarter;
    struct ReadOnlyDesktopSiteBridge;
    struct SystemVisualSiteBridge;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Content::IChildContentLink>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IChildContentLinkStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentAppWindowBridge>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentAppWindowBridgeStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentCoordinateConverter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentCoordinateConverterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentCoordinateConverterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentDeferral>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentEnvironmentSettingChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentEnvironmentStateChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentExternalBackdropLink>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentExternalBackdropLinkStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentExternalOutputLink>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentExternalOutputLinkStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentIsland>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentIsland2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentIsland3>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentIslandAutomationProviderRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentIslandEndpointConnectionPrivate>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentIslandEnvironment>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentIslandEnvironment2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentIslandEnvironmentFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentIslandFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentIslandStateChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentIslandStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentIslandStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentLink>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentNodeOwner>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentSite>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentSite2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentSite3>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentSiteBridge>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentSiteBridge2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentSiteBridgeEndpointConnectionPrivate>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentSiteEnvironment>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentSiteEnvironment2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentSiteEnvironmentFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentSiteEnvironmentView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentSiteEnvironmentViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentSiteFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentSiteRequestedStateChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentSiteView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentSiteView2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IContentSiteViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ICoreWindowSiteBridge>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ICoreWindowSiteBridgeStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IDesktopChildSiteBridge>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IDesktopChildSiteBridgeStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IDesktopSiteBridge>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IDesktopSiteBridge2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IDesktopSiteBridgeFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IDesktopSiteBridgeStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IEndpointConnectionEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IEndpointRequestedStateChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IPopupWindowSiteBridge>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IProcessStarter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IProcessStarterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IProcessStarterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IReadOnlyDesktopSiteBridge>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::IReadOnlyDesktopSiteBridgeStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ISystemVisualSiteBridge>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ISystemVisualSiteBridgeStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ChildContentLink>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentAppWindowBridge>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentCoordinateConverter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentDeferral>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentEnvironmentSettingChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentEnvironmentStateChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentExternalBackdropLink>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentExternalOutputLink>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentIsland>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentIslandAutomationProviderRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentIslandEnvironment>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentIslandStateChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentSite>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentSiteEnvironment>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentSiteEnvironmentView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentSiteRequestedStateChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentSiteView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::CoreWindowSiteBridge>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::CoreWindowTopLevelWindowBridge>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::DesktopChildSiteBridge>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::DesktopSiteBridge>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::EndpointConnectionEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::EndpointRequestedStateChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::PopupWindowSiteBridge>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ProcessStarter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ReadOnlyDesktopSiteBridge>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::SystemVisualSiteBridge>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentCoordinateRoundingMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentDisplayOrientations>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentLayoutDirection>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Content::ContentSizePolicy>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ChildContentLink> = L"Microsoft.UI.Content.ChildContentLink";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentAppWindowBridge> = L"Microsoft.UI.Content.ContentAppWindowBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentCoordinateConverter> = L"Microsoft.UI.Content.ContentCoordinateConverter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentDeferral> = L"Microsoft.UI.Content.ContentDeferral";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentEnvironmentSettingChangedEventArgs> = L"Microsoft.UI.Content.ContentEnvironmentSettingChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentEnvironmentStateChangedEventArgs> = L"Microsoft.UI.Content.ContentEnvironmentStateChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentExternalBackdropLink> = L"Microsoft.UI.Content.ContentExternalBackdropLink";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentExternalOutputLink> = L"Microsoft.UI.Content.ContentExternalOutputLink";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentIsland> = L"Microsoft.UI.Content.ContentIsland";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentIslandAutomationProviderRequestedEventArgs> = L"Microsoft.UI.Content.ContentIslandAutomationProviderRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentIslandEnvironment> = L"Microsoft.UI.Content.ContentIslandEnvironment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentIslandStateChangedEventArgs> = L"Microsoft.UI.Content.ContentIslandStateChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentSite> = L"Microsoft.UI.Content.ContentSite";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentSiteEnvironment> = L"Microsoft.UI.Content.ContentSiteEnvironment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentSiteEnvironmentView> = L"Microsoft.UI.Content.ContentSiteEnvironmentView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentSiteRequestedStateChangedEventArgs> = L"Microsoft.UI.Content.ContentSiteRequestedStateChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentSiteView> = L"Microsoft.UI.Content.ContentSiteView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::CoreWindowSiteBridge> = L"Microsoft.UI.Content.CoreWindowSiteBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::CoreWindowTopLevelWindowBridge> = L"Microsoft.UI.Content.CoreWindowTopLevelWindowBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::DesktopChildSiteBridge> = L"Microsoft.UI.Content.DesktopChildSiteBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::DesktopSiteBridge> = L"Microsoft.UI.Content.DesktopSiteBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::EndpointConnectionEventArgs> = L"Microsoft.UI.Content.EndpointConnectionEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::EndpointRequestedStateChangedEventArgs> = L"Microsoft.UI.Content.EndpointRequestedStateChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::PopupWindowSiteBridge> = L"Microsoft.UI.Content.PopupWindowSiteBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ProcessStarter> = L"Microsoft.UI.Content.ProcessStarter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ReadOnlyDesktopSiteBridge> = L"Microsoft.UI.Content.ReadOnlyDesktopSiteBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::SystemVisualSiteBridge> = L"Microsoft.UI.Content.SystemVisualSiteBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentCoordinateRoundingMode> = L"Microsoft.UI.Content.ContentCoordinateRoundingMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentDisplayOrientations> = L"Microsoft.UI.Content.ContentDisplayOrientations";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentLayoutDirection> = L"Microsoft.UI.Content.ContentLayoutDirection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ContentSizePolicy> = L"Microsoft.UI.Content.ContentSizePolicy";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IChildContentLink> = L"Microsoft.UI.Content.IChildContentLink";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IChildContentLinkStatics> = L"Microsoft.UI.Content.IChildContentLinkStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentAppWindowBridge> = L"Microsoft.UI.Content.IContentAppWindowBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentAppWindowBridgeStatics> = L"Microsoft.UI.Content.IContentAppWindowBridgeStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentCoordinateConverter> = L"Microsoft.UI.Content.IContentCoordinateConverter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentCoordinateConverterFactory> = L"Microsoft.UI.Content.IContentCoordinateConverterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentCoordinateConverterStatics> = L"Microsoft.UI.Content.IContentCoordinateConverterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentDeferral> = L"Microsoft.UI.Content.IContentDeferral";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentEnvironmentSettingChangedEventArgs> = L"Microsoft.UI.Content.IContentEnvironmentSettingChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentEnvironmentStateChangedEventArgs> = L"Microsoft.UI.Content.IContentEnvironmentStateChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentExternalBackdropLink> = L"Microsoft.UI.Content.IContentExternalBackdropLink";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentExternalBackdropLinkStatics> = L"Microsoft.UI.Content.IContentExternalBackdropLinkStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentExternalOutputLink> = L"Microsoft.UI.Content.IContentExternalOutputLink";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentExternalOutputLinkStatics> = L"Microsoft.UI.Content.IContentExternalOutputLinkStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentIsland> = L"Microsoft.UI.Content.IContentIsland";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentIsland2> = L"Microsoft.UI.Content.IContentIsland2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentIsland3> = L"Microsoft.UI.Content.IContentIsland3";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentIslandAutomationProviderRequestedEventArgs> = L"Microsoft.UI.Content.IContentIslandAutomationProviderRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentIslandEndpointConnectionPrivate> = L"Microsoft.UI.Content.IContentIslandEndpointConnectionPrivate";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentIslandEnvironment> = L"Microsoft.UI.Content.IContentIslandEnvironment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentIslandEnvironment2> = L"Microsoft.UI.Content.IContentIslandEnvironment2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentIslandEnvironmentFactory> = L"Microsoft.UI.Content.IContentIslandEnvironmentFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentIslandFactory> = L"Microsoft.UI.Content.IContentIslandFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentIslandStateChangedEventArgs> = L"Microsoft.UI.Content.IContentIslandStateChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentIslandStatics> = L"Microsoft.UI.Content.IContentIslandStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentIslandStatics2> = L"Microsoft.UI.Content.IContentIslandStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentLink> = L"Microsoft.UI.Content.IContentLink";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentNodeOwner> = L"Microsoft.UI.Content.IContentNodeOwner";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentSite> = L"Microsoft.UI.Content.IContentSite";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentSite2> = L"Microsoft.UI.Content.IContentSite2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentSite3> = L"Microsoft.UI.Content.IContentSite3";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentSiteBridge> = L"Microsoft.UI.Content.IContentSiteBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentSiteBridge2> = L"Microsoft.UI.Content.IContentSiteBridge2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentSiteBridgeEndpointConnectionPrivate> = L"Microsoft.UI.Content.IContentSiteBridgeEndpointConnectionPrivate";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentSiteEnvironment> = L"Microsoft.UI.Content.IContentSiteEnvironment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentSiteEnvironment2> = L"Microsoft.UI.Content.IContentSiteEnvironment2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentSiteEnvironmentFactory> = L"Microsoft.UI.Content.IContentSiteEnvironmentFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentSiteEnvironmentView> = L"Microsoft.UI.Content.IContentSiteEnvironmentView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentSiteEnvironmentViewFactory> = L"Microsoft.UI.Content.IContentSiteEnvironmentViewFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentSiteFactory> = L"Microsoft.UI.Content.IContentSiteFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentSiteRequestedStateChangedEventArgs> = L"Microsoft.UI.Content.IContentSiteRequestedStateChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentSiteView> = L"Microsoft.UI.Content.IContentSiteView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentSiteView2> = L"Microsoft.UI.Content.IContentSiteView2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IContentSiteViewFactory> = L"Microsoft.UI.Content.IContentSiteViewFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ICoreWindowSiteBridge> = L"Microsoft.UI.Content.ICoreWindowSiteBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ICoreWindowSiteBridgeStatics> = L"Microsoft.UI.Content.ICoreWindowSiteBridgeStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IDesktopChildSiteBridge> = L"Microsoft.UI.Content.IDesktopChildSiteBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IDesktopChildSiteBridgeStatics> = L"Microsoft.UI.Content.IDesktopChildSiteBridgeStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IDesktopSiteBridge> = L"Microsoft.UI.Content.IDesktopSiteBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IDesktopSiteBridge2> = L"Microsoft.UI.Content.IDesktopSiteBridge2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IDesktopSiteBridgeFactory> = L"Microsoft.UI.Content.IDesktopSiteBridgeFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IDesktopSiteBridgeStatics> = L"Microsoft.UI.Content.IDesktopSiteBridgeStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IEndpointConnectionEventArgs> = L"Microsoft.UI.Content.IEndpointConnectionEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IEndpointRequestedStateChangedEventArgs> = L"Microsoft.UI.Content.IEndpointRequestedStateChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IPopupWindowSiteBridge> = L"Microsoft.UI.Content.IPopupWindowSiteBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IProcessStarter> = L"Microsoft.UI.Content.IProcessStarter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IProcessStarterFactory> = L"Microsoft.UI.Content.IProcessStarterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IProcessStarterStatics> = L"Microsoft.UI.Content.IProcessStarterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IReadOnlyDesktopSiteBridge> = L"Microsoft.UI.Content.IReadOnlyDesktopSiteBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::IReadOnlyDesktopSiteBridgeStatics> = L"Microsoft.UI.Content.IReadOnlyDesktopSiteBridgeStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ISystemVisualSiteBridge> = L"Microsoft.UI.Content.ISystemVisualSiteBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Content::ISystemVisualSiteBridgeStatics> = L"Microsoft.UI.Content.ISystemVisualSiteBridgeStatics";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IChildContentLink>{ 0x16ED82FC,0x60DD,0x5895,{ 0x9C,0x7C,0x45,0x99,0xA9,0x19,0x55,0xB3 } }; // 16ED82FC-60DD-5895-9C7C-4599A91955B3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IChildContentLinkStatics>{ 0x1037743D,0xB36D,0x5596,{ 0x83,0x02,0x04,0xBA,0x7A,0x9F,0xF3,0x8D } }; // 1037743D-B36D-5596-8302-04BA7A9FF38D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentAppWindowBridge>{ 0xA17D6B39,0x5B52,0x5974,{ 0x88,0xE5,0x60,0xCD,0xE3,0x96,0x7B,0x5E } }; // A17D6B39-5B52-5974-88E5-60CDE3967B5E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentAppWindowBridgeStatics>{ 0x84B9CD9C,0xE822,0x5F12,{ 0xB2,0x1D,0x31,0xA4,0x09,0xB8,0x04,0xF5 } }; // 84B9CD9C-E822-5F12-B21D-31A409B804F5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentCoordinateConverter>{ 0x10A11230,0x5EB4,0x5840,{ 0xA3,0x46,0x57,0x0F,0x4A,0x49,0x04,0x0F } }; // 10A11230-5EB4-5840-A346-570F4A49040F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentCoordinateConverterFactory>{ 0xA4B216EE,0x0E26,0x56BD,{ 0x92,0x09,0xA7,0x5C,0xF9,0xD8,0x0F,0x27 } }; // A4B216EE-0E26-56BD-9209-A75CF9D80F27
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentCoordinateConverterStatics>{ 0xF56374CE,0xB6DF,0x5B42,{ 0xA5,0x8F,0x4E,0x3B,0xB0,0x39,0xE3,0xA9 } }; // F56374CE-B6DF-5B42-A58F-4E3BB039E3A9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentDeferral>{ 0x470529F5,0xCD93,0x599B,{ 0x96,0x8E,0xF8,0xA6,0x89,0xBC,0x3A,0x07 } }; // 470529F5-CD93-599B-968E-F8A689BC3A07
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentEnvironmentSettingChangedEventArgs>{ 0x76478051,0xFC80,0x5EEC,{ 0xA3,0xF3,0x62,0x60,0x6A,0xBE,0x06,0xB7 } }; // 76478051-FC80-5EEC-A3F3-62606ABE06B7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentEnvironmentStateChangedEventArgs>{ 0x8970FA4F,0x10BA,0x5F67,{ 0x97,0x0B,0x8C,0x72,0xBC,0x00,0x9B,0x67 } }; // 8970FA4F-10BA-5F67-970B-8C72BC009B67
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentExternalBackdropLink>{ 0x1054BF83,0xB35B,0x5FDE,{ 0x8D,0xD7,0xAC,0x3B,0xB3,0xE6,0xCE,0x27 } }; // 1054BF83-B35B-5FDE-8DD7-AC3BB3E6CE27
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentExternalBackdropLinkStatics>{ 0x46CAC6FB,0xBB51,0x510A,{ 0x95,0x8D,0xE0,0xEB,0x41,0x60,0xF6,0x78 } }; // 46CAC6FB-BB51-510A-958D-E0EB4160F678
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentExternalOutputLink>{ 0x3DAC8EC8,0x011F,0x5AD2,{ 0x8D,0xB7,0xB7,0x3C,0x44,0x52,0xF7,0x55 } }; // 3DAC8EC8-011F-5AD2-8DB7-B73C4452F755
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentExternalOutputLinkStatics>{ 0xB758F401,0x833E,0x587D,{ 0xB0,0xCD,0xA3,0x93,0x4E,0xBA,0x37,0x21 } }; // B758F401-833E-587D-B0CD-A3934EBA3721
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentIsland>{ 0x5B2504BA,0x361C,0x50AA,{ 0xBD,0x6E,0x41,0x22,0xC6,0xD9,0x38,0x89 } }; // 5B2504BA-361C-50AA-BD6E-4122C6D93889
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentIsland2>{ 0x7891E8A0,0x4F21,0x555F,{ 0xBE,0x28,0x01,0x20,0xD5,0xED,0xC0,0x31 } }; // 7891E8A0-4F21-555F-BE28-0120D5EDC031
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentIsland3>{ 0x71D28809,0xF7C6,0x56D2,{ 0x8B,0xE2,0xF4,0xF7,0x53,0xD4,0xEA,0xC6 } }; // 71D28809-F7C6-56D2-8BE2-F4F753D4EAC6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentIslandAutomationProviderRequestedEventArgs>{ 0x9FE24BED,0x2B9C,0x5137,{ 0x88,0x7F,0x40,0x3C,0x94,0x84,0x18,0x24 } }; // 9FE24BED-2B9C-5137-887F-403C94841824
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentIslandEndpointConnectionPrivate>{ 0x7C5D833B,0x70B8,0x5448,{ 0x84,0x72,0x94,0x06,0xE5,0x8E,0x0D,0xB4 } }; // 7C5D833B-70B8-5448-8472-9406E58E0DB4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentIslandEnvironment>{ 0xC334236D,0xDA88,0x566D,{ 0x81,0x1D,0x74,0xAE,0xF2,0xEB,0xA9,0x78 } }; // C334236D-DA88-566D-811D-74AEF2EBA978
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentIslandEnvironment2>{ 0x0DE23993,0xCFFB,0x5677,{ 0x94,0x42,0x31,0xAD,0xB1,0xF5,0x55,0xBF } }; // 0DE23993-CFFB-5677-9442-31ADB1F555BF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentIslandEnvironmentFactory>{ 0x47A782D6,0xB177,0x5C1E,{ 0xBF,0x87,0x90,0x43,0x7D,0xD8,0x09,0xD0 } }; // 47A782D6-B177-5C1E-BF87-90437DD809D0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentIslandFactory>{ 0x82383F52,0xE81A,0x5EC9,{ 0xA9,0x54,0xBA,0xC8,0xA9,0x31,0xBA,0x7D } }; // 82383F52-E81A-5EC9-A954-BAC8A931BA7D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentIslandStateChangedEventArgs>{ 0xC828EEB2,0x0C62,0x5B40,{ 0x9D,0x48,0x77,0xC0,0x60,0x83,0xC2,0x78 } }; // C828EEB2-0C62-5B40-9D48-77C06083C278
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentIslandStatics>{ 0x7B9EB7CC,0x8C43,0x5E0A,{ 0xAB,0x23,0xAB,0x48,0x62,0x8F,0xD2,0x23 } }; // 7B9EB7CC-8C43-5E0A-AB23-AB48628FD223
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentIslandStatics2>{ 0x4BD72F1F,0x2688,0x5B44,{ 0x86,0x12,0xCE,0x09,0xA8,0x62,0x75,0x69 } }; // 4BD72F1F-2688-5B44-8612-CE09A8627569
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentLink>{ 0xC7FF2539,0x32D6,0x592A,{ 0x81,0x78,0x68,0x7F,0x63,0x62,0xC5,0x80 } }; // C7FF2539-32D6-592A-8178-687F6362C580
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentNodeOwner>{ 0x2251C304,0x449D,0x4456,{ 0xB0,0x08,0xFE,0x71,0x63,0x40,0x3D,0x7E } }; // 2251C304-449D-4456-B008-FE7163403D7E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentSite>{ 0x996C60C4,0x02B2,0x5EEF,{ 0x93,0xB0,0xDD,0x6B,0x1E,0xC2,0xFD,0x7B } }; // 996C60C4-02B2-5EEF-93B0-DD6B1EC2FD7B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentSite2>{ 0xADE88C54,0x1DA3,0x5520,{ 0x94,0x49,0x0A,0xC7,0xA3,0xC0,0x1D,0xD1 } }; // ADE88C54-1DA3-5520-9449-0AC7A3C01DD1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentSite3>{ 0x8F50CC46,0x4BA1,0x5343,{ 0xBC,0x8C,0x8F,0x63,0x9B,0xD9,0x80,0x5E } }; // 8F50CC46-4BA1-5343-BC8C-8F639BD9805E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentSiteBridge>{ 0xFAAAB99E,0xA42B,0x549C,{ 0x92,0xDF,0x3B,0x6D,0x6E,0x1E,0x36,0x8B } }; // FAAAB99E-A42B-549C-92DF-3B6D6E1E368B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentSiteBridge2>{ 0xE685D242,0xAE1A,0x5AE5,{ 0xA0,0x2D,0x99,0x68,0x50,0xD4,0x61,0x45 } }; // E685D242-AE1A-5AE5-A02D-996850D46145
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentSiteBridgeEndpointConnectionPrivate>{ 0x84D1A059,0x692B,0x577D,{ 0xA7,0x91,0x6A,0xD4,0xFA,0xFB,0xEB,0x1F } }; // 84D1A059-692B-577D-A791-6AD4FAFBEB1F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentSiteEnvironment>{ 0x685D085D,0xBE53,0x55D1,{ 0xAE,0xC4,0xBA,0x22,0x73,0xD5,0x46,0x8B } }; // 685D085D-BE53-55D1-AEC4-BA2273D5468B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentSiteEnvironment2>{ 0x727FDE51,0x6960,0x54E4,{ 0xA9,0x57,0xD8,0x3E,0x17,0x17,0x1B,0x75 } }; // 727FDE51-6960-54E4-A957-D83E17171B75
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentSiteEnvironmentFactory>{ 0x0BEFA998,0xCB15,0x5F16,{ 0xA4,0xA5,0xC0,0xED,0x16,0x74,0xE1,0x86 } }; // 0BEFA998-CB15-5F16-A4A5-C0ED1674E186
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentSiteEnvironmentView>{ 0x5B6FE420,0x0BB3,0x54DD,{ 0x85,0x89,0x78,0x6C,0xF0,0x2E,0x38,0xF1 } }; // 5B6FE420-0BB3-54DD-8589-786CF02E38F1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentSiteEnvironmentViewFactory>{ 0xC901EDF2,0xF184,0x5A64,{ 0x8D,0x58,0x8C,0xF8,0xEF,0xA8,0xB6,0x78 } }; // C901EDF2-F184-5A64-8D58-8CF8EFA8B678
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentSiteFactory>{ 0x72FB98D5,0xB28A,0x57F1,{ 0x91,0xFA,0x24,0xC0,0x14,0xA3,0x42,0xC1 } }; // 72FB98D5-B28A-57F1-91FA-24C014A342C1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentSiteRequestedStateChangedEventArgs>{ 0x1B55FD1D,0x7292,0x562B,{ 0xB4,0xA1,0xD4,0xDE,0x79,0x72,0xE6,0x84 } }; // 1B55FD1D-7292-562B-B4A1-D4DE7972E684
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentSiteView>{ 0x2D5D8DD5,0x358E,0x5B05,{ 0x99,0x3B,0xB2,0x66,0x6D,0x17,0x86,0xB3 } }; // 2D5D8DD5-358E-5B05-993B-B2666D1786B3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentSiteView2>{ 0x5F966CD0,0x600F,0x506C,{ 0xB2,0xD3,0xA2,0xA8,0xFB,0x47,0x03,0xB5 } }; // 5F966CD0-600F-506C-B2D3-A2A8FB4703B5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IContentSiteViewFactory>{ 0x9EFD72F0,0x63EF,0x5B6A,{ 0xA5,0x0C,0x56,0x85,0xBD,0x81,0x00,0xF1 } }; // 9EFD72F0-63EF-5B6A-A50C-5685BD8100F1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::ICoreWindowSiteBridge>{ 0x03E1C02E,0xE5E3,0x526A,{ 0x84,0x92,0x93,0x9E,0x26,0xEE,0x09,0xD5 } }; // 03E1C02E-E5E3-526A-8492-939E26EE09D5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::ICoreWindowSiteBridgeStatics>{ 0xFBC56793,0x11F2,0x5754,{ 0xAD,0x70,0x30,0xE8,0x2C,0x07,0xFA,0x35 } }; // FBC56793-11F2-5754-AD70-30E82C07FA35
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IDesktopChildSiteBridge>{ 0xB2F2FF7B,0x1825,0x51B0,{ 0xB8,0x0B,0x75,0x99,0x88,0x9C,0x56,0x9F } }; // B2F2FF7B-1825-51B0-B80B-7599889C569F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IDesktopChildSiteBridgeStatics>{ 0xAB6B82DE,0x6A47,0x5DE3,{ 0xA8,0x60,0x61,0x3C,0x8D,0xB6,0x79,0xAB } }; // AB6B82DE-6A47-5DE3-A860-613C8DB679AB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IDesktopSiteBridge>{ 0xF0AE8750,0x905C,0x50A2,{ 0x8A,0x12,0x45,0x45,0xC6,0x24,0x5B,0xB4 } }; // F0AE8750-905C-50A2-8A12-4545C6245BB4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IDesktopSiteBridge2>{ 0x1190C041,0x82FB,0x5F3B,{ 0x91,0x11,0xCA,0x8F,0x19,0xA7,0x2B,0x75 } }; // 1190C041-82FB-5F3B-9111-CA8F19A72B75
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IDesktopSiteBridgeFactory>{ 0xD94EE1FF,0x3AF1,0x54D0,{ 0x93,0x11,0x65,0x2B,0x29,0xC5,0x7C,0x5B } }; // D94EE1FF-3AF1-54D0-9311-652B29C57C5B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IDesktopSiteBridgeStatics>{ 0xE0B38DAF,0x9CD4,0x50C5,{ 0x83,0xEE,0xC7,0x6E,0x3C,0xF3,0x4E,0xBA } }; // E0B38DAF-9CD4-50C5-83EE-C76E3CF34EBA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IEndpointConnectionEventArgs>{ 0x94BF2A15,0xEDF0,0x5EB2,{ 0x9C,0xEC,0x9B,0x93,0xAC,0x53,0x14,0x13 } }; // 94BF2A15-EDF0-5EB2-9CEC-9B93AC531413
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IEndpointRequestedStateChangedEventArgs>{ 0x513F95C6,0x4193,0x5388,{ 0x90,0xF8,0x8C,0xF3,0x40,0x81,0x5B,0x1E } }; // 513F95C6-4193-5388-90F8-8CF340815B1E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IPopupWindowSiteBridge>{ 0x044597A2,0xE6EE,0x5DAB,{ 0xAB,0xE0,0x19,0x23,0xEB,0xE3,0x4C,0x2E } }; // 044597A2-E6EE-5DAB-ABE0-1923EBE34C2E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IProcessStarter>{ 0x122D01BC,0x7753,0x5592,{ 0xB6,0x2D,0xF6,0x59,0xA3,0x0A,0x2A,0xC0 } }; // 122D01BC-7753-5592-B62D-F659A30A2AC0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IProcessStarterFactory>{ 0xA01418D1,0x4E8B,0x54B4,{ 0xA5,0xF2,0x52,0x01,0x87,0xA5,0x8B,0x80 } }; // A01418D1-4E8B-54B4-A5F2-520187A58B80
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IProcessStarterStatics>{ 0x76F9D59D,0x8456,0x540F,{ 0xBC,0x74,0x0D,0xCA,0xDF,0x45,0x81,0xB8 } }; // 76F9D59D-8456-540F-BC74-0DCADF4581B8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IReadOnlyDesktopSiteBridge>{ 0x99A52365,0x9672,0x52B0,{ 0xAF,0x02,0xBA,0x50,0xF2,0xCF,0x17,0xE0 } }; // 99A52365-9672-52B0-AF02-BA50F2CF17E0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::IReadOnlyDesktopSiteBridgeStatics>{ 0xD3041551,0x3190,0x5321,{ 0x81,0x44,0x19,0xE0,0x02,0x24,0x6B,0xE6 } }; // D3041551-3190-5321-8144-19E002246BE6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::ISystemVisualSiteBridge>{ 0x6EEDD227,0x3802,0x5772,{ 0xB2,0x4E,0x1D,0x8B,0x73,0x6C,0xFF,0xA7 } }; // 6EEDD227-3802-5772-B24E-1D8B736CFFA7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Content::ISystemVisualSiteBridgeStatics>{ 0xF37DDB4C,0x8B68,0x5EB6,{ 0xBD,0xEE,0x31,0x25,0x69,0x73,0xF4,0x2D } }; // F37DDB4C-8B68-5EB6-BDEE-31256973F42D
    template <> struct default_interface<winrt::Microsoft::UI::Content::ChildContentLink>{ using type = winrt::Microsoft::UI::Content::IChildContentLink; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ContentAppWindowBridge>{ using type = winrt::Microsoft::UI::Content::IContentAppWindowBridge; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ContentCoordinateConverter>{ using type = winrt::Microsoft::UI::Content::IContentCoordinateConverter; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ContentDeferral>{ using type = winrt::Microsoft::UI::Content::IContentDeferral; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ContentEnvironmentSettingChangedEventArgs>{ using type = winrt::Microsoft::UI::Content::IContentEnvironmentSettingChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ContentEnvironmentStateChangedEventArgs>{ using type = winrt::Microsoft::UI::Content::IContentEnvironmentStateChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ContentExternalBackdropLink>{ using type = winrt::Microsoft::UI::Content::IContentExternalBackdropLink; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ContentExternalOutputLink>{ using type = winrt::Microsoft::UI::Content::IContentExternalOutputLink; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ContentIsland>{ using type = winrt::Microsoft::UI::Content::IContentIsland; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ContentIslandAutomationProviderRequestedEventArgs>{ using type = winrt::Microsoft::UI::Content::IContentIslandAutomationProviderRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ContentIslandEnvironment>{ using type = winrt::Microsoft::UI::Content::IContentIslandEnvironment; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ContentIslandStateChangedEventArgs>{ using type = winrt::Microsoft::UI::Content::IContentIslandStateChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ContentSite>{ using type = winrt::Microsoft::UI::Content::IContentSite; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ContentSiteEnvironment>{ using type = winrt::Microsoft::UI::Content::IContentSiteEnvironment; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ContentSiteEnvironmentView>{ using type = winrt::Microsoft::UI::Content::IContentSiteEnvironmentView; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ContentSiteRequestedStateChangedEventArgs>{ using type = winrt::Microsoft::UI::Content::IContentSiteRequestedStateChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ContentSiteView>{ using type = winrt::Microsoft::UI::Content::IContentSiteView; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::CoreWindowSiteBridge>{ using type = winrt::Microsoft::UI::Content::ICoreWindowSiteBridge; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::CoreWindowTopLevelWindowBridge>{ using type = winrt::Microsoft::UI::Content::IContentNodeOwner; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::DesktopChildSiteBridge>{ using type = winrt::Microsoft::UI::Content::IDesktopChildSiteBridge; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::DesktopSiteBridge>{ using type = winrt::Microsoft::UI::Content::IDesktopSiteBridge; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::EndpointConnectionEventArgs>{ using type = winrt::Microsoft::UI::Content::IEndpointConnectionEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::EndpointRequestedStateChangedEventArgs>{ using type = winrt::Microsoft::UI::Content::IEndpointRequestedStateChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::PopupWindowSiteBridge>{ using type = winrt::Microsoft::UI::Content::IPopupWindowSiteBridge; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ProcessStarter>{ using type = winrt::Microsoft::UI::Content::IProcessStarter; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::ReadOnlyDesktopSiteBridge>{ using type = winrt::Microsoft::UI::Content::IReadOnlyDesktopSiteBridge; };
    template <> struct default_interface<winrt::Microsoft::UI::Content::SystemVisualSiteBridge>{ using type = winrt::Microsoft::UI::Content::ISystemVisualSiteBridge; };
    template <> struct abi<winrt::Microsoft::UI::Content::IChildContentLink>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ActualSize(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall put_ActualSize(winrt::Windows::Foundation::Numerics::float2) noexcept = 0;
            virtual int32_t __stdcall get_SiteView(void**) noexcept = 0;
            virtual int32_t __stdcall Connect(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IChildContentLinkStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall CreateWithSystemContentIsland(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentAppWindowBridge>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentAppWindowBridgeStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetForWindowId(struct struct_Microsoft_UI_WindowId, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentCoordinateConverter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall ConvertLocalToScreenWithPoint(winrt::Windows::Foundation::Point, struct struct_Windows_Graphics_PointInt32*) noexcept = 0;
            virtual int32_t __stdcall ConvertLocalToScreenWithPoints(uint32_t, winrt::Windows::Foundation::Point*, uint32_t* __resultSize, struct struct_Windows_Graphics_PointInt32**) noexcept = 0;
            virtual int32_t __stdcall ConvertLocalToScreenWithPointsAndRoundingMode(uint32_t, winrt::Windows::Foundation::Point*, int32_t, uint32_t* __resultSize, struct struct_Windows_Graphics_PointInt32**) noexcept = 0;
            virtual int32_t __stdcall ConvertLocalToScreenWithRect(winrt::Windows::Foundation::Rect, struct struct_Windows_Graphics_RectInt32*) noexcept = 0;
            virtual int32_t __stdcall ConvertScreenToLocalWithPoint(struct struct_Windows_Graphics_PointInt32, winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall ConvertScreenToLocalWithPoints(uint32_t, struct struct_Windows_Graphics_PointInt32*, uint32_t* __resultSize, winrt::Windows::Foundation::Point**) noexcept = 0;
            virtual int32_t __stdcall ConvertScreenToLocalWithRect(struct struct_Windows_Graphics_RectInt32, winrt::Windows::Foundation::Rect*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentCoordinateConverterFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentCoordinateConverterStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateForWindowId(struct struct_Microsoft_UI_WindowId, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentDeferral>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Complete() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentEnvironmentSettingChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SettingName(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentEnvironmentStateChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DidAppWindowIdChange(bool*) noexcept = 0;
            virtual int32_t __stdcall get_DidDisplayIdChange(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentExternalBackdropLink>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DispatcherQueue(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExternalBackdropBorderMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ExternalBackdropBorderMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PlacementVisual(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentExternalBackdropLinkStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentExternalOutputLink>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundColor(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundColor(struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall get_DispatcherQueue(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExternalOutputBorderMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ExternalOutputBorderMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsAboveContent(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsAboveContent(bool) noexcept = 0;
            virtual int32_t __stdcall get_PlacementVisual(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentExternalOutputLinkStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsSupported(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentIsland>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ActualSize(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall get_AppData(void**) noexcept = 0;
            virtual int32_t __stdcall put_AppData(void*) noexcept = 0;
            virtual int32_t __stdcall get_CoordinateConverter(void**) noexcept = 0;
            virtual int32_t __stdcall get_CustomProperties(void**) noexcept = 0;
            virtual int32_t __stdcall get_DispatcherQueue(void**) noexcept = 0;
            virtual int32_t __stdcall get_Environment(void**) noexcept = 0;
            virtual int32_t __stdcall get_Id(uint64_t*) noexcept = 0;
            virtual int32_t __stdcall get_IsConnected(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsHitTestVisibleWhenTransparent(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHitTestVisibleWhenTransparent(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsIslandEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsIslandEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsIslandVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsIslandVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSiteEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsSiteVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall get_LayoutDirection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_RasterizationScale(float*) noexcept = 0;
            virtual int32_t __stdcall GetAutomationHostProvider(void**) noexcept = 0;
            virtual int32_t __stdcall GetStateChangeDeferral(void**) noexcept = 0;
            virtual int32_t __stdcall RequestSize(winrt::Windows::Foundation::Numerics::float2) noexcept = 0;
            virtual int32_t __stdcall add_AutomationProviderRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_AutomationProviderRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_StateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_StateChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentIsland2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Compositor(void**) noexcept = 0;
            virtual int32_t __stdcall get_Root(void**) noexcept = 0;
            virtual int32_t __stdcall put_Root(void*) noexcept = 0;
            virtual int32_t __stdcall add_Connected(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Connected(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Disconnected(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Disconnected(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentIsland3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Children(void**) noexcept = 0;
            virtual int32_t __stdcall get_Offset(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall get_RotationAngleInDegrees(float*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentIslandAutomationProviderRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AutomationProvider(void**) noexcept = 0;
            virtual int32_t __stdcall put_AutomationProvider(void*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentIslandEndpointConnectionPrivate>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ConnectionInfo(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsRemoteEndpointConnected(bool*) noexcept = 0;
            virtual int32_t __stdcall ConnectRemoteEndpoint(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentIslandEnvironment>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AppWindowId(struct struct_Microsoft_UI_WindowId*) noexcept = 0;
            virtual int32_t __stdcall get_DisplayId(struct struct_Microsoft_UI_DisplayId*) noexcept = 0;
            virtual int32_t __stdcall add_SettingChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SettingChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_StateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_StateChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentIslandEnvironment2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CurrentOrientation(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_DisplayScale(float*) noexcept = 0;
            virtual int32_t __stdcall get_NativeOrientation(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall add_ThemeChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ThemeChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentIslandEnvironmentFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentIslandFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentIslandStateChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DidActualSizeChange(bool*) noexcept = 0;
            virtual int32_t __stdcall get_DidSiteEnabledChange(bool*) noexcept = 0;
            virtual int32_t __stdcall get_DidSiteVisibleChange(bool*) noexcept = 0;
            virtual int32_t __stdcall get_DidLayoutDirectionChange(bool*) noexcept = 0;
            virtual int32_t __stdcall get_DidRasterizationScaleChange(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentIslandStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
            virtual int32_t __stdcall FindAllForCompositor(void*, uint32_t* __resultSize, void***) noexcept = 0;
            virtual int32_t __stdcall FindAllForCurrentThread(uint32_t* __resultSize, void***) noexcept = 0;
            virtual int32_t __stdcall GetByVisual(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetFromId(uint64_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentIslandStatics2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateSystemContentIsland(void*, void**) noexcept = 0;
            virtual int32_t __stdcall FindAllForSystemCompositor(void*, uint32_t* __resultSize, void***) noexcept = 0;
            virtual int32_t __stdcall GetBySystemVisual(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentLink>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Parent(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentNodeOwner>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentSite>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ActualSize(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall put_ActualSize(winrt::Windows::Foundation::Numerics::float2) noexcept = 0;
            virtual int32_t __stdcall get_ClientSize(struct struct_Windows_Graphics_SizeInt32*) noexcept = 0;
            virtual int32_t __stdcall put_ClientSize(struct struct_Windows_Graphics_SizeInt32) noexcept = 0;
            virtual int32_t __stdcall get_CoordinateConverter(void**) noexcept = 0;
            virtual int32_t __stdcall get_DispatcherQueue(void**) noexcept = 0;
            virtual int32_t __stdcall get_Environment(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsConnected(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsSiteEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSiteEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSiteVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSiteVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_LayoutDirection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_LayoutDirection(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_OverrideScale(float*) noexcept = 0;
            virtual int32_t __stdcall put_OverrideScale(float) noexcept = 0;
            virtual int32_t __stdcall get_ParentScale(float*) noexcept = 0;
            virtual int32_t __stdcall put_ParentScale(float) noexcept = 0;
            virtual int32_t __stdcall get_RasterizationScale(float*) noexcept = 0;
            virtual int32_t __stdcall get_RequestedSize(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall get_ShouldApplyRasterizationScale(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShouldApplyRasterizationScale(bool) noexcept = 0;
            virtual int32_t __stdcall get_View(void**) noexcept = 0;
            virtual int32_t __stdcall GetIslandStateChangeDeferral(void**) noexcept = 0;
            virtual int32_t __stdcall add_RequestedStateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RequestedStateChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentSite2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Compositor(void**) noexcept = 0;
            virtual int32_t __stdcall get_SiteVisual(void**) noexcept = 0;
            virtual int32_t __stdcall SetContentNodeParent(void*) noexcept = 0;
            virtual int32_t __stdcall TryGetAutomationProvider(void**, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentSite3>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Offset(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall put_Offset(winrt::Windows::Foundation::Numerics::float2) noexcept = 0;
            virtual int32_t __stdcall get_RotationAngleInDegrees(float*) noexcept = 0;
            virtual int32_t __stdcall put_RotationAngleInDegrees(float) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentSiteBridge>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DispatcherQueue(void**) noexcept = 0;
            virtual int32_t __stdcall get_LayoutDirectionOverride(void**) noexcept = 0;
            virtual int32_t __stdcall put_LayoutDirectionOverride(void*) noexcept = 0;
            virtual int32_t __stdcall get_OverrideScale(float*) noexcept = 0;
            virtual int32_t __stdcall put_OverrideScale(float) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentSiteBridge2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OffsetOverride(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall put_OffsetOverride(winrt::Windows::Foundation::Numerics::float2) noexcept = 0;
            virtual int32_t __stdcall get_RotationAngleInDegreesOverride(float*) noexcept = 0;
            virtual int32_t __stdcall put_RotationAngleInDegreesOverride(float) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentSiteBridgeEndpointConnectionPrivate>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ConnectionInfo(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsRemoteEndpointConnected(bool*) noexcept = 0;
            virtual int32_t __stdcall AcceptRemoteEndpoint(void*) noexcept = 0;
            virtual int32_t __stdcall add_RemoteEndpointConnecting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RemoteEndpointConnecting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_RemoteEndpointDisconnected(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RemoteEndpointDisconnected(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_RemoteEndpointRequestedStateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RemoteEndpointRequestedStateChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentSiteEnvironment>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AppWindowId(struct struct_Microsoft_UI_WindowId*) noexcept = 0;
            virtual int32_t __stdcall put_AppWindowId(struct struct_Microsoft_UI_WindowId) noexcept = 0;
            virtual int32_t __stdcall get_DisplayId(struct struct_Microsoft_UI_DisplayId*) noexcept = 0;
            virtual int32_t __stdcall put_DisplayId(struct struct_Microsoft_UI_DisplayId) noexcept = 0;
            virtual int32_t __stdcall get_View(void**) noexcept = 0;
            virtual int32_t __stdcall NotifySettingChanged(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentSiteEnvironment2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CurrentOrientation(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CurrentOrientation(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_DisplayScale(float*) noexcept = 0;
            virtual int32_t __stdcall put_DisplayScale(float) noexcept = 0;
            virtual int32_t __stdcall get_NativeOrientation(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_NativeOrientation(uint32_t) noexcept = 0;
            virtual int32_t __stdcall NotifyThemeChanged() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentSiteEnvironmentFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentSiteEnvironmentView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AppWindowId(struct struct_Microsoft_UI_WindowId*) noexcept = 0;
            virtual int32_t __stdcall get_DisplayId(struct struct_Microsoft_UI_DisplayId*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentSiteEnvironmentViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentSiteFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentSiteRequestedStateChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DidRequestedSizeChange(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentSiteView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ActualSize(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall get_ClientSize(struct struct_Windows_Graphics_SizeInt32*) noexcept = 0;
            virtual int32_t __stdcall get_CoordinateConverter(void**) noexcept = 0;
            virtual int32_t __stdcall get_DispatcherQueue(void**) noexcept = 0;
            virtual int32_t __stdcall get_EnvironmentView(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsConnected(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsSiteEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsSiteVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall get_LayoutDirection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_OverrideScale(float*) noexcept = 0;
            virtual int32_t __stdcall get_ParentScale(float*) noexcept = 0;
            virtual int32_t __stdcall get_RasterizationScale(float*) noexcept = 0;
            virtual int32_t __stdcall get_RequestedSize(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall get_ShouldApplyRasterizationScale(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentSiteView2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Offset(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall get_RotationAngleInDegrees(float*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IContentSiteViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::ICoreWindowSiteBridge>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Connect(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::ICoreWindowSiteBridgeStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsSupported(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IDesktopChildSiteBridge>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ResizePolicy(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ResizePolicy(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SiteView(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IDesktopChildSiteBridgeStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, struct struct_Microsoft_UI_WindowId, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IDesktopSiteBridge>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall get_WindowId(struct struct_Microsoft_UI_WindowId*) noexcept = 0;
            virtual int32_t __stdcall Connect(void*) noexcept = 0;
            virtual int32_t __stdcall Disable() noexcept = 0;
            virtual int32_t __stdcall Enable() noexcept = 0;
            virtual int32_t __stdcall Hide() noexcept = 0;
            virtual int32_t __stdcall MoveAndResize(struct struct_Windows_Graphics_RectInt32) noexcept = 0;
            virtual int32_t __stdcall MoveInZOrderAtBottom() noexcept = 0;
            virtual int32_t __stdcall MoveInZOrderAtTop() noexcept = 0;
            virtual int32_t __stdcall MoveInZOrderBelow(struct struct_Microsoft_UI_WindowId) noexcept = 0;
            virtual int32_t __stdcall Show() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IDesktopSiteBridge2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall TryCreatePopupSiteBridge(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IDesktopSiteBridgeFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IDesktopSiteBridgeStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall IsSupported(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IEndpointConnectionEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ConnectionInfo(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IEndpointRequestedStateChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DidRequestedSizeChange(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IPopupWindowSiteBridge>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Anchored(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Anchored(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IProcessStarter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IProcessStarterFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IProcessStarterStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall StartProcess(void*, void*, uint32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IReadOnlyDesktopSiteBridge>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SiteView(void**) noexcept = 0;
            virtual int32_t __stdcall get_WindowId(struct struct_Microsoft_UI_WindowId*) noexcept = 0;
            virtual int32_t __stdcall Connect(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::IReadOnlyDesktopSiteBridgeStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, struct struct_Microsoft_UI_WindowId, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::ISystemVisualSiteBridge>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Site(void**) noexcept = 0;
            virtual int32_t __stdcall Connect(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Content::ISystemVisualSiteBridgeStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void*, struct struct_Microsoft_UI_WindowId, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IChildContentLink
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) ActualSize() const;
        WINRT_IMPL_AUTO(void) ActualSize(winrt::Windows::Foundation::Numerics::float2 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentSiteView) SiteView() const;
        WINRT_IMPL_AUTO(void) Connect(winrt::Microsoft::UI::Content::ContentIsland const& content) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IChildContentLink>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IChildContentLink<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IChildContentLinkStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ChildContentLink) Create(winrt::Microsoft::UI::Content::ContentIsland const& parent, winrt::Microsoft::UI::Composition::ContainerVisual const& placementVisual) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ChildContentLink) Create(winrt::Microsoft::UI::Content::ContentIsland const& parent, winrt::Windows::UI::Composition::ContainerVisual const& placementVisual) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IChildContentLinkStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IChildContentLinkStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentAppWindowBridge
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentAppWindowBridge>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentAppWindowBridge<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentAppWindowBridgeStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentAppWindowBridge) GetForWindowId(winrt::Microsoft::UI::WindowId const& childWindowId) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentAppWindowBridgeStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentAppWindowBridgeStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentCoordinateConverter
    {
        WINRT_IMPL_AUTO(winrt::Windows::Graphics::PointInt32) ConvertLocalToScreen(winrt::Windows::Foundation::Point const& localPoint) const;
        WINRT_IMPL_AUTO(com_array<winrt::Windows::Graphics::PointInt32>) ConvertLocalToScreen(array_view<winrt::Windows::Foundation::Point const> localPoints) const;
        WINRT_IMPL_AUTO(com_array<winrt::Windows::Graphics::PointInt32>) ConvertLocalToScreen(array_view<winrt::Windows::Foundation::Point const> localPoints, winrt::Microsoft::UI::Content::ContentCoordinateRoundingMode const& roundingMode) const;
        WINRT_IMPL_AUTO(winrt::Windows::Graphics::RectInt32) ConvertLocalToScreen(winrt::Windows::Foundation::Rect const& localRect) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) ConvertScreenToLocal(winrt::Windows::Graphics::PointInt32 const& screenPoint) const;
        WINRT_IMPL_AUTO(com_array<winrt::Windows::Foundation::Point>) ConvertScreenToLocal(array_view<winrt::Windows::Graphics::PointInt32 const> screenPoints) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) ConvertScreenToLocal(winrt::Windows::Graphics::RectInt32 const& screenRect) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentCoordinateConverter>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentCoordinateConverter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentCoordinateConverterFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentCoordinateConverterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentCoordinateConverterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentCoordinateConverterStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentCoordinateConverter) CreateForWindowId(winrt::Microsoft::UI::WindowId const& windowId) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentCoordinateConverterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentCoordinateConverterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentDeferral
    {
        WINRT_IMPL_AUTO(void) Complete() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentDeferral>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentDeferral<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentEnvironmentSettingChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) SettingName() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentEnvironmentSettingChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentEnvironmentSettingChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentEnvironmentStateChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) DidAppWindowIdChange() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) DidDisplayIdChange() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentEnvironmentStateChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentEnvironmentStateChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentExternalBackdropLink
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Dispatching::DispatcherQueue) DispatcherQueue() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::CompositionBorderMode) ExternalBackdropBorderMode() const;
        WINRT_IMPL_AUTO(void) ExternalBackdropBorderMode(winrt::Microsoft::UI::Composition::CompositionBorderMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Visual) PlacementVisual() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentExternalBackdropLink>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentExternalBackdropLink<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentExternalBackdropLinkStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentExternalBackdropLink) Create(winrt::Microsoft::UI::Composition::Compositor const& compositor) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentExternalBackdropLinkStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentExternalBackdropLinkStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentExternalOutputLink
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Color) BackgroundColor() const;
        WINRT_IMPL_AUTO(void) BackgroundColor(winrt::Windows::UI::Color const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Dispatching::DispatcherQueue) DispatcherQueue() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::CompositionBorderMode) ExternalOutputBorderMode() const;
        WINRT_IMPL_AUTO(void) ExternalOutputBorderMode(winrt::Microsoft::UI::Composition::CompositionBorderMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsAboveContent() const;
        WINRT_IMPL_AUTO(void) IsAboveContent(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Visual) PlacementVisual() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentExternalOutputLink>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentExternalOutputLink<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentExternalOutputLinkStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentExternalOutputLink) Create(winrt::Microsoft::UI::Composition::Compositor const& compositor) const;
        WINRT_IMPL_AUTO(bool) IsSupported() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentExternalOutputLinkStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentExternalOutputLinkStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentIsland
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) ActualSize() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) AppData() const;
        WINRT_IMPL_AUTO(void) AppData(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentCoordinateConverter) CoordinateConverter() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IPropertySet) CustomProperties() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Dispatching::DispatcherQueue) DispatcherQueue() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentIslandEnvironment) Environment() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint64_t) Id() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsConnected() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsHitTestVisibleWhenTransparent() const;
        WINRT_IMPL_AUTO(void) IsHitTestVisibleWhenTransparent(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsIslandEnabled() const;
        WINRT_IMPL_AUTO(void) IsIslandEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsIslandVisible() const;
        WINRT_IMPL_AUTO(void) IsIslandVisible(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSiteEnabled() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSiteVisible() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentLayoutDirection) LayoutDirection() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) RasterizationScale() const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) GetAutomationHostProvider() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentDeferral) GetStateChangeDeferral() const;
        WINRT_IMPL_AUTO(void) RequestSize(winrt::Windows::Foundation::Numerics::float2 const& size) const;
        WINRT_IMPL_AUTO(winrt::event_token) AutomationProviderRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::ContentIsland, winrt::Microsoft::UI::Content::ContentIslandAutomationProviderRequestedEventArgs> const& handler) const;
        using AutomationProviderRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Content::IContentIsland, &impl::abi_t<winrt::Microsoft::UI::Content::IContentIsland>::remove_AutomationProviderRequested>;
        [[nodiscard]] AutomationProviderRequested_revoker AutomationProviderRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::ContentIsland, winrt::Microsoft::UI::Content::ContentIslandAutomationProviderRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) AutomationProviderRequested(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) StateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::ContentIsland, winrt::Microsoft::UI::Content::ContentIslandStateChangedEventArgs> const& handler) const;
        using StateChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Content::IContentIsland, &impl::abi_t<winrt::Microsoft::UI::Content::IContentIsland>::remove_StateChanged>;
        [[nodiscard]] StateChanged_revoker StateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::ContentIsland, winrt::Microsoft::UI::Content::ContentIslandStateChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) StateChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentIsland>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentIsland<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentIsland2
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Compositor) Compositor() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Visual) Root() const;
        WINRT_IMPL_AUTO(void) Root(winrt::Microsoft::UI::Composition::Visual const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) Connected(winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Content::ContentIsland> const& handler) const;
        using Connected_revoker = impl::event_revoker<winrt::Microsoft::UI::Content::IContentIsland2, &impl::abi_t<winrt::Microsoft::UI::Content::IContentIsland2>::remove_Connected>;
        [[nodiscard]] Connected_revoker Connected(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Content::ContentIsland> const& handler) const;
        WINRT_IMPL_AUTO(void) Connected(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Disconnected(winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Content::ContentIsland> const& handler) const;
        using Disconnected_revoker = impl::event_revoker<winrt::Microsoft::UI::Content::IContentIsland2, &impl::abi_t<winrt::Microsoft::UI::Content::IContentIsland2>::remove_Disconnected>;
        [[nodiscard]] Disconnected_revoker Disconnected(auto_revoke_t, winrt::Windows::Foundation::EventHandler<winrt::Microsoft::UI::Content::ContentIsland> const& handler) const;
        WINRT_IMPL_AUTO(void) Disconnected(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentIsland2>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentIsland2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentIsland3
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IIterable<winrt::Microsoft::UI::Content::ChildContentLink>) Children() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) Offset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) RotationAngleInDegrees() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentIsland3>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentIsland3<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentIslandAutomationProviderRequestedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) AutomationProvider() const;
        WINRT_IMPL_AUTO(void) AutomationProvider(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Handled() const;
        WINRT_IMPL_AUTO(void) Handled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentIslandAutomationProviderRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentIslandAutomationProviderRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentIslandEndpointConnectionPrivate
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) ConnectionInfo() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsRemoteEndpointConnected() const;
        WINRT_IMPL_AUTO(void) ConnectRemoteEndpoint(param::hstring const& siteConnectionInfo) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentIslandEndpointConnectionPrivate>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentIslandEndpointConnectionPrivate<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentIslandEnvironment
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::WindowId) AppWindowId() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::DisplayId) DisplayId() const;
        WINRT_IMPL_AUTO(winrt::event_token) SettingChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::ContentIslandEnvironment, winrt::Microsoft::UI::Content::ContentEnvironmentSettingChangedEventArgs> const& handler) const;
        using SettingChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Content::IContentIslandEnvironment, &impl::abi_t<winrt::Microsoft::UI::Content::IContentIslandEnvironment>::remove_SettingChanged>;
        [[nodiscard]] SettingChanged_revoker SettingChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::ContentIslandEnvironment, winrt::Microsoft::UI::Content::ContentEnvironmentSettingChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) SettingChanged(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) StateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::ContentIslandEnvironment, winrt::Microsoft::UI::Content::ContentEnvironmentStateChangedEventArgs> const& handler) const;
        using StateChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Content::IContentIslandEnvironment, &impl::abi_t<winrt::Microsoft::UI::Content::IContentIslandEnvironment>::remove_StateChanged>;
        [[nodiscard]] StateChanged_revoker StateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::ContentIslandEnvironment, winrt::Microsoft::UI::Content::ContentEnvironmentStateChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) StateChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentIslandEnvironment>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentIslandEnvironment<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentIslandEnvironment2
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentDisplayOrientations) CurrentOrientation() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) DisplayScale() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentDisplayOrientations) NativeOrientation() const;
        WINRT_IMPL_AUTO(winrt::event_token) ThemeChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::ContentIslandEnvironment, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ThemeChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Content::IContentIslandEnvironment2, &impl::abi_t<winrt::Microsoft::UI::Content::IContentIslandEnvironment2>::remove_ThemeChanged>;
        [[nodiscard]] ThemeChanged_revoker ThemeChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::ContentIslandEnvironment, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) ThemeChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentIslandEnvironment2>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentIslandEnvironment2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentIslandEnvironmentFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentIslandEnvironmentFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentIslandEnvironmentFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentIslandFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentIslandFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentIslandFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentIslandStateChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) DidActualSizeChange() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) DidSiteEnabledChange() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) DidSiteVisibleChange() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) DidLayoutDirectionChange() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) DidRasterizationScaleChange() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentIslandStateChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentIslandStateChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentIslandStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentIsland) Create(winrt::Microsoft::UI::Composition::Visual const& root) const;
        WINRT_IMPL_AUTO(com_array<winrt::Microsoft::UI::Content::ContentIsland>) FindAllForCompositor(winrt::Microsoft::UI::Composition::Compositor const& compositor) const;
        WINRT_IMPL_AUTO(com_array<winrt::Microsoft::UI::Content::ContentIsland>) FindAllForCurrentThread() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentIsland) GetByVisual(winrt::Microsoft::UI::Composition::Visual const& child) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentIsland) GetFromId(uint64_t id) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentIslandStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentIslandStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentIslandStatics2
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentIsland) Create(winrt::Windows::UI::Composition::Visual const& root) const;
        WINRT_IMPL_AUTO(com_array<winrt::Microsoft::UI::Content::ContentIsland>) FindAllForCompositor(winrt::Windows::UI::Composition::Compositor const& compositor) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentIsland) GetByVisual(winrt::Windows::UI::Composition::Visual const& child) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentIslandStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentIslandStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentLink
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentIsland) Parent() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentLink>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentLink<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentNodeOwner
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentNodeOwner>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentNodeOwner<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentSite
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) ActualSize() const;
        WINRT_IMPL_AUTO(void) ActualSize(winrt::Windows::Foundation::Numerics::float2 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Graphics::SizeInt32) ClientSize() const;
        WINRT_IMPL_AUTO(void) ClientSize(winrt::Windows::Graphics::SizeInt32 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentCoordinateConverter) CoordinateConverter() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Dispatching::DispatcherQueue) DispatcherQueue() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentSiteEnvironment) Environment() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsConnected() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSiteEnabled() const;
        WINRT_IMPL_AUTO(void) IsSiteEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSiteVisible() const;
        WINRT_IMPL_AUTO(void) IsSiteVisible(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentLayoutDirection) LayoutDirection() const;
        WINRT_IMPL_AUTO(void) LayoutDirection(winrt::Microsoft::UI::Content::ContentLayoutDirection const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) OverrideScale() const;
        WINRT_IMPL_AUTO(void) OverrideScale(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) ParentScale() const;
        WINRT_IMPL_AUTO(void) ParentScale(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) RasterizationScale() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) RequestedSize() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ShouldApplyRasterizationScale() const;
        WINRT_IMPL_AUTO(void) ShouldApplyRasterizationScale(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentSiteView) View() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentDeferral) GetIslandStateChangeDeferral() const;
        WINRT_IMPL_AUTO(winrt::event_token) RequestedStateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::ContentSite, winrt::Microsoft::UI::Content::ContentSiteRequestedStateChangedEventArgs> const& handler) const;
        using RequestedStateChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Content::IContentSite, &impl::abi_t<winrt::Microsoft::UI::Content::IContentSite>::remove_RequestedStateChanged>;
        [[nodiscard]] RequestedStateChanged_revoker RequestedStateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::ContentSite, winrt::Microsoft::UI::Content::ContentSiteRequestedStateChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) RequestedStateChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentSite>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentSite<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentSite2
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Compositor) Compositor() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Visual) SiteVisual() const;
        WINRT_IMPL_AUTO(void) SetContentNodeParent(winrt::Microsoft::UI::Content::IContentNodeOwner const& value) const;
        WINRT_IMPL_AUTO(bool) TryGetAutomationProvider(winrt::Windows::Foundation::IInspectable& provider) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentSite2>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentSite2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentSite3
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) Offset() const;
        WINRT_IMPL_AUTO(void) Offset(winrt::Windows::Foundation::Numerics::float2 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) RotationAngleInDegrees() const;
        WINRT_IMPL_AUTO(void) RotationAngleInDegrees(float value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentSite3>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentSite3<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentSiteBridge
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Dispatching::DispatcherQueue) DispatcherQueue() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IReference<winrt::Microsoft::UI::Content::ContentLayoutDirection>) LayoutDirectionOverride() const;
        WINRT_IMPL_AUTO(void) LayoutDirectionOverride(winrt::Windows::Foundation::IReference<winrt::Microsoft::UI::Content::ContentLayoutDirection> const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) OverrideScale() const;
        WINRT_IMPL_AUTO(void) OverrideScale(float value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentSiteBridge>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentSiteBridge<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentSiteBridge2
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) OffsetOverride() const;
        WINRT_IMPL_AUTO(void) OffsetOverride(winrt::Windows::Foundation::Numerics::float2 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) RotationAngleInDegreesOverride() const;
        WINRT_IMPL_AUTO(void) RotationAngleInDegreesOverride(float value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentSiteBridge2>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentSiteBridge2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentSiteBridgeEndpointConnectionPrivate
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) ConnectionInfo() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsRemoteEndpointConnected() const;
        WINRT_IMPL_AUTO(void) AcceptRemoteEndpoint(param::hstring const& islandConnectionInfo) const;
        WINRT_IMPL_AUTO(winrt::event_token) RemoteEndpointConnecting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::IContentSiteBridgeEndpointConnectionPrivate, winrt::Microsoft::UI::Content::EndpointConnectionEventArgs> const& handler) const;
        using RemoteEndpointConnecting_revoker = impl::event_revoker<winrt::Microsoft::UI::Content::IContentSiteBridgeEndpointConnectionPrivate, &impl::abi_t<winrt::Microsoft::UI::Content::IContentSiteBridgeEndpointConnectionPrivate>::remove_RemoteEndpointConnecting>;
        [[nodiscard]] RemoteEndpointConnecting_revoker RemoteEndpointConnecting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::IContentSiteBridgeEndpointConnectionPrivate, winrt::Microsoft::UI::Content::EndpointConnectionEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) RemoteEndpointConnecting(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) RemoteEndpointDisconnected(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::IContentSiteBridgeEndpointConnectionPrivate, winrt::Microsoft::UI::Content::EndpointConnectionEventArgs> const& handler) const;
        using RemoteEndpointDisconnected_revoker = impl::event_revoker<winrt::Microsoft::UI::Content::IContentSiteBridgeEndpointConnectionPrivate, &impl::abi_t<winrt::Microsoft::UI::Content::IContentSiteBridgeEndpointConnectionPrivate>::remove_RemoteEndpointDisconnected>;
        [[nodiscard]] RemoteEndpointDisconnected_revoker RemoteEndpointDisconnected(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::IContentSiteBridgeEndpointConnectionPrivate, winrt::Microsoft::UI::Content::EndpointConnectionEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) RemoteEndpointDisconnected(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) RemoteEndpointRequestedStateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::IContentSiteBridgeEndpointConnectionPrivate, winrt::Microsoft::UI::Content::EndpointRequestedStateChangedEventArgs> const& handler) const;
        using RemoteEndpointRequestedStateChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Content::IContentSiteBridgeEndpointConnectionPrivate, &impl::abi_t<winrt::Microsoft::UI::Content::IContentSiteBridgeEndpointConnectionPrivate>::remove_RemoteEndpointRequestedStateChanged>;
        [[nodiscard]] RemoteEndpointRequestedStateChanged_revoker RemoteEndpointRequestedStateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Content::IContentSiteBridgeEndpointConnectionPrivate, winrt::Microsoft::UI::Content::EndpointRequestedStateChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) RemoteEndpointRequestedStateChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentSiteBridgeEndpointConnectionPrivate>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentSiteBridgeEndpointConnectionPrivate<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentSiteEnvironment
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::WindowId) AppWindowId() const;
        WINRT_IMPL_AUTO(void) AppWindowId(winrt::Microsoft::UI::WindowId const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::DisplayId) DisplayId() const;
        WINRT_IMPL_AUTO(void) DisplayId(winrt::Microsoft::UI::DisplayId const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentSiteEnvironmentView) View() const;
        WINRT_IMPL_AUTO(void) NotifySettingChanged(param::hstring const& setting) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentSiteEnvironment>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentSiteEnvironment<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentSiteEnvironment2
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentDisplayOrientations) CurrentOrientation() const;
        WINRT_IMPL_AUTO(void) CurrentOrientation(winrt::Microsoft::UI::Content::ContentDisplayOrientations const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) DisplayScale() const;
        WINRT_IMPL_AUTO(void) DisplayScale(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentDisplayOrientations) NativeOrientation() const;
        WINRT_IMPL_AUTO(void) NativeOrientation(winrt::Microsoft::UI::Content::ContentDisplayOrientations const& value) const;
        WINRT_IMPL_AUTO(void) NotifyThemeChanged() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentSiteEnvironment2>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentSiteEnvironment2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentSiteEnvironmentFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentSiteEnvironmentFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentSiteEnvironmentFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentSiteEnvironmentView
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::WindowId) AppWindowId() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::DisplayId) DisplayId() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentSiteEnvironmentView>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentSiteEnvironmentView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentSiteEnvironmentViewFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentSiteEnvironmentViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentSiteEnvironmentViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentSiteFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentSiteFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentSiteFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentSiteRequestedStateChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) DidRequestedSizeChange() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentSiteRequestedStateChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentSiteRequestedStateChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentSiteView
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) ActualSize() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Graphics::SizeInt32) ClientSize() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentCoordinateConverter) CoordinateConverter() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Dispatching::DispatcherQueue) DispatcherQueue() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentSiteEnvironmentView) EnvironmentView() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsConnected() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSiteEnabled() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSiteVisible() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentLayoutDirection) LayoutDirection() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) OverrideScale() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) ParentScale() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) RasterizationScale() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) RequestedSize() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ShouldApplyRasterizationScale() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentSiteView>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentSiteView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentSiteView2
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) Offset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) RotationAngleInDegrees() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentSiteView2>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentSiteView2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IContentSiteViewFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IContentSiteViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IContentSiteViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_ICoreWindowSiteBridge
    {
        WINRT_IMPL_AUTO(void) Connect(winrt::Microsoft::UI::Content::ContentIsland const& content) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::ICoreWindowSiteBridge>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_ICoreWindowSiteBridge<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_ICoreWindowSiteBridgeStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::CoreWindowSiteBridge) Create(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Windows::UI::Core::CoreWindow const& coreWindow) const;
        WINRT_IMPL_AUTO(bool) IsSupported() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::ICoreWindowSiteBridgeStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_ICoreWindowSiteBridgeStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IDesktopChildSiteBridge
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentSizePolicy) ResizePolicy() const;
        WINRT_IMPL_AUTO(void) ResizePolicy(winrt::Microsoft::UI::Content::ContentSizePolicy const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentSiteView) SiteView() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IDesktopChildSiteBridge>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IDesktopChildSiteBridge<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IDesktopChildSiteBridgeStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::DesktopChildSiteBridge) Create(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Microsoft::UI::WindowId const& parentWindowId) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IDesktopChildSiteBridgeStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IDesktopChildSiteBridgeStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IDesktopSiteBridge
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsEnabled() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsVisible() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::WindowId) WindowId() const;
        WINRT_IMPL_AUTO(void) Connect(winrt::Microsoft::UI::Content::ContentIsland const& content) const;
        WINRT_IMPL_AUTO(void) Disable() const;
        WINRT_IMPL_AUTO(void) Enable() const;
        WINRT_IMPL_AUTO(void) Hide() const;
        WINRT_IMPL_AUTO(void) MoveAndResize(winrt::Windows::Graphics::RectInt32 const& rect) const;
        WINRT_IMPL_AUTO(void) MoveInZOrderAtBottom() const;
        WINRT_IMPL_AUTO(void) MoveInZOrderAtTop() const;
        WINRT_IMPL_AUTO(void) MoveInZOrderBelow(winrt::Microsoft::UI::WindowId const& windowId) const;
        WINRT_IMPL_AUTO(void) Show() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IDesktopSiteBridge>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IDesktopSiteBridge<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IDesktopSiteBridge2
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::PopupWindowSiteBridge) TryCreatePopupSiteBridge() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IDesktopSiteBridge2>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IDesktopSiteBridge2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IDesktopSiteBridgeFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IDesktopSiteBridgeFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IDesktopSiteBridgeFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IDesktopSiteBridgeStatics
    {
        WINRT_IMPL_AUTO(bool) IsSupported() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IDesktopSiteBridgeStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IDesktopSiteBridgeStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IEndpointConnectionEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) ConnectionInfo() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IEndpointConnectionEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IEndpointConnectionEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IEndpointRequestedStateChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) DidRequestedSizeChange() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IEndpointRequestedStateChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IEndpointRequestedStateChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IPopupWindowSiteBridge
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Anchored() const;
        WINRT_IMPL_AUTO(void) Anchored(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IPopupWindowSiteBridge>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IPopupWindowSiteBridge<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IProcessStarter
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IProcessStarter>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IProcessStarter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IProcessStarterFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IProcessStarterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IProcessStarterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IProcessStarterStatics
    {
        WINRT_IMPL_AUTO(void) StartProcess(param::hstring const& executablePath, param::hstring const& connectionInfo, uint32_t& processId) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IProcessStarterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IProcessStarterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IReadOnlyDesktopSiteBridge
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentSiteView) SiteView() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::WindowId) WindowId() const;
        WINRT_IMPL_AUTO(void) Connect(winrt::Microsoft::UI::Content::ContentIsland const& content) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IReadOnlyDesktopSiteBridge>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IReadOnlyDesktopSiteBridge<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_IReadOnlyDesktopSiteBridgeStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ReadOnlyDesktopSiteBridge) Create(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Microsoft::UI::WindowId const& windowId) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::IReadOnlyDesktopSiteBridgeStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_IReadOnlyDesktopSiteBridgeStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_ISystemVisualSiteBridge
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::ContentSite) Site() const;
        WINRT_IMPL_AUTO(void) Connect(winrt::Microsoft::UI::Content::ContentIsland const& content) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::ISystemVisualSiteBridge>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_ISystemVisualSiteBridge<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Content_ISystemVisualSiteBridgeStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Content::SystemVisualSiteBridge) Create(winrt::Microsoft::UI::Composition::Compositor const& localCompositor, winrt::Windows::UI::Composition::ContainerVisual const& hostVisual, winrt::Microsoft::UI::WindowId const& parentForInputWindowId) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Content::ISystemVisualSiteBridgeStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Content_ISystemVisualSiteBridgeStatics<D>;
    };
}
#endif
