// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220110.5

#pragma once
#ifndef WINRT_Microsoft_Windows_System_Workloads_0_H
#define WINRT_Microsoft_Windows_System_Workloads_0_H
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct HResult;
    template <typename TResult, typename TProgress> struct __declspec(empty_bases) IAsyncOperationWithProgress;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct __declspec(empty_bases) IVector;
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::System::Workloads
{
    enum class WorkloadProgressStatus : int32_t
    {
        Queued = 0,
        InProgress = 1,
        CompletedSuccess = 2,
        CompletedFailure = 3,
    };
    enum class WorkloadStatus : int32_t
    {
        InProgress = 0,
        CompletedSuccess = 1,
        CompletedFailure = 2,
    };
    struct IWorkload;
    struct IWorkloadHandler;
    struct IWorkloadManager;
    struct IWorkloadManagerStatics;
    struct IWorkloadProgress;
    struct IWorkloadResult;
    struct Workload;
    struct WorkloadManager;
    struct WorkloadProgress;
    struct WorkloadResult;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::System::Workloads::IWorkload>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::System::Workloads::IWorkloadHandler>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::System::Workloads::IWorkloadManager>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::System::Workloads::IWorkloadManagerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::System::Workloads::IWorkloadProgress>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::System::Workloads::IWorkloadResult>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::System::Workloads::Workload>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::System::Workloads::WorkloadManager>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::System::Workloads::WorkloadProgress>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::System::Workloads::WorkloadResult>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::System::Workloads::WorkloadProgressStatus>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::System::Workloads::WorkloadStatus>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::System::Workloads::Workload> = L"Microsoft.Windows.System.Workloads.Workload";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::System::Workloads::WorkloadManager> = L"Microsoft.Windows.System.Workloads.WorkloadManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::System::Workloads::WorkloadProgress> = L"Microsoft.Windows.System.Workloads.WorkloadProgress";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::System::Workloads::WorkloadResult> = L"Microsoft.Windows.System.Workloads.WorkloadResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::System::Workloads::WorkloadProgressStatus> = L"Microsoft.Windows.System.Workloads.WorkloadProgressStatus";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::System::Workloads::WorkloadStatus> = L"Microsoft.Windows.System.Workloads.WorkloadStatus";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::System::Workloads::IWorkload> = L"Microsoft.Windows.System.Workloads.IWorkload";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::System::Workloads::IWorkloadHandler> = L"Microsoft.Windows.System.Workloads.IWorkloadHandler";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::System::Workloads::IWorkloadManager> = L"Microsoft.Windows.System.Workloads.IWorkloadManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::System::Workloads::IWorkloadManagerStatics> = L"Microsoft.Windows.System.Workloads.IWorkloadManagerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::System::Workloads::IWorkloadProgress> = L"Microsoft.Windows.System.Workloads.IWorkloadProgress";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::System::Workloads::IWorkloadResult> = L"Microsoft.Windows.System.Workloads.IWorkloadResult";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::System::Workloads::IWorkload>{ 0x5D88125E,0x3CFD,0x51D8,{ 0xBE,0x53,0xFD,0x2A,0xD2,0x96,0xDF,0x4B } }; // 5D88125E-3CFD-51D8-BE53-FD2AD296DF4B
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::System::Workloads::IWorkloadHandler>{ 0x2704DF02,0x2050,0x58C6,{ 0xAD,0xFC,0xFA,0x8C,0x5E,0xDC,0xC0,0xF4 } }; // 2704DF02-2050-58C6-ADFC-FA8C5EDCC0F4
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::System::Workloads::IWorkloadManager>{ 0x1B610FEA,0x2305,0x519F,{ 0xB0,0xAC,0x4D,0x31,0x74,0x4B,0x5C,0x83 } }; // 1B610FEA-2305-519F-B0AC-4D31744B5C83
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::System::Workloads::IWorkloadManagerStatics>{ 0x963F2789,0x5B4F,0x532E,{ 0xB7,0x0F,0xEE,0xFE,0x1F,0x8F,0xF5,0x28 } }; // 963F2789-5B4F-532E-B70F-EEFE1F8FF528
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::System::Workloads::IWorkloadProgress>{ 0x8C3B7F4F,0x9507,0x592F,{ 0x84,0x51,0x78,0xEB,0xF2,0x33,0x59,0x5A } }; // 8C3B7F4F-9507-592F-8451-78EBF233595A
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::System::Workloads::IWorkloadResult>{ 0xD38CF74A,0x4BD6,0x5335,{ 0xB2,0x8F,0x10,0x9B,0x06,0xF6,0xE6,0x68 } }; // D38CF74A-4BD6-5335-B28F-109B06F6E668
    template <> struct default_interface<winrt::Microsoft::Windows::System::Workloads::Workload>{ using type = winrt::Microsoft::Windows::System::Workloads::IWorkload; };
    template <> struct default_interface<winrt::Microsoft::Windows::System::Workloads::WorkloadManager>{ using type = winrt::Microsoft::Windows::System::Workloads::IWorkloadManager; };
    template <> struct default_interface<winrt::Microsoft::Windows::System::Workloads::WorkloadProgress>{ using type = winrt::Microsoft::Windows::System::Workloads::IWorkloadProgress; };
    template <> struct default_interface<winrt::Microsoft::Windows::System::Workloads::WorkloadResult>{ using type = winrt::Microsoft::Windows::System::Workloads::IWorkloadResult; };
    template <> struct abi<winrt::Microsoft::Windows::System::Workloads::IWorkload>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Id(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayName(void**) noexcept = 0;
            virtual int32_t __stdcall get_WorkloadHandlerActivatableClassId(void**) noexcept = 0;
            virtual int32_t __stdcall get_WorkloadHandler(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::System::Workloads::IWorkloadHandler>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall RemoveAsync(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::System::Workloads::IWorkloadManager>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetWorkload(void*, void**) noexcept = 0;
            virtual int32_t __stdcall FindIds(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::System::Workloads::IWorkloadManagerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetDefault(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::System::Workloads::IWorkloadProgress>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_status(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_status(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_percentage(double*) noexcept = 0;
            virtual int32_t __stdcall put_percentage(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::System::Workloads::IWorkloadResult>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Status(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ExtendedError(winrt::hresult*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_System_Workloads_IWorkload
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Id() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) DisplayName() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) WorkloadHandlerActivatableClassId() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::System::Workloads::IWorkloadHandler) WorkloadHandler() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::System::Workloads::IWorkload>
    {
        template <typename D> using type = consume_Microsoft_Windows_System_Workloads_IWorkload<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_System_Workloads_IWorkloadHandler
    {
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::System::Workloads::WorkloadResult, winrt::Microsoft::Windows::System::Workloads::WorkloadProgress>) RemoveAsync() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::System::Workloads::IWorkloadHandler>
    {
        template <typename D> using type = consume_Microsoft_Windows_System_Workloads_IWorkloadHandler<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_System_Workloads_IWorkloadManager
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::Windows::System::Workloads::Workload) GetWorkload(param::hstring const& id) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<hstring>) FindIds() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::System::Workloads::IWorkloadManager>
    {
        template <typename D> using type = consume_Microsoft_Windows_System_Workloads_IWorkloadManager<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_System_Workloads_IWorkloadManagerStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::Windows::System::Workloads::WorkloadManager) GetDefault() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::System::Workloads::IWorkloadManagerStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_System_Workloads_IWorkloadManagerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_System_Workloads_IWorkloadProgress
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::System::Workloads::WorkloadProgressStatus) status() const;
        WINRT_IMPL_AUTO(void) status(winrt::Microsoft::Windows::System::Workloads::WorkloadProgressStatus const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) percentage() const;
        WINRT_IMPL_AUTO(void) percentage(double value) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::System::Workloads::IWorkloadProgress>
    {
        template <typename D> using type = consume_Microsoft_Windows_System_Workloads_IWorkloadProgress<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_System_Workloads_IWorkloadResult
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Windows::System::Workloads::WorkloadStatus) Status() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::hresult) ExtendedError() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::System::Workloads::IWorkloadResult>
    {
        template <typename D> using type = consume_Microsoft_Windows_System_Workloads_IWorkloadResult<D>;
    };
}
#endif
