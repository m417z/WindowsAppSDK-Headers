// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220110.5

#pragma once
#ifndef WINRT_Microsoft_Windows_System_Workloads_H
#define WINRT_Microsoft_Windows_System_Workloads_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.220110.5"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.220110.5"
#include "winrt/Microsoft.Windows.System.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Microsoft.Windows.System.Workloads.2.h"
namespace winrt::impl
{
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_Microsoft_Windows_System_Workloads_IWorkload<D>::Id() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::System::Workloads::IWorkload)->get_Id(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_Microsoft_Windows_System_Workloads_IWorkload<D>::DisplayName() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::System::Workloads::IWorkload)->get_DisplayName(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_Microsoft_Windows_System_Workloads_IWorkload<D>::WorkloadHandlerActivatableClassId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::System::Workloads::IWorkload)->get_WorkloadHandlerActivatableClassId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::Windows::System::Workloads::IWorkloadHandler) consume_Microsoft_Windows_System_Workloads_IWorkload<D>::WorkloadHandler() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::System::Workloads::IWorkload)->get_WorkloadHandler(&value));
        return winrt::Microsoft::Windows::System::Workloads::IWorkloadHandler{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::System::Workloads::WorkloadResult, winrt::Microsoft::Windows::System::Workloads::WorkloadProgress>) consume_Microsoft_Windows_System_Workloads_IWorkloadHandler<D>::RemoveAsync() const
    {
        void* operation{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::System::Workloads::IWorkloadHandler)->RemoveAsync(&operation));
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::System::Workloads::WorkloadResult, winrt::Microsoft::Windows::System::Workloads::WorkloadProgress>{ operation, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::Windows::System::Workloads::Workload) consume_Microsoft_Windows_System_Workloads_IWorkloadManager<D>::GetWorkload(param::hstring const& id) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::System::Workloads::IWorkloadManager)->GetWorkload(*(void**)(&id), &result));
        return winrt::Microsoft::Windows::System::Workloads::Workload{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<hstring>) consume_Microsoft_Windows_System_Workloads_IWorkloadManager<D>::FindIds() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::System::Workloads::IWorkloadManager)->FindIds(&result));
        return winrt::Windows::Foundation::Collections::IVector<hstring>{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::Windows::System::Workloads::WorkloadManager) consume_Microsoft_Windows_System_Workloads_IWorkloadManagerStatics<D>::GetDefault() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::System::Workloads::IWorkloadManagerStatics)->GetDefault(&result));
        return winrt::Microsoft::Windows::System::Workloads::WorkloadManager{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::Windows::System::Workloads::WorkloadProgressStatus) consume_Microsoft_Windows_System_Workloads_IWorkloadProgress<D>::status() const
    {
        winrt::Microsoft::Windows::System::Workloads::WorkloadProgressStatus value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::System::Workloads::IWorkloadProgress)->get_status(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Windows_System_Workloads_IWorkloadProgress<D>::status(winrt::Microsoft::Windows::System::Workloads::WorkloadProgressStatus const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::System::Workloads::IWorkloadProgress)->put_status(static_cast<int32_t>(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(double) consume_Microsoft_Windows_System_Workloads_IWorkloadProgress<D>::percentage() const
    {
        double value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::System::Workloads::IWorkloadProgress)->get_percentage(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_Windows_System_Workloads_IWorkloadProgress<D>::percentage(double value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::System::Workloads::IWorkloadProgress)->put_percentage(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::Windows::System::Workloads::WorkloadStatus) consume_Microsoft_Windows_System_Workloads_IWorkloadResult<D>::Status() const
    {
        winrt::Microsoft::Windows::System::Workloads::WorkloadStatus value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::System::Workloads::IWorkloadResult)->get_Status(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::hresult) consume_Microsoft_Windows_System_Workloads_IWorkloadResult<D>::ExtendedError() const
    {
        winrt::hresult value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::Windows::System::Workloads::IWorkloadResult)->get_ExtendedError(put_abi(value)));
        return value;
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::System::Workloads::IWorkload> : produce_base<D, winrt::Microsoft::Windows::System::Workloads::IWorkload>
    {
        int32_t __stdcall get_Id(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Id());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DisplayName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DisplayName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_WorkloadHandlerActivatableClassId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().WorkloadHandlerActivatableClassId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_WorkloadHandler(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::System::Workloads::IWorkloadHandler>(this->shim().WorkloadHandler());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::System::Workloads::IWorkloadHandler> : produce_base<D, winrt::Microsoft::Windows::System::Workloads::IWorkloadHandler>
    {
        int32_t __stdcall RemoveAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::System::Workloads::WorkloadResult, winrt::Microsoft::Windows::System::Workloads::WorkloadProgress>>(this->shim().RemoveAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::System::Workloads::IWorkloadManager> : produce_base<D, winrt::Microsoft::Windows::System::Workloads::IWorkloadManager>
    {
        int32_t __stdcall GetWorkload(void* id, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::System::Workloads::Workload>(this->shim().GetWorkload(*reinterpret_cast<hstring const*>(&id)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FindIds(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<hstring>>(this->shim().FindIds());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::System::Workloads::IWorkloadManagerStatics> : produce_base<D, winrt::Microsoft::Windows::System::Workloads::IWorkloadManagerStatics>
    {
        int32_t __stdcall GetDefault(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::System::Workloads::WorkloadManager>(this->shim().GetDefault());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::System::Workloads::IWorkloadProgress> : produce_base<D, winrt::Microsoft::Windows::System::Workloads::IWorkloadProgress>
    {
        int32_t __stdcall get_status(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::System::Workloads::WorkloadProgressStatus>(this->shim().status());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_status(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().status(*reinterpret_cast<winrt::Microsoft::Windows::System::Workloads::WorkloadProgressStatus const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_percentage(double* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<double>(this->shim().percentage());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_percentage(double value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().percentage(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::System::Workloads::IWorkloadResult> : produce_base<D, winrt::Microsoft::Windows::System::Workloads::IWorkloadResult>
    {
        int32_t __stdcall get_Status(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::System::Workloads::WorkloadStatus>(this->shim().Status());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExtendedError(winrt::hresult* value) noexcept final try
        {
            zero_abi<winrt::hresult>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::hresult>(this->shim().ExtendedError());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::System::Workloads
{
    inline Workload::Workload() :
        Workload(impl::call_factory_cast<Workload(*)(winrt::Windows::Foundation::IActivationFactory const&), Workload>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<Workload>(); }))
    {
    }
    inline auto WorkloadManager::GetDefault()
    {
        return impl::call_factory_cast<winrt::Microsoft::Windows::System::Workloads::WorkloadManager(*)(IWorkloadManagerStatics const&), WorkloadManager, IWorkloadManagerStatics>([](IWorkloadManagerStatics const& f) { return f.GetDefault(); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::System::Workloads::IWorkload> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::System::Workloads::IWorkloadHandler> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::System::Workloads::IWorkloadManager> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::System::Workloads::IWorkloadManagerStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::System::Workloads::IWorkloadProgress> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::System::Workloads::IWorkloadResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::System::Workloads::Workload> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::System::Workloads::WorkloadManager> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::System::Workloads::WorkloadProgress> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::System::Workloads::WorkloadResult> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
