// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_VisionInternal_2_H
#define WINRT_Microsoft_Windows_VisionInternal_2_H
#include "winrt/impl/Microsoft.Windows.Vision.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Graphics.2.h"
#include "winrt/impl/Microsoft.Windows.VisionInternal.1.h"
WINRT_EXPORT namespace winrt::Microsoft::Windows::VisionInternal
{
    struct BoundingBox
    {
        winrt::Windows::Foundation::Point BottomLeft {};
        winrt::Windows::Foundation::Point BottomRight {};
        winrt::Windows::Foundation::Point TopLeft {};
        winrt::Windows::Foundation::Point TopRight {};
    };
    inline bool operator==(BoundingBox const& left, BoundingBox const& right) noexcept
    {
        return left.BottomLeft == right.BottomLeft && left.BottomRight == right.BottomRight && left.TopLeft == right.TopLeft && left.TopRight == right.TopRight;
    }
    inline bool operator!=(BoundingBox const& left, BoundingBox const& right) noexcept
    {
        return !(left == right);
    }
    struct RecognizedLineStyle
    {
        float Confidence {};
        winrt::Microsoft::Windows::VisionInternal::DetectedLineStyle Name {};
    };
    inline bool operator==(RecognizedLineStyle const& left, RecognizedLineStyle const& right) noexcept
    {
        return left.Confidence == right.Confidence && left.Name == right.Name;
    }
    inline bool operator!=(RecognizedLineStyle const& left, RecognizedLineStyle const& right) noexcept
    {
        return !(left == right);
    }
    struct LineInternal
    {
        winrt::Microsoft::Windows::VisionInternal::BoundingBox BoundingBox {};
        winrt::Microsoft::Windows::VisionInternal::RecognizedLineStyle Style {};
        uint32_t WordCount {};
    };
    inline bool operator==(LineInternal const& left, LineInternal const& right) noexcept
    {
        return left.BoundingBox == right.BoundingBox && left.Style == right.Style && left.WordCount == right.WordCount;
    }
    inline bool operator!=(LineInternal const& left, LineInternal const& right) noexcept
    {
        return !(left == right);
    }
    struct RecognizedTextInternal
    {
        float ImageAngle {};
        uint32_t LineCount {};
    };
    inline bool operator==(RecognizedTextInternal const& left, RecognizedTextInternal const& right) noexcept
    {
        return left.ImageAngle == right.ImageAngle && left.LineCount == right.LineCount;
    }
    inline bool operator!=(RecognizedTextInternal const& left, RecognizedTextInternal const& right) noexcept
    {
        return !(left == right);
    }
    struct ScreenRegionBoundingBox
    {
        uint32_t Left {};
        uint32_t Top {};
        uint32_t Right {};
        uint32_t Bottom {};
    };
    inline bool operator==(ScreenRegionBoundingBox const& left, ScreenRegionBoundingBox const& right) noexcept
    {
        return left.Left == right.Left && left.Top == right.Top && left.Right == right.Right && left.Bottom == right.Bottom;
    }
    inline bool operator!=(ScreenRegionBoundingBox const& left, ScreenRegionBoundingBox const& right) noexcept
    {
        return !(left == right);
    }
    struct ScreenRegionInternal
    {
        winrt::Microsoft::Windows::Vision::ScreenRegionBoundingBox BoundingBox {};
        winrt::Microsoft::Windows::Vision::ScreenRegionLabel Label {};
        float Score {};
    };
    inline bool operator==(ScreenRegionInternal const& left, ScreenRegionInternal const& right) noexcept
    {
        return left.BoundingBox == right.BoundingBox && left.Label == right.Label && left.Score == right.Score;
    }
    inline bool operator!=(ScreenRegionInternal const& left, ScreenRegionInternal const& right) noexcept
    {
        return !(left == right);
    }
    struct ScreenRegionInternal4
    {
        winrt::Microsoft::Windows::VisionInternal::ScreenRegionBoundingBox BoundingBox {};
        winrt::Microsoft::Windows::VisionInternal::ScreenRegionLabel Label {};
        float Score {};
    };
    inline bool operator==(ScreenRegionInternal4 const& left, ScreenRegionInternal4 const& right) noexcept
    {
        return left.BoundingBox == right.BoundingBox && left.Label == right.Label && left.Score == right.Score;
    }
    inline bool operator!=(ScreenRegionInternal4 const& left, ScreenRegionInternal4 const& right) noexcept
    {
        return !(left == right);
    }
    struct TextRecognizerOptionsInternal
    {
        winrt::Microsoft::Windows::VisionInternal::OrientationDetectionOptions OrientationDetection {};
        winrt::Windows::Graphics::SizeInt32 MaxAnalysisSize {};
        uint32_t MaxLineCount {};
    };
    inline bool operator==(TextRecognizerOptionsInternal const& left, TextRecognizerOptionsInternal const& right) noexcept
    {
        return left.OrientationDetection == right.OrientationDetection && left.MaxAnalysisSize == right.MaxAnalysisSize && left.MaxLineCount == right.MaxLineCount;
    }
    inline bool operator!=(TextRecognizerOptionsInternal const& left, TextRecognizerOptionsInternal const& right) noexcept
    {
        return !(left == right);
    }
    struct WordInternal
    {
        winrt::Microsoft::Windows::VisionInternal::BoundingBox BoundingBox {};
        float Confidence {};
    };
    inline bool operator==(WordInternal const& left, WordInternal const& right) noexcept
    {
        return left.BoundingBox == right.BoundingBox && left.Confidence == right.Confidence;
    }
    inline bool operator!=(WordInternal const& left, WordInternal const& right) noexcept
    {
        return !(left == right);
    }
}
#endif
