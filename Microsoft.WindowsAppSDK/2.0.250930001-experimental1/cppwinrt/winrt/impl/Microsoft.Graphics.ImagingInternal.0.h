// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Graphics_ImagingInternal_0_H
#define WINRT_Microsoft_Graphics_ImagingInternal_0_H
WINRT_EXPORT namespace winrt::Microsoft::Windows::PrivateCommon
{
    struct ImageBufferResource;
    struct ImageBufferView;
    struct ImageBufferViewData;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct IAsyncAction;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IVectorView;
}
WINRT_EXPORT namespace winrt::Windows::Graphics
{
    struct PointInt32;
    struct RectInt32;
}
WINRT_EXPORT namespace winrt::Windows::Graphics::Imaging
{
    struct BitmapBounds;
}
WINRT_EXPORT namespace winrt::Microsoft::Graphics::ImagingInternal
{
    enum class ParallaxAxisDirectionInternal : int32_t
    {
        xAndYAxis = 0,
        xAxisOnly = 1,
        yAxisOnly = 2,
    };
    struct IDepthMapCreatorSession;
    struct IDepthMapCreatorSession2;
    struct IDetectFacesResult;
    struct IDetectedFace;
    struct IFaceDetectorSession;
    struct IImageObjectExtractorSession;
    struct IImageScalerSession;
    struct IImageSegmenterSession;
    struct IParallaxCreatorSession;
    struct IParallaxCreatorSession2;
    struct IParallaxCreatorSession3;
    struct ITrimapImageSegmenterSession;
    struct ITrimapImageSegmenterSession2;
    struct ITrimapImageSegmenterSession3;
    struct ModelProperties;
    struct ParallaxImageOptions;
    struct DepthMapSessionContract;
    struct FaceAnalysisContract;
    struct ImageObjectExtractorSessionContract;
    struct ImageScalerSessionContract;
    struct ImageSegmenterSessionContract;
    struct ParallaxCreatorSessionContract;
    struct TrimapImageSegmenterSessionContract;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Graphics::ImagingInternal::IDepthMapCreatorSession>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::ImagingInternal::IDepthMapCreatorSession2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::ImagingInternal::IDetectFacesResult>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::ImagingInternal::IDetectedFace>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::ImagingInternal::IFaceDetectorSession>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::ImagingInternal::IImageObjectExtractorSession>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::ImagingInternal::IImageScalerSession>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::ImagingInternal::IImageSegmenterSession>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession3>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession3>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Graphics::ImagingInternal::ParallaxAxisDirectionInternal>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Graphics::ImagingInternal::ModelProperties>{ using type = struct_category<int32_t, int32_t>; };
    template <> struct category<winrt::Microsoft::Graphics::ImagingInternal::ParallaxImageOptions>{ using type = struct_category<uint32_t, float, uint32_t, float, winrt::Microsoft::Graphics::ImagingInternal::ParallaxAxisDirectionInternal>; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::ParallaxAxisDirectionInternal> = L"Microsoft.Graphics.ImagingInternal.ParallaxAxisDirectionInternal";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::ModelProperties> = L"Microsoft.Graphics.ImagingInternal.ModelProperties";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::ParallaxImageOptions> = L"Microsoft.Graphics.ImagingInternal.ParallaxImageOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::IDepthMapCreatorSession> = L"Microsoft.Graphics.ImagingInternal.IDepthMapCreatorSession";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::IDepthMapCreatorSession2> = L"Microsoft.Graphics.ImagingInternal.IDepthMapCreatorSession2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::IDetectFacesResult> = L"Microsoft.Graphics.ImagingInternal.IDetectFacesResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::IDetectedFace> = L"Microsoft.Graphics.ImagingInternal.IDetectedFace";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::IFaceDetectorSession> = L"Microsoft.Graphics.ImagingInternal.IFaceDetectorSession";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::IImageObjectExtractorSession> = L"Microsoft.Graphics.ImagingInternal.IImageObjectExtractorSession";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::IImageScalerSession> = L"Microsoft.Graphics.ImagingInternal.IImageScalerSession";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::IImageSegmenterSession> = L"Microsoft.Graphics.ImagingInternal.IImageSegmenterSession";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession> = L"Microsoft.Graphics.ImagingInternal.IParallaxCreatorSession";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession2> = L"Microsoft.Graphics.ImagingInternal.IParallaxCreatorSession2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession3> = L"Microsoft.Graphics.ImagingInternal.IParallaxCreatorSession3";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession> = L"Microsoft.Graphics.ImagingInternal.ITrimapImageSegmenterSession";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession2> = L"Microsoft.Graphics.ImagingInternal.ITrimapImageSegmenterSession2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession3> = L"Microsoft.Graphics.ImagingInternal.ITrimapImageSegmenterSession3";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::DepthMapSessionContract> = L"Microsoft.Graphics.ImagingInternal.DepthMapSessionContract";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::FaceAnalysisContract> = L"Microsoft.Graphics.ImagingInternal.FaceAnalysisContract";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::ImageObjectExtractorSessionContract> = L"Microsoft.Graphics.ImagingInternal.ImageObjectExtractorSessionContract";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::ImageScalerSessionContract> = L"Microsoft.Graphics.ImagingInternal.ImageScalerSessionContract";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::ImageSegmenterSessionContract> = L"Microsoft.Graphics.ImagingInternal.ImageSegmenterSessionContract";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::ParallaxCreatorSessionContract> = L"Microsoft.Graphics.ImagingInternal.ParallaxCreatorSessionContract";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Graphics::ImagingInternal::TrimapImageSegmenterSessionContract> = L"Microsoft.Graphics.ImagingInternal.TrimapImageSegmenterSessionContract";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::ImagingInternal::IDepthMapCreatorSession>{ 0x6CDA0FA0,0x12CC,0x5FDE,{ 0xA9,0xA6,0x43,0xCE,0xC2,0x8E,0x97,0x43 } }; // 6CDA0FA0-12CC-5FDE-A9A6-43CEC28E9743
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::ImagingInternal::IDepthMapCreatorSession2>{ 0xD6CA2B4A,0x55C3,0x5444,{ 0x8C,0x7F,0xAE,0x13,0x47,0x89,0xA0,0x45 } }; // D6CA2B4A-55C3-5444-8C7F-AE134789A045
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::ImagingInternal::IDetectFacesResult>{ 0x59BF0161,0x0327,0x50DA,{ 0xA6,0x1D,0x66,0x31,0x47,0x1F,0xA4,0xAB } }; // 59BF0161-0327-50DA-A61D-6631471FA4AB
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::ImagingInternal::IDetectedFace>{ 0xB465AB4E,0xDEB5,0x5B04,{ 0xA3,0xB8,0x80,0xF7,0xAD,0xDD,0x80,0xEE } }; // B465AB4E-DEB5-5B04-A3B8-80F7ADDD80EE
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::ImagingInternal::IFaceDetectorSession>{ 0xFAE93005,0x5159,0x5690,{ 0xBA,0x42,0x36,0x2B,0x80,0x06,0xEB,0xDF } }; // FAE93005-5159-5690-BA42-362B8006EBDF
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::ImagingInternal::IImageObjectExtractorSession>{ 0x7476CC04,0x51CA,0x5022,{ 0x8B,0x18,0xE7,0x42,0xAA,0x51,0x1D,0x0A } }; // 7476CC04-51CA-5022-8B18-E742AA511D0A
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::ImagingInternal::IImageScalerSession>{ 0xE7853D0E,0xD3BF,0x5865,{ 0xBE,0xCF,0x5E,0xFC,0xF9,0xA5,0xF3,0xAD } }; // E7853D0E-D3BF-5865-BECF-5EFCF9A5F3AD
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::ImagingInternal::IImageSegmenterSession>{ 0x4A2E2F79,0x4439,0x56DC,{ 0xB9,0x0D,0xE6,0x37,0x93,0xEF,0x0E,0xD0 } }; // 4A2E2F79-4439-56DC-B90D-E63793EF0ED0
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession>{ 0x0914119E,0x78A7,0x52EB,{ 0x94,0xE1,0xD4,0x83,0xDD,0x6E,0xA5,0xD0 } }; // 0914119E-78A7-52EB-94E1-D483DD6EA5D0
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession2>{ 0x9C1EFAF2,0x0073,0x4174,{ 0x9F,0xA2,0x52,0xB1,0x94,0x8E,0x60,0xCA } }; // 9C1EFAF2-0073-4174-9FA2-52B1948E60CA
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession3>{ 0x63F1EC38,0x8201,0x5A7F,{ 0xA0,0x6F,0x34,0xBD,0xE1,0xAC,0x25,0x68 } }; // 63F1EC38-8201-5A7F-A06F-34BDE1AC2568
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession>{ 0x997FBC1E,0xD2FF,0x56BD,{ 0xA1,0x5B,0x32,0xB6,0x58,0xF2,0x35,0xA8 } }; // 997FBC1E-D2FF-56BD-A15B-32B658F235A8
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession2>{ 0x80253408,0x85C6,0x4023,{ 0x9F,0xFA,0x85,0xD0,0xD4,0x68,0xA1,0x59 } }; // 80253408-85C6-4023-9FFA-85D0D468A159
    template <> inline constexpr guid guid_v<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession3>{ 0xF38A38E2,0x8508,0x5B35,{ 0xA6,0xFC,0x33,0x11,0x1C,0x21,0x26,0x91 } }; // F38A38E2-8508-5B35-A6FC-33111C212691
    template <> struct abi<winrt::Microsoft::Graphics::ImagingInternal::IDepthMapCreatorSession>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateAsync(struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::ImagingInternal::IDepthMapCreatorSession2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void*, uint32_t, uint32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::ImagingInternal::IDetectFacesResult>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Faces(uint32_t* __valueSize, void***) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::ImagingInternal::IDetectedFace>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FaceBoundingBox(struct struct_Windows_Graphics_Imaging_BitmapBounds*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::ImagingInternal::IFaceDetectorSession>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall DetectFacesInRegion(void*, struct struct_Windows_Graphics_Imaging_BitmapBounds, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::ImagingInternal::IImageObjectExtractorSession>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall InitializeWithImageBuffer(void*, uint32_t, uint32_t, uint32_t, float*) noexcept = 0;
            virtual int32_t __stdcall GetBackground(uint32_t, float*, void*, uint32_t, struct struct_Windows_Graphics_RectInt32*, uint32_t, struct struct_Windows_Graphics_PointInt32*, uint32_t, struct struct_Windows_Graphics_PointInt32*, uint32_t, uint32_t) noexcept = 0;
            virtual int32_t __stdcall GetModelProperties(struct struct_Microsoft_Graphics_ImagingInternal_ModelProperties*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::ImagingInternal::IImageScalerSession>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall ScaleImage(void*, void*, int32_t, int32_t, uint32_t, uint32_t) noexcept = 0;
            virtual int32_t __stdcall MaxSupportedScaleFactor(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::ImagingInternal::IImageSegmenterSession>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall RemoveBackground(void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateParallaxImagesAsync(struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData, void*, void*, struct struct_Microsoft_Graphics_ImagingInternal_ParallaxImageOptions, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateParallaxImagesAsync(struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData, void*, void*, struct struct_Microsoft_Graphics_ImagingInternal_ParallaxImageOptions, uint32_t, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession3>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateParallaxImages(void*, uint32_t, void**, struct struct_Microsoft_Graphics_ImagingInternal_ParallaxImageOptions, uint32_t, uint32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall RemoveBackgroundAsync(struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall RemoveBackgroundAsync(struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData, uint32_t, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession3>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall RemoveBackground(void*, void*, void*, void*, uint32_t, uint32_t) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Graphics_ImagingInternal_IDepthMapCreatorSession
    {
        auto CreateAsync(winrt::Microsoft::Windows::PrivateCommon::ImageBufferView const& inputBufferView, winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData const& inputBufferViewData, winrt::Microsoft::Windows::PrivateCommon::ImageBufferView const& outputBufferView, winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData const& outputBufferViewData) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::ImagingInternal::IDepthMapCreatorSession>
    {
        template <typename D> using type = consume_Microsoft_Graphics_ImagingInternal_IDepthMapCreatorSession<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_ImagingInternal_IDepthMapCreatorSession2
    {
        auto Create(winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& inputImageBufferResource, winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& outputImageBufferResource, uint32_t priority, uint32_t frequency) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::ImagingInternal::IDepthMapCreatorSession2>
    {
        template <typename D> using type = consume_Microsoft_Graphics_ImagingInternal_IDepthMapCreatorSession2<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_ImagingInternal_IDetectFacesResult
    {
        [[nodiscard]] auto Faces() const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::ImagingInternal::IDetectFacesResult>
    {
        template <typename D> using type = consume_Microsoft_Graphics_ImagingInternal_IDetectFacesResult<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_ImagingInternal_IDetectedFace
    {
        [[nodiscard]] auto FaceBoundingBox() const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::ImagingInternal::IDetectedFace>
    {
        template <typename D> using type = consume_Microsoft_Graphics_ImagingInternal_IDetectedFace<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_ImagingInternal_IFaceDetectorSession
    {
        auto DetectFacesInRegion(winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& imageBufferResource, winrt::Windows::Graphics::Imaging::BitmapBounds const& region) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::ImagingInternal::IFaceDetectorSession>
    {
        template <typename D> using type = consume_Microsoft_Graphics_ImagingInternal_IFaceDetectorSession<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_ImagingInternal_IImageObjectExtractorSession
    {
        auto InitializeWithImageBuffer(winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& inputImageBufferResource, uint32_t priority, uint32_t frequency, array_view<float> encoding) const;
        auto GetBackground(array_view<float const> encoding, winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& outputImageBufferResource, array_view<winrt::Windows::Graphics::RectInt32 const> rects, array_view<winrt::Windows::Graphics::PointInt32 const> inclusionPoints, array_view<winrt::Windows::Graphics::PointInt32 const> exclusionPoints, uint32_t priority, uint32_t frequency) const;
        auto GetModelProperties() const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::ImagingInternal::IImageObjectExtractorSession>
    {
        template <typename D> using type = consume_Microsoft_Graphics_ImagingInternal_IImageObjectExtractorSession<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_ImagingInternal_IImageScalerSession
    {
        auto ScaleImage(winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& inputImageBufferResource, winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& outputImageBufferResource, int32_t width, int32_t height, uint32_t priority, uint32_t frequency) const;
        auto MaxSupportedScaleFactor() const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::ImagingInternal::IImageScalerSession>
    {
        template <typename D> using type = consume_Microsoft_Graphics_ImagingInternal_IImageScalerSession<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_ImagingInternal_IImageSegmenterSession
    {
        auto RemoveBackground(winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& inputImageBufferResource, winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& outputImageBufferResource) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::ImagingInternal::IImageSegmenterSession>
    {
        template <typename D> using type = consume_Microsoft_Graphics_ImagingInternal_IImageSegmenterSession<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_ImagingInternal_IParallaxCreatorSession
    {
        auto CreateParallaxImagesAsync(winrt::Microsoft::Windows::PrivateCommon::ImageBufferView const& inputView, winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData const& inputViewData, param::async_vector_view<winrt::Microsoft::Windows::PrivateCommon::ImageBufferView> const& outputViews, param::async_vector_view<winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData> const& outputViewData, winrt::Microsoft::Graphics::ImagingInternal::ParallaxImageOptions const& options) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession>
    {
        template <typename D> using type = consume_Microsoft_Graphics_ImagingInternal_IParallaxCreatorSession<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_ImagingInternal_IParallaxCreatorSession2
    {
        auto CreateParallaxImagesAsync(winrt::Microsoft::Windows::PrivateCommon::ImageBufferView const& inputView, winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData const& inputViewData, param::async_vector_view<winrt::Microsoft::Windows::PrivateCommon::ImageBufferView> const& outputViews, param::async_vector_view<winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData> const& outputViewData, winrt::Microsoft::Graphics::ImagingInternal::ParallaxImageOptions const& options, uint32_t priority, uint32_t frequency) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession2>
    {
        template <typename D> using type = consume_Microsoft_Graphics_ImagingInternal_IParallaxCreatorSession2<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_ImagingInternal_IParallaxCreatorSession3
    {
        auto CreateParallaxImages(winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& inputImageBufferResource, array_view<winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const> outputImageBufferResources, winrt::Microsoft::Graphics::ImagingInternal::ParallaxImageOptions const& options, uint32_t priority, uint32_t frequency) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::ImagingInternal::IParallaxCreatorSession3>
    {
        template <typename D> using type = consume_Microsoft_Graphics_ImagingInternal_IParallaxCreatorSession3<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_ImagingInternal_ITrimapImageSegmenterSession
    {
        auto RemoveBackgroundAsync(winrt::Microsoft::Windows::PrivateCommon::ImageBufferView const& inputImageBufferView, winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData const& inputImageBufferViewData, winrt::Microsoft::Windows::PrivateCommon::ImageBufferView const& outputImageBufferView, winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData const& outputImageBufferViewData, winrt::Microsoft::Windows::PrivateCommon::ImageBufferView const& fgMaskImageBufferView, winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData const& fgMaskImageBufferViewData, winrt::Microsoft::Windows::PrivateCommon::ImageBufferView const& bgMaskImageBufferView, winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData const& bgMaskImageBufferViewData) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession>
    {
        template <typename D> using type = consume_Microsoft_Graphics_ImagingInternal_ITrimapImageSegmenterSession<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_ImagingInternal_ITrimapImageSegmenterSession2
    {
        auto RemoveBackgroundAsync(winrt::Microsoft::Windows::PrivateCommon::ImageBufferView const& inputImageBufferView, winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData const& inputImageBufferViewData, winrt::Microsoft::Windows::PrivateCommon::ImageBufferView const& outputImageBufferView, winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData const& outputImageBufferViewData, winrt::Microsoft::Windows::PrivateCommon::ImageBufferView const& fgMaskImageBufferView, winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData const& fgMaskImageBufferViewData, winrt::Microsoft::Windows::PrivateCommon::ImageBufferView const& bgMaskImageBufferView, winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData const& bgMaskImageBufferViewData, uint32_t priority, uint32_t frequency) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession2>
    {
        template <typename D> using type = consume_Microsoft_Graphics_ImagingInternal_ITrimapImageSegmenterSession2<D>;
    };
    template <typename D>
    struct consume_Microsoft_Graphics_ImagingInternal_ITrimapImageSegmenterSession3
    {
        auto RemoveBackground(winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& inputImageBufferResource, winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& outputImageBufferResource, winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& fgMaskImageBufferResource, winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& bgMaskImageBufferResource, uint32_t priority, uint32_t frequency) const;
    };
    template <> struct consume<winrt::Microsoft::Graphics::ImagingInternal::ITrimapImageSegmenterSession3>
    {
        template <typename D> using type = consume_Microsoft_Graphics_ImagingInternal_ITrimapImageSegmenterSession3<D>;
    };
    struct struct_Microsoft_Graphics_ImagingInternal_ModelProperties
    {
        int32_t EncodingSize;
        int32_t MaxPointCount;
    };
    template <> struct abi<Microsoft::Graphics::ImagingInternal::ModelProperties>
    {
        using type = struct_Microsoft_Graphics_ImagingInternal_ModelProperties;
    };
    struct struct_Microsoft_Graphics_ImagingInternal_ParallaxImageOptions
    {
        uint32_t NumberOfFrames;
        float RotationalRadius;
        uint32_t NumberOfLayers;
        float OffsetFactor;
        int32_t ParallaxAxis;
    };
    template <> struct abi<Microsoft::Graphics::ImagingInternal::ParallaxImageOptions>
    {
        using type = struct_Microsoft_Graphics_ImagingInternal_ParallaxImageOptions;
    };
}
#endif
