// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_winrt_winmd_1_H
#define WINRT_winrt_winmd_1_H
#include "winrt/impl/winrt_winmd.0.h"
WINRT_EXPORT namespace winrt::winrt_winmd
{
    struct WINRT_IMPL_EMPTY_BASES IConstant :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IConstant>
    {
        IConstant(std::nullptr_t = nullptr) noexcept {}
        IConstant(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ICustomAttribute :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICustomAttribute>
    {
        ICustomAttribute(std::nullptr_t = nullptr) noexcept {}
        ICustomAttribute(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ICustomAttributeSig :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ICustomAttributeSig>
    {
        ICustomAttributeSig(std::nullptr_t = nullptr) noexcept {}
        ICustomAttributeSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IElemSig :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IElemSig>
    {
        IElemSig(std::nullptr_t = nullptr) noexcept {}
        IElemSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IEvent :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IEvent>
    {
        IEvent(std::nullptr_t = nullptr) noexcept {}
        IEvent(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IField :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IField>
    {
        IField(std::nullptr_t = nullptr) noexcept {}
        IField(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IFieldSig :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IFieldSig>
    {
        IFieldSig(std::nullptr_t = nullptr) noexcept {}
        IFieldSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IFixedArgSig :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IFixedArgSig>
    {
        IFixedArgSig(std::nullptr_t = nullptr) noexcept {}
        IFixedArgSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IGenericTypeInstSig :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGenericTypeInstSig>
    {
        IGenericTypeInstSig(std::nullptr_t = nullptr) noexcept {}
        IGenericTypeInstSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IInterfaceImpl :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IInterfaceImpl>
    {
        IInterfaceImpl(std::nullptr_t = nullptr) noexcept {}
        IInterfaceImpl(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IMethodAttributes :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMethodAttributes>
    {
        IMethodAttributes(std::nullptr_t = nullptr) noexcept {}
        IMethodAttributes(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IMethodDef :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMethodDef>
    {
        IMethodDef(std::nullptr_t = nullptr) noexcept {}
        IMethodDef(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IMethodDefSig :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMethodDefSig>
    {
        IMethodDefSig(std::nullptr_t = nullptr) noexcept {}
        IMethodDefSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IMethodSemantics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMethodSemantics>
    {
        IMethodSemantics(std::nullptr_t = nullptr) noexcept {}
        IMethodSemantics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IMethodSemanticsAttributes :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMethodSemanticsAttributes>
    {
        IMethodSemanticsAttributes(std::nullptr_t = nullptr) noexcept {}
        IMethodSemanticsAttributes(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES INamedArgSig :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INamedArgSig>
    {
        INamedArgSig(std::nullptr_t = nullptr) noexcept {}
        INamedArgSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES INamespace :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INamespace>
    {
        INamespace(std::nullptr_t = nullptr) noexcept {}
        INamespace(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IParam :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IParam>
    {
        IParam(std::nullptr_t = nullptr) noexcept {}
        IParam(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IParamAttributes :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IParamAttributes>
    {
        IParamAttributes(std::nullptr_t = nullptr) noexcept {}
        IParamAttributes(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IParamSig :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IParamSig>
    {
        IParamSig(std::nullptr_t = nullptr) noexcept {}
        IParamSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IProperty :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IProperty>
    {
        IProperty(std::nullptr_t = nullptr) noexcept {}
        IProperty(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IPropertySig :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IPropertySig>
    {
        IPropertySig(std::nullptr_t = nullptr) noexcept {}
        IPropertySig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IRetTypeSig :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRetTypeSig>
    {
        IRetTypeSig(std::nullptr_t = nullptr) noexcept {}
        IRetTypeSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IRoot :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRoot>
    {
        IRoot(std::nullptr_t = nullptr) noexcept {}
        IRoot(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IRootFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IRootFactory>
    {
        IRootFactory(std::nullptr_t = nullptr) noexcept {}
        IRootFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ITypeDef :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITypeDef>
    {
        ITypeDef(std::nullptr_t = nullptr) noexcept {}
        ITypeDef(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ITypeRef :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITypeRef>
    {
        ITypeRef(std::nullptr_t = nullptr) noexcept {}
        ITypeRef(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES ITypeSig :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<ITypeSig>
    {
        ITypeSig(std::nullptr_t = nullptr) noexcept {}
        ITypeSig(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
}
#endif
