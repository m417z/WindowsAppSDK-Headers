// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_Foundation_0_H
#define WINRT_Microsoft_Windows_Foundation_0_H
WINRT_EXPORT namespace winrt::Microsoft::Windows::Foundation
{
    struct IDecimalHelperStatics;
    struct DecimalHelper;
    struct DecimalValue;
    struct DecimalContract;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::Foundation::IDecimalHelperStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Foundation::DecimalHelper>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::Foundation::DecimalValue>{ using type = struct_category<uint16_t, uint8_t, uint8_t, uint32_t, uint64_t>; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Foundation::DecimalHelper> = L"Microsoft.Windows.Foundation.DecimalHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Foundation::DecimalValue> = L"Microsoft.Windows.Foundation.DecimalValue";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Foundation::IDecimalHelperStatics> = L"Microsoft.Windows.Foundation.IDecimalHelperStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Foundation::DecimalContract> = L"Microsoft.Windows.Foundation.DecimalContract";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Foundation::IDecimalHelperStatics>{ 0xBA09A415,0xE26C,0x55B3,{ 0x9B,0x76,0xB3,0xAF,0xFD,0x55,0x6A,0x7F } }; // BA09A415-E26C-55B3-9B76-B3AFFD556A7F
    template <> struct abi<winrt::Microsoft::Windows::Foundation::IDecimalHelperStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall FromBoolean(bool, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall FromInt16(int16_t, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall FromInt32(int32_t, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall FromInt64(int64_t, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall FromUInt8(uint8_t, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall FromUInt16(uint16_t, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall FromUInt32(uint32_t, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall FromUInt64(uint64_t, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall FromSingle(float, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall FromDouble(double, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall FromString(void*, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall FromStringInvariant(void*, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall FromStringWithLocale(void*, void*, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall TryFromString(void*, struct struct_Microsoft_Windows_Foundation_DecimalValue*, bool*) noexcept = 0;
            virtual int32_t __stdcall TryFromStringInvariant(void*, struct struct_Microsoft_Windows_Foundation_DecimalValue*, bool*) noexcept = 0;
            virtual int32_t __stdcall TryFromStringWithLocale(void*, void*, struct struct_Microsoft_Windows_Foundation_DecimalValue*, bool*) noexcept = 0;
            virtual int32_t __stdcall ToBoolean(struct struct_Microsoft_Windows_Foundation_DecimalValue, bool*) noexcept = 0;
            virtual int32_t __stdcall ToInt16(struct struct_Microsoft_Windows_Foundation_DecimalValue, int16_t*) noexcept = 0;
            virtual int32_t __stdcall ToInt32(struct struct_Microsoft_Windows_Foundation_DecimalValue, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ToInt64(struct struct_Microsoft_Windows_Foundation_DecimalValue, int64_t*) noexcept = 0;
            virtual int32_t __stdcall ToUInt8(struct struct_Microsoft_Windows_Foundation_DecimalValue, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall ToUInt16(struct struct_Microsoft_Windows_Foundation_DecimalValue, uint16_t*) noexcept = 0;
            virtual int32_t __stdcall ToUInt32(struct struct_Microsoft_Windows_Foundation_DecimalValue, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall ToUInt64(struct struct_Microsoft_Windows_Foundation_DecimalValue, uint64_t*) noexcept = 0;
            virtual int32_t __stdcall ToSingle(struct struct_Microsoft_Windows_Foundation_DecimalValue, float*) noexcept = 0;
            virtual int32_t __stdcall ToDouble(struct struct_Microsoft_Windows_Foundation_DecimalValue, double*) noexcept = 0;
            virtual int32_t __stdcall ToString(struct struct_Microsoft_Windows_Foundation_DecimalValue, void**) noexcept = 0;
            virtual int32_t __stdcall ToStringInvariant(struct struct_Microsoft_Windows_Foundation_DecimalValue, void**) noexcept = 0;
            virtual int32_t __stdcall ToStringWithLocale(struct struct_Microsoft_Windows_Foundation_DecimalValue, void*, void**) noexcept = 0;
            virtual int32_t __stdcall Equals(struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue, bool*) noexcept = 0;
            virtual int32_t __stdcall Compare(struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue, int32_t*) noexcept = 0;
            virtual int32_t __stdcall IsValid(struct struct_Microsoft_Windows_Foundation_DecimalValue, bool*) noexcept = 0;
            virtual int32_t __stdcall IsInteger(struct struct_Microsoft_Windows_Foundation_DecimalValue, bool*) noexcept = 0;
            virtual int32_t __stdcall Scale(struct struct_Microsoft_Windows_Foundation_DecimalValue, uint8_t*) noexcept = 0;
            virtual int32_t __stdcall Sign(struct struct_Microsoft_Windows_Foundation_DecimalValue, int32_t*) noexcept = 0;
            virtual int32_t __stdcall MaxScale(uint8_t*) noexcept = 0;
            virtual int32_t __stdcall MaxValue(struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall MinValue(struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall Negate(struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall Abs(struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall Truncate(struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall Floor(struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall Ceiling(struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall Round(struct struct_Microsoft_Windows_Foundation_DecimalValue, int32_t, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall Clamp(struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall Add(struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall Subtract(struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall Multiply(struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall Divide(struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
            virtual int32_t __stdcall Modulo(struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue, struct struct_Microsoft_Windows_Foundation_DecimalValue*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_Foundation_IDecimalHelperStatics
    {
        auto FromBoolean(bool value) const;
        auto FromInt16(int16_t value) const;
        auto FromInt32(int32_t value) const;
        auto FromInt64(int64_t value) const;
        auto FromUInt8(uint8_t value) const;
        auto FromUInt16(uint16_t value) const;
        auto FromUInt32(uint32_t value) const;
        auto FromUInt64(uint64_t value) const;
        auto FromSingle(float value) const;
        auto FromDouble(double value) const;
        auto FromString(param::hstring const& source) const;
        auto FromStringInvariant(param::hstring const& source) const;
        auto FromString(param::hstring const& source, param::hstring const& localeName) const;
        auto TryFromString(param::hstring const& source, winrt::Microsoft::Windows::Foundation::DecimalValue& value) const;
        auto TryFromStringInvariant(param::hstring const& source, winrt::Microsoft::Windows::Foundation::DecimalValue& value) const;
        auto TryFromString(param::hstring const& source, param::hstring const& localeName, winrt::Microsoft::Windows::Foundation::DecimalValue& value) const;
        auto ToBoolean(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto ToInt16(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto ToInt32(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto ToInt64(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto ToUInt8(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto ToUInt16(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto ToUInt32(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto ToUInt64(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto ToSingle(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto ToDouble(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto ToString(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto ToStringInvariant(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto ToString(winrt::Microsoft::Windows::Foundation::DecimalValue const& value, param::hstring const& localeName) const;
        auto Equals(winrt::Microsoft::Windows::Foundation::DecimalValue const& left, winrt::Microsoft::Windows::Foundation::DecimalValue const& right) const;
        auto Compare(winrt::Microsoft::Windows::Foundation::DecimalValue const& left, winrt::Microsoft::Windows::Foundation::DecimalValue const& right) const;
        auto IsValid(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto IsInteger(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto Scale(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto Sign(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto MaxScale() const;
        auto MaxValue() const;
        auto MinValue() const;
        auto Negate(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto Abs(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto Truncate(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto Floor(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto Ceiling(winrt::Microsoft::Windows::Foundation::DecimalValue const& value) const;
        auto Round(winrt::Microsoft::Windows::Foundation::DecimalValue const& value, int32_t decimalPlaces) const;
        auto Clamp(winrt::Microsoft::Windows::Foundation::DecimalValue const& value, winrt::Microsoft::Windows::Foundation::DecimalValue const& min, winrt::Microsoft::Windows::Foundation::DecimalValue const& max) const;
        auto Add(winrt::Microsoft::Windows::Foundation::DecimalValue const& left, winrt::Microsoft::Windows::Foundation::DecimalValue const& right) const;
        auto Subtract(winrt::Microsoft::Windows::Foundation::DecimalValue const& left, winrt::Microsoft::Windows::Foundation::DecimalValue const& right) const;
        auto Multiply(winrt::Microsoft::Windows::Foundation::DecimalValue const& left, winrt::Microsoft::Windows::Foundation::DecimalValue const& right) const;
        auto Divide(winrt::Microsoft::Windows::Foundation::DecimalValue const& left, winrt::Microsoft::Windows::Foundation::DecimalValue const& right) const;
        auto Modulo(winrt::Microsoft::Windows::Foundation::DecimalValue const& left, winrt::Microsoft::Windows::Foundation::DecimalValue const& right) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Foundation::IDecimalHelperStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Foundation_IDecimalHelperStatics<D>;
    };
    struct struct_Microsoft_Windows_Foundation_DecimalValue
    {
        uint16_t Reserved;
        uint8_t Scale;
        uint8_t Sign;
        uint32_t Hi32;
        uint64_t Lo64;
    };
    template <> struct abi<Microsoft::Windows::Foundation::DecimalValue>
    {
        using type = struct_Microsoft_Windows_Foundation_DecimalValue;
    };
}
#endif
