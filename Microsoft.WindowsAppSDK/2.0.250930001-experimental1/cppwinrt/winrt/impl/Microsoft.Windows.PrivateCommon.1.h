// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_PrivateCommon_1_H
#define WINRT_Microsoft_Windows_PrivateCommon_1_H
#include "winrt/impl/Microsoft.Windows.PrivateCommon.0.h"
WINRT_EXPORT namespace winrt::Microsoft::Windows::PrivateCommon
{
    struct WINRT_IMPL_EMPTY_BASES IAnchorInstance :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAnchorInstance>
    {
        IAnchorInstance(std::nullptr_t = nullptr) noexcept {}
        IAnchorInstance(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IGetSessionHostProcessId :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IGetSessionHostProcessId>
    {
        IGetSessionHostProcessId(std::nullptr_t = nullptr) noexcept {}
        IGetSessionHostProcessId(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IImageBufferPrivate :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IImageBufferPrivate>
    {
        IImageBufferPrivate(std::nullptr_t = nullptr) noexcept {}
        IImageBufferPrivate(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IImageBufferResource :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IImageBufferResource>
    {
        IImageBufferResource(std::nullptr_t = nullptr) noexcept {}
        IImageBufferResource(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IImageBufferResourceFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IImageBufferResourceFactory>
    {
        IImageBufferResourceFactory(std::nullptr_t = nullptr) noexcept {}
        IImageBufferResourceFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IModelManager :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IModelManager>
    {
        IModelManager(std::nullptr_t = nullptr) noexcept {}
        IModelManager(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IModelManager2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IModelManager2>,
        impl::require<winrt::Microsoft::Windows::PrivateCommon::IModelManager2, winrt::Microsoft::Windows::PrivateCommon::IModelManager>
    {
        IModelManager2(std::nullptr_t = nullptr) noexcept {}
        IModelManager2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
    struct WINRT_IMPL_EMPTY_BASES IModelManager3 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IModelManager3>,
        impl::require<winrt::Microsoft::Windows::PrivateCommon::IModelManager3, winrt::Microsoft::Windows::PrivateCommon::IModelManager, winrt::Microsoft::Windows::PrivateCommon::IModelManager2>
    {
        IModelManager3(std::nullptr_t = nullptr) noexcept {}
        IModelManager3(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        using impl::consume_t<IModelManager3, IModelManager3>::GenerateCacheModel;
        using impl::consume_t<IModelManager3, winrt::Microsoft::Windows::PrivateCommon::IModelManager>::GenerateCacheModel;
    };
    struct WINRT_IMPL_EMPTY_BASES INotifyExpiredSessionHost :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<INotifyExpiredSessionHost>
    {
        INotifyExpiredSessionHost(std::nullptr_t = nullptr) noexcept {}
        INotifyExpiredSessionHost(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
    };
}
#endif
