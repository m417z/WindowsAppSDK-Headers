// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_AI_MachineLearning_0_H
#define WINRT_Microsoft_Windows_AI_MachineLearning_0_H
WINRT_EXPORT namespace winrt::Windows::ApplicationModel
{
    struct PackageId;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct HResult;
    struct Uri;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename K, typename V> struct WINRT_IMPL_EMPTY_BASES IMap;
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::AI::MachineLearning
{
    enum class CatalogModelStatus : int32_t
    {
        Available = 0,
        Downloading = 1,
        Unavailable = 2,
    };
    enum class ExecutionProviderCertification : int32_t
    {
        Unknown = 0,
        Certified = 1,
        Uncertified = 2,
    };
    enum class ExecutionProviderReadyResultState : int32_t
    {
        InProgress = 0,
        Success = 1,
        Failure = 2,
    };
    enum class ExecutionProviderReadyState : int32_t
    {
        Ready = 0,
        NotReady = 1,
        NotPresent = 2,
    };
    struct ICatalogModelInfo;
    struct ICatalogModelInstance;
    struct ICatalogModelInstanceResult;
    struct ICatalogModelSource;
    struct ICatalogModelSourceStatics;
    struct IExecutionProvider;
    struct IExecutionProviderCatalog;
    struct IExecutionProviderCatalogStatics;
    struct IExecutionProviderReadyResult;
    struct IWinMLModelCatalog;
    struct IWinMLModelCatalogFactory;
    struct CatalogModelInfo;
    struct CatalogModelInstance;
    struct CatalogModelInstanceResult;
    struct CatalogModelSource;
    struct ExecutionProvider;
    struct ExecutionProviderCatalog;
    struct ExecutionProviderReadyResult;
    struct WinMLModelCatalog;
    struct MachineLearningContract;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstance>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSourceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalogFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInfo>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInstance>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInstanceResult>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelSource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCatalog>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResult>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::WinMLModelCatalog>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelStatus>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCertification>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResultState>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyState>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInfo> = L"Microsoft.Windows.AI.MachineLearning.CatalogModelInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInstance> = L"Microsoft.Windows.AI.MachineLearning.CatalogModelInstance";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInstanceResult> = L"Microsoft.Windows.AI.MachineLearning.CatalogModelInstanceResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelSource> = L"Microsoft.Windows.AI.MachineLearning.CatalogModelSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider> = L"Microsoft.Windows.AI.MachineLearning.ExecutionProvider";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCatalog> = L"Microsoft.Windows.AI.MachineLearning.ExecutionProviderCatalog";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResult> = L"Microsoft.Windows.AI.MachineLearning.ExecutionProviderReadyResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::WinMLModelCatalog> = L"Microsoft.Windows.AI.MachineLearning.WinMLModelCatalog";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelStatus> = L"Microsoft.Windows.AI.MachineLearning.CatalogModelStatus";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCertification> = L"Microsoft.Windows.AI.MachineLearning.ExecutionProviderCertification";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResultState> = L"Microsoft.Windows.AI.MachineLearning.ExecutionProviderReadyResultState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyState> = L"Microsoft.Windows.AI.MachineLearning.ExecutionProviderReadyState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo> = L"Microsoft.Windows.AI.MachineLearning.ICatalogModelInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstance> = L"Microsoft.Windows.AI.MachineLearning.ICatalogModelInstance";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult> = L"Microsoft.Windows.AI.MachineLearning.ICatalogModelInstanceResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource> = L"Microsoft.Windows.AI.MachineLearning.ICatalogModelSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSourceStatics> = L"Microsoft.Windows.AI.MachineLearning.ICatalogModelSourceStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider> = L"Microsoft.Windows.AI.MachineLearning.IExecutionProvider";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog> = L"Microsoft.Windows.AI.MachineLearning.IExecutionProviderCatalog";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics> = L"Microsoft.Windows.AI.MachineLearning.IExecutionProviderCatalogStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult> = L"Microsoft.Windows.AI.MachineLearning.IExecutionProviderReadyResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog> = L"Microsoft.Windows.AI.MachineLearning.IWinMLModelCatalog";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalogFactory> = L"Microsoft.Windows.AI.MachineLearning.IWinMLModelCatalogFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::AI::MachineLearning::MachineLearningContract> = L"Microsoft.Windows.AI.MachineLearning.MachineLearningContract";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>{ 0x5B7363DE,0xDC85,0x5601,{ 0xA1,0x5B,0xE8,0x68,0xE5,0xE2,0xC8,0xAC } }; // 5B7363DE-DC85-5601-A15B-E868E5E2C8AC
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstance>{ 0x9E920521,0x5E06,0x5C30,{ 0xB0,0xC2,0x8A,0xF3,0x13,0xEF,0xB7,0x56 } }; // 9E920521-5E06-5C30-B0C2-8AF313EFB756
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult>{ 0x16A0D92F,0xE3E2,0x53E3,{ 0xB7,0xD0,0xDC,0x69,0x7B,0x9E,0xBB,0x17 } }; // 16A0D92F-E3E2-53E3-B7D0-DC697B9EBB17
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource>{ 0x54505C50,0x3A7F,0x5101,{ 0x9A,0x4B,0x27,0x84,0x95,0x6D,0x31,0x51 } }; // 54505C50-3A7F-5101-9A4B-2784956D3151
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSourceStatics>{ 0x40DBC8DA,0xA3B2,0x5724,{ 0x83,0x0D,0x15,0x45,0x4A,0x90,0xAA,0x91 } }; // 40DBC8DA-A3B2-5724-830D-15454A90AA91
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>{ 0x98356468,0xCF23,0x504F,{ 0xB2,0x9C,0x93,0x47,0x78,0x19,0x25,0xFF } }; // 98356468-CF23-504F-B29C-9347781925FF
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>{ 0xAA9BFE14,0x2222,0x5921,{ 0x80,0x02,0x4D,0x2A,0x20,0x5E,0xA0,0x3C } }; // AA9BFE14-2222-5921-8002-4D2A205EA03C
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics>{ 0x550DEF98,0x2611,0x5433,{ 0xAF,0xB8,0x43,0x67,0x3B,0x61,0x08,0x48 } }; // 550DEF98-2611-5433-AFB8-43673B610848
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>{ 0x91C1724D,0x93C7,0x5284,{ 0xAD,0xBE,0xBA,0x2B,0xD7,0xBE,0x7C,0x79 } }; // 91C1724D-93C7-5284-ADBE-BA2BD7BE7C79
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>{ 0xFAA853DD,0xF26E,0x5A59,{ 0xA5,0x51,0x9E,0x40,0xCB,0x22,0xBC,0xAE } }; // FAA853DD-F26E-5A59-A551-9E40CB22BCAE
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalogFactory>{ 0xE5FE45A6,0x0290,0x5BFE,{ 0xA5,0xBB,0xBB,0x6D,0xBD,0x0A,0xC3,0x4D } }; // E5FE45A6-0290-5BFE-A5BB-BB6DBD0AC34D
    template <> struct default_interface<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInfo>{ using type = winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo; };
    template <> struct default_interface<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInstance>{ using type = winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstance; };
    template <> struct default_interface<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInstanceResult>{ using type = winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult; };
    template <> struct default_interface<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelSource>{ using type = winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource; };
    template <> struct default_interface<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider>{ using type = winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider; };
    template <> struct default_interface<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCatalog>{ using type = winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog; };
    template <> struct default_interface<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResult>{ using type = winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult; };
    template <> struct default_interface<winrt::Microsoft::Windows::AI::MachineLearning::WinMLModelCatalog>{ using type = winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog; };
    template <> struct abi<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Id(void**) noexcept = 0;
            virtual int32_t __stdcall get_Alias(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayName(void**) noexcept = 0;
            virtual int32_t __stdcall get_Description(void**) noexcept = 0;
            virtual int32_t __stdcall get_SourceId(void**) noexcept = 0;
            virtual int32_t __stdcall get_Uri(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExecutionProviders(void**) noexcept = 0;
            virtual int32_t __stdcall get_Size(uint64_t*) noexcept = 0;
            virtual int32_t __stdcall get_Revision(void**) noexcept = 0;
            virtual int32_t __stdcall get_License(void**) noexcept = 0;
            virtual int32_t __stdcall get_LicenseUri(void**) noexcept = 0;
            virtual int32_t __stdcall get_LicenseText(void**) noexcept = 0;
            virtual int32_t __stdcall GetStatus(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetInstance(void**) noexcept = 0;
            virtual int32_t __stdcall GetInstance2(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstance>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ModelPaths(void**) noexcept = 0;
            virtual int32_t __stdcall get_ModelInfo(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Status(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Instance(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExtendedError(winrt::hresult*) noexcept = 0;
            virtual int32_t __stdcall get_DiagnosticText(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Id(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayName(void**) noexcept = 0;
            virtual int32_t __stdcall get_Description(void**) noexcept = 0;
            virtual int32_t __stdcall get_Uri(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSourceStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateFromUri(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall get_LibraryPath(void**) noexcept = 0;
            virtual int32_t __stdcall get_PackageId(void**) noexcept = 0;
            virtual int32_t __stdcall get_ReadyState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Certification(int32_t*) noexcept = 0;
            virtual int32_t __stdcall EnsureReadyAsync(void**) noexcept = 0;
            virtual int32_t __stdcall TryRegister(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall FindAllProviders(uint32_t* __resultSize, void***) noexcept = 0;
            virtual int32_t __stdcall EnsureAndRegisterCertifiedAsync(void**) noexcept = 0;
            virtual int32_t __stdcall RegisterCertifiedAsync(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetDefault(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Status(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ExtendedError(winrt::hresult*) noexcept = 0;
            virtual int32_t __stdcall get_DiagnosticText(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Sources(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExecutionProviders(void**) noexcept = 0;
            virtual int32_t __stdcall GetAvailableModel(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetAvailableModels(void**) noexcept = 0;
            virtual int32_t __stdcall FindModel(void*, void**) noexcept = 0;
            virtual int32_t __stdcall FindAllModels(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalogFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(uint32_t, void**, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInfo
    {
        [[nodiscard]] auto Id() const;
        [[nodiscard]] auto Alias() const;
        [[nodiscard]] auto DisplayName() const;
        [[nodiscard]] auto Description() const;
        [[nodiscard]] auto SourceId() const;
        [[nodiscard]] auto Uri() const;
        [[nodiscard]] auto ExecutionProviders() const;
        [[nodiscard]] auto Size() const;
        [[nodiscard]] auto Revision() const;
        [[nodiscard]] auto License() const;
        [[nodiscard]] auto LicenseUri() const;
        [[nodiscard]] auto LicenseText() const;
        auto GetStatus() const;
        auto GetInstance() const;
        auto GetInstance(param::map<hstring, hstring> const& additionalHeaders) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInfo<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInstance
    {
        [[nodiscard]] auto ModelPaths() const;
        [[nodiscard]] auto ModelInfo() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstance>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInstance<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInstanceResult
    {
        [[nodiscard]] auto Status() const;
        [[nodiscard]] auto Instance() const;
        [[nodiscard]] auto ExtendedError() const;
        [[nodiscard]] auto DiagnosticText() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInstanceResult<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelSource
    {
        [[nodiscard]] auto Id() const;
        [[nodiscard]] auto DisplayName() const;
        [[nodiscard]] auto Description() const;
        [[nodiscard]] auto Uri() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelSourceStatics
    {
        auto CreateFromUri(winrt::Windows::Foundation::Uri const& location) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSourceStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelSourceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider
    {
        [[nodiscard]] auto Name() const;
        [[nodiscard]] auto LibraryPath() const;
        [[nodiscard]] auto PackageId() const;
        [[nodiscard]] auto ReadyState() const;
        [[nodiscard]] auto Certification() const;
        auto EnsureReadyAsync() const;
        auto TryRegister() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderCatalog
    {
        auto FindAllProviders() const;
        auto EnsureAndRegisterCertifiedAsync() const;
        auto RegisterCertifiedAsync() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderCatalog<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderCatalogStatics
    {
        auto GetDefault() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderCatalogStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderReadyResult
    {
        [[nodiscard]] auto Status() const;
        [[nodiscard]] auto ExtendedError() const;
        [[nodiscard]] auto DiagnosticText() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderReadyResult<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_MachineLearning_IWinMLModelCatalog
    {
        [[nodiscard]] auto Sources() const;
        [[nodiscard]] auto ExecutionProviders() const;
        auto GetAvailableModel(param::hstring const& aliasOrId) const;
        auto GetAvailableModels() const;
        auto FindModel(param::hstring const& aliasOrId) const;
        auto FindAllModels() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_MachineLearning_IWinMLModelCatalog<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_AI_MachineLearning_IWinMLModelCatalogFactory
    {
        auto CreateInstance(array_view<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelSource const> sources) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalogFactory>
    {
        template <typename D> using type = consume_Microsoft_Windows_AI_MachineLearning_IWinMLModelCatalogFactory<D>;
    };
}
#endif
