// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_AI_MachineLearning_H
#define WINRT_Microsoft_Windows_AI_MachineLearning_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.250303.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.250303.1"
#include "winrt/Microsoft.Windows.AI.h"
#include "winrt/impl/Windows.ApplicationModel.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Microsoft.Windows.AI.MachineLearning.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInfo<D>::Id() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Id(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)this;
            check_hresult(_winrt_abi_type->get_Id(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInfo<D>::Alias() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Alias(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)this;
            check_hresult(_winrt_abi_type->get_Alias(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInfo<D>::DisplayName() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DisplayName(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)this;
            check_hresult(_winrt_abi_type->get_DisplayName(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInfo<D>::Description() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Description(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)this;
            check_hresult(_winrt_abi_type->get_Description(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInfo<D>::SourceId() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_SourceId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)this;
            check_hresult(_winrt_abi_type->get_SourceId(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInfo<D>::Uri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)this;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        return winrt::Windows::Foundation::Uri{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInfo<D>::ExecutionProviders() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ExecutionProviders(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)this;
            check_hresult(_winrt_abi_type->get_ExecutionProviders(&value));
        }
        return winrt::Windows::Foundation::Collections::IVectorView<hstring>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInfo<D>::Size() const
    {
        uint64_t value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Size(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)this;
            check_hresult(_winrt_abi_type->get_Size(&value));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInfo<D>::Revision() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Revision(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)this;
            check_hresult(_winrt_abi_type->get_Revision(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInfo<D>::License() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_License(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)this;
            check_hresult(_winrt_abi_type->get_License(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInfo<D>::LicenseUri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_LicenseUri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)this;
            check_hresult(_winrt_abi_type->get_LicenseUri(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInfo<D>::LicenseText() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_LicenseText(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)this;
            check_hresult(_winrt_abi_type->get_LicenseText(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInfo<D>::GetStatus() const
    {
        winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelStatus result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetStatus(reinterpret_cast<int32_t*>(&result)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)this;
            check_hresult(_winrt_abi_type->GetStatus(reinterpret_cast<int32_t*>(&result)));
        }
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInfo<D>::GetInstance() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetInstance(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)this;
            check_hresult(_winrt_abi_type->GetInstance(&operation));
        }
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInstanceResult, double>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInfo<D>::GetInstance(param::map<hstring, hstring> const& additionalHeaders) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetInstance2(*(void**)(&additionalHeaders), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>**)this;
            check_hresult(_winrt_abi_type->GetInstance2(*(void**)(&additionalHeaders), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInstanceResult, double>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInstance<D>::ModelPaths() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstance>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstance, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstance>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ModelPaths(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstance>**)this;
            check_hresult(_winrt_abi_type->get_ModelPaths(&value));
        }
        return winrt::Windows::Foundation::Collections::IVectorView<hstring>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInstance<D>::ModelInfo() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstance>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstance, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstance>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ModelInfo(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstance>**)this;
            check_hresult(_winrt_abi_type->get_ModelInfo(&value));
        }
        return winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInfo{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInstanceResult<D>::Status() const
    {
        winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelStatus value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Status(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult>**)this;
            check_hresult(_winrt_abi_type->get_Status(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInstanceResult<D>::Instance() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Instance(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult>**)this;
            check_hresult(_winrt_abi_type->get_Instance(&value));
        }
        return winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInstance{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInstanceResult<D>::ExtendedError() const
    {
        winrt::hresult value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ExtendedError(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult>**)this;
            check_hresult(_winrt_abi_type->get_ExtendedError(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelInstanceResult<D>::DiagnosticText() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DiagnosticText(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult>**)this;
            check_hresult(_winrt_abi_type->get_DiagnosticText(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelSource<D>::Id() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Id(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource>**)this;
            check_hresult(_winrt_abi_type->get_Id(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelSource<D>::DisplayName() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DisplayName(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource>**)this;
            check_hresult(_winrt_abi_type->get_DisplayName(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelSource<D>::Description() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Description(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource>**)this;
            check_hresult(_winrt_abi_type->get_Description(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelSource<D>::Uri() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource>**)this;
            check_hresult(_winrt_abi_type->get_Uri(&value));
        }
        return winrt::Windows::Foundation::Uri{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_ICatalogModelSourceStatics<D>::CreateFromUri(winrt::Windows::Foundation::Uri const& location) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSourceStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSourceStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSourceStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateFromUri(*(void**)(&location), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSourceStatics>**)this;
            check_hresult(_winrt_abi_type->CreateFromUri(*(void**)(&location), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelSource>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider<D>::Name() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)this;
            check_hresult(_winrt_abi_type->get_Name(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider<D>::LibraryPath() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_LibraryPath(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)this;
            check_hresult(_winrt_abi_type->get_LibraryPath(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider<D>::PackageId() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_PackageId(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)this;
            check_hresult(_winrt_abi_type->get_PackageId(&value));
        }
        return winrt::Windows::ApplicationModel::PackageId{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider<D>::ReadyState() const
    {
        winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyState value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ReadyState(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)this;
            check_hresult(_winrt_abi_type->get_ReadyState(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider<D>::Certification() const
    {
        winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCertification value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Certification(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)this;
            check_hresult(_winrt_abi_type->get_Certification(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider<D>::EnsureReadyAsync() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->EnsureReadyAsync(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)this;
            check_hresult(_winrt_abi_type->EnsureReadyAsync(&operation));
        }
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResult, double>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProvider<D>::TryRegister() const
    {
        bool result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->TryRegister(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>**)this;
            check_hresult(_winrt_abi_type->TryRegister(&result));
        }
        return result;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderCatalog<D>::FindAllProviders() const
    {
        uint32_t result_impl_size{};
        void** result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->FindAllProviders(&result_impl_size, &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>**)this;
            check_hresult(_winrt_abi_type->FindAllProviders(&result_impl_size, &result));
        }
        return com_array<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider>{ result, result_impl_size, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderCatalog<D>::EnsureAndRegisterCertifiedAsync() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->EnsureAndRegisterCertifiedAsync(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>**)this;
            check_hresult(_winrt_abi_type->EnsureAndRegisterCertifiedAsync(&operation));
        }
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider>, double>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderCatalog<D>::RegisterCertifiedAsync() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->RegisterCertifiedAsync(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>**)this;
            check_hresult(_winrt_abi_type->RegisterCertifiedAsync(&operation));
        }
        return winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider>, double>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderCatalogStatics<D>::GetDefault() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetDefault(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics>**)this;
            check_hresult(_winrt_abi_type->GetDefault(&result));
        }
        return winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCatalog{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderReadyResult<D>::Status() const
    {
        winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResultState value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Status(reinterpret_cast<int32_t*>(&value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>**)this;
            check_hresult(_winrt_abi_type->get_Status(reinterpret_cast<int32_t*>(&value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderReadyResult<D>::ExtendedError() const
    {
        winrt::hresult value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ExtendedError(put_abi(value)));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>**)this;
            check_hresult(_winrt_abi_type->get_ExtendedError(put_abi(value)));
        }
        return value;
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IExecutionProviderReadyResult<D>::DiagnosticText() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_DiagnosticText(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>**)this;
            check_hresult(_winrt_abi_type->get_DiagnosticText(&value));
        }
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IWinMLModelCatalog<D>::Sources() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_Sources(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>**)this;
            check_hresult(_winrt_abi_type->get_Sources(&value));
        }
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelSource>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IWinMLModelCatalog<D>::ExecutionProviders() const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_ExecutionProviders(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>**)this;
            check_hresult(_winrt_abi_type->get_ExecutionProviders(&value));
        }
        return winrt::Windows::Foundation::Collections::IVector<hstring>{ value, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IWinMLModelCatalog<D>::GetAvailableModel(param::hstring const& aliasOrId) const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetAvailableModel(*(void**)(&aliasOrId), &result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>**)this;
            check_hresult(_winrt_abi_type->GetAvailableModel(*(void**)(&aliasOrId), &result));
        }
        return winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInfo{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IWinMLModelCatalog<D>::GetAvailableModels() const
    {
        void* result{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->GetAvailableModels(&result));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>**)this;
            check_hresult(_winrt_abi_type->GetAvailableModels(&result));
        }
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInfo>{ result, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IWinMLModelCatalog<D>::FindModel(param::hstring const& aliasOrId) const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->FindModel(*(void**)(&aliasOrId), &operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>**)this;
            check_hresult(_winrt_abi_type->FindModel(*(void**)(&aliasOrId), &operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInfo>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IWinMLModelCatalog<D>::FindAllModels() const
    {
        void* operation{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->FindAllModels(&operation));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>**)this;
            check_hresult(_winrt_abi_type->FindAllModels(&operation));
        }
        return winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInfo>>{ operation, take_ownership_from_abi };
    }
    template <typename D> auto consume_Microsoft_Windows_AI_MachineLearning_IWinMLModelCatalogFactory<D>::CreateInstance(array_view<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelSource const> sources) const
    {
        void* value{};
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalogFactory>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalogFactory, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalogFactory>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->CreateInstance(sources.size(), get_abi(sources), &value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalogFactory>**)this;
            check_hresult(_winrt_abi_type->CreateInstance(sources.size(), get_abi(sources), &value));
        }
        return winrt::Microsoft::Windows::AI::MachineLearning::WinMLModelCatalog{ value, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo> : produce_base<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo>
    {
        int32_t __stdcall get_Id(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Id());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Alias(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Alias());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DisplayName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DisplayName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Description(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Description());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SourceId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().SourceId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Uri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Uri>(this->shim().Uri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExecutionProviders(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVectorView<hstring>>(this->shim().ExecutionProviders());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Size(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().Size());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Revision(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Revision());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_License(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().License());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LicenseUri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().LicenseUri());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LicenseText(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().LicenseText());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetStatus(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelStatus>(this->shim().GetStatus());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetInstance(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInstanceResult, double>>(this->shim().GetInstance());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetInstance2(void* additionalHeaders, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInstanceResult, double>>(this->shim().GetInstance(*reinterpret_cast<winrt::Windows::Foundation::Collections::IMap<hstring, hstring> const*>(&additionalHeaders)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstance> : produce_base<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstance>
    {
        int32_t __stdcall get_ModelPaths(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVectorView<hstring>>(this->shim().ModelPaths());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ModelInfo(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInfo>(this->shim().ModelInfo());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult> : produce_base<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult>
    {
        int32_t __stdcall get_Status(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelStatus>(this->shim().Status());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Instance(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInstance>(this->shim().Instance());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExtendedError(winrt::hresult* value) noexcept final try
        {
            zero_abi<winrt::hresult>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::hresult>(this->shim().ExtendedError());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DiagnosticText(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DiagnosticText());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource> : produce_base<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource>
    {
        int32_t __stdcall get_Id(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Id());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DisplayName(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DisplayName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Description(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Description());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Uri(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Uri>(this->shim().Uri());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSourceStatics> : produce_base<D, winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSourceStatics>
    {
        int32_t __stdcall CreateFromUri(void* location, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelSource>>(this->shim().CreateFromUri(*reinterpret_cast<winrt::Windows::Foundation::Uri const*>(&location)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider> : produce_base<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider>
    {
        int32_t __stdcall get_Name(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().Name());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_LibraryPath(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().LibraryPath());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PackageId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::ApplicationModel::PackageId>(this->shim().PackageId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ReadyState(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyState>(this->shim().ReadyState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Certification(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCertification>(this->shim().Certification());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall EnsureReadyAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResult, double>>(this->shim().EnsureReadyAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall TryRegister(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().TryRegister());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog> : produce_base<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog>
    {
        int32_t __stdcall FindAllProviders(uint32_t* __resultSize, void*** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().FindAllProviders());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall EnsureAndRegisterCertifiedAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider>, double>>(this->shim().EnsureAndRegisterCertifiedAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RegisterCertifiedAsync(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperationWithProgress<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider>, double>>(this->shim().RegisterCertifiedAsync());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics> : produce_base<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics>
    {
        int32_t __stdcall GetDefault(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCatalog>(this->shim().GetDefault());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult> : produce_base<D, winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult>
    {
        int32_t __stdcall get_Status(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResultState>(this->shim().Status());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExtendedError(winrt::hresult* value) noexcept final try
        {
            zero_abi<winrt::hresult>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::hresult>(this->shim().ExtendedError());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DiagnosticText(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().DiagnosticText());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog> : produce_base<D, winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog>
    {
        int32_t __stdcall get_Sources(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelSource>>(this->shim().Sources());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ExecutionProviders(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Collections::IVector<hstring>>(this->shim().ExecutionProviders());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAvailableModel(void* aliasOrId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInfo>(this->shim().GetAvailableModel(*reinterpret_cast<hstring const*>(&aliasOrId)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAvailableModels(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInfo>>(this->shim().GetAvailableModels());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FindModel(void* aliasOrId, void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInfo>>(this->shim().FindModel(*reinterpret_cast<hstring const*>(&aliasOrId)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FindAllModels(void** operation) noexcept final try
        {
            clear_abi(operation);
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Foundation::Collections::IVectorView<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInfo>>>(this->shim().FindAllModels());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalogFactory> : produce_base<D, winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalogFactory>
    {
        int32_t __stdcall CreateInstance(uint32_t __sourcesSize, void** sources, void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::Windows::AI::MachineLearning::WinMLModelCatalog>(this->shim().CreateInstance(array_view<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelSource const>(reinterpret_cast<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelSource const *>(sources), reinterpret_cast<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelSource const *>(sources) + __sourcesSize)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::AI::MachineLearning
{
    inline auto CatalogModelSource::CreateFromUri(winrt::Windows::Foundation::Uri const& location)
    {
        return impl::call_factory<CatalogModelSource, ICatalogModelSourceStatics>([&](ICatalogModelSourceStatics const& f) { return f.CreateFromUri(location); });
    }
    inline auto ExecutionProviderCatalog::GetDefault()
    {
        return impl::call_factory_cast<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCatalog(*)(IExecutionProviderCatalogStatics const&), ExecutionProviderCatalog, IExecutionProviderCatalogStatics>([](IExecutionProviderCatalogStatics const& f) { return f.GetDefault(); });
    }
    inline WinMLModelCatalog::WinMLModelCatalog(array_view<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelSource const> sources) :
        WinMLModelCatalog(impl::call_factory<WinMLModelCatalog, IWinMLModelCatalogFactory>([&](IWinMLModelCatalogFactory const& f) { return f.CreateInstance(sources); }))
    {
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInfo> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstance> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelInstanceResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSource> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::ICatalogModelSourceStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProvider> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalog> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderCatalogStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::IExecutionProviderReadyResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalog> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::IWinMLModelCatalogFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInfo> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInstance> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelInstanceResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::CatalogModelSource> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProvider> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderCatalog> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::ExecutionProviderReadyResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::AI::MachineLearning::WinMLModelCatalog> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
