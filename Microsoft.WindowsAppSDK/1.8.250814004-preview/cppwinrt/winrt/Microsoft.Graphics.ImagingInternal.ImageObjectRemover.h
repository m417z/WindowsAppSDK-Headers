// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Graphics_ImagingInternal_ImageObjectRemover_H
#define WINRT_Microsoft_Graphics_ImagingInternal_ImageObjectRemover_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.250303.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.250303.1"
#include "winrt/Microsoft.Graphics.ImagingInternal.h"
#include "winrt/impl/Microsoft.Windows.PrivateCommon.2.h"
#include "winrt/impl/Microsoft.Graphics.ImagingInternal.ImageObjectRemover.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Microsoft_Graphics_ImagingInternal_ImageObjectRemover_IImageObjectRemoverSession<D>::Process(winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& inputImageBufferResource, winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& inputImageBufferMaskResource, winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const& outputImageBufferResource, uint32_t priority, uint32_t frequency) const
    {
        if constexpr (!std::is_same_v<D, winrt::Microsoft::Graphics::ImagingInternal::ImageObjectRemover::IImageObjectRemoverSession>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Microsoft::Graphics::ImagingInternal::ImageObjectRemover::IImageObjectRemoverSession, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Graphics::ImagingInternal::ImageObjectRemover::IImageObjectRemoverSession>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->Process(*(void**)(&inputImageBufferResource), *(void**)(&inputImageBufferMaskResource), *(void**)(&outputImageBufferResource), priority, frequency));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Microsoft::Graphics::ImagingInternal::ImageObjectRemover::IImageObjectRemoverSession>**)this;
            check_hresult(_winrt_abi_type->Process(*(void**)(&inputImageBufferResource), *(void**)(&inputImageBufferMaskResource), *(void**)(&outputImageBufferResource), priority, frequency));
        }
    }
    template <typename D>
    struct produce<D, winrt::Microsoft::Graphics::ImagingInternal::ImageObjectRemover::IImageObjectRemoverSession> : produce_base<D, winrt::Microsoft::Graphics::ImagingInternal::ImageObjectRemover::IImageObjectRemoverSession>
    {
        int32_t __stdcall Process(void* inputImageBufferResource, void* inputImageBufferMaskResource, void* outputImageBufferResource, uint32_t priority, uint32_t frequency) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Process(*reinterpret_cast<winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const*>(&inputImageBufferResource), *reinterpret_cast<winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const*>(&inputImageBufferMaskResource), *reinterpret_cast<winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource const*>(&outputImageBufferResource), priority, frequency);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
WINRT_EXPORT namespace winrt::Microsoft::Graphics::ImagingInternal::ImageObjectRemover
{
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Graphics::ImagingInternal::ImageObjectRemover::IImageObjectRemoverSession> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
