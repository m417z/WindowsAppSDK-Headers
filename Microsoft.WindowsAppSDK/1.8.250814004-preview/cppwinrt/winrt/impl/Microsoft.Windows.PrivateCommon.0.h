// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_PrivateCommon_0_H
#define WINRT_Microsoft_Windows_PrivateCommon_0_H
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct IAsyncAction;
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::PrivateCommon
{
    enum class PixelFormat : int32_t
    {
        Undefined = 0,
        Rgb24 = 1,
        Argb32 = 2,
        Rgba32 = 3,
        Bgra32 = 4,
        Gray8 = 5,
    };
    struct IAnchorInstance;
    struct IGetSessionHostProcessId;
    struct IImageBufferPrivate;
    struct IImageBufferResource;
    struct IImageBufferResourceFactory;
    struct IModelManager;
    struct IModelManager2;
    struct IModelManager3;
    struct INotifyExpiredSessionHost;
    struct ImageBufferResource;
    struct ImageBufferData;
    struct ImageBufferView;
    struct ImageBufferViewData;
    struct SessionHostingSharedContract;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::PrivateCommon::IAnchorInstance>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::PrivateCommon::IGetSessionHostProcessId>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::PrivateCommon::IImageBufferPrivate>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::PrivateCommon::IImageBufferResource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::PrivateCommon::IImageBufferResourceFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::PrivateCommon::IModelManager>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::PrivateCommon::IModelManager2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::PrivateCommon::IModelManager3>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::PrivateCommon::INotifyExpiredSessionHost>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Windows::PrivateCommon::PixelFormat>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Windows::PrivateCommon::ImageBufferData>{ using type = struct_category<uint32_t, uint32_t, winrt::Microsoft::Windows::PrivateCommon::PixelFormat, uint32_t, uint64_t, uint64_t>; };
    template <> struct category<winrt::Microsoft::Windows::PrivateCommon::ImageBufferView>{ using type = struct_category<uint32_t, uint32_t, winrt::Microsoft::Windows::PrivateCommon::PixelFormat, uint32_t>; };
    template <> struct category<winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData>{ using type = struct_category<uint64_t, uint64_t>; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource> = L"Microsoft.Windows.PrivateCommon.ImageBufferResource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::PrivateCommon::PixelFormat> = L"Microsoft.Windows.PrivateCommon.PixelFormat";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::PrivateCommon::ImageBufferData> = L"Microsoft.Windows.PrivateCommon.ImageBufferData";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::PrivateCommon::ImageBufferView> = L"Microsoft.Windows.PrivateCommon.ImageBufferView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::PrivateCommon::ImageBufferViewData> = L"Microsoft.Windows.PrivateCommon.ImageBufferViewData";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::PrivateCommon::IAnchorInstance> = L"Microsoft.Windows.PrivateCommon.IAnchorInstance";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::PrivateCommon::IGetSessionHostProcessId> = L"Microsoft.Windows.PrivateCommon.IGetSessionHostProcessId";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::PrivateCommon::IImageBufferPrivate> = L"Microsoft.Windows.PrivateCommon.IImageBufferPrivate";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::PrivateCommon::IImageBufferResource> = L"Microsoft.Windows.PrivateCommon.IImageBufferResource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::PrivateCommon::IImageBufferResourceFactory> = L"Microsoft.Windows.PrivateCommon.IImageBufferResourceFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::PrivateCommon::IModelManager> = L"Microsoft.Windows.PrivateCommon.IModelManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::PrivateCommon::IModelManager2> = L"Microsoft.Windows.PrivateCommon.IModelManager2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::PrivateCommon::IModelManager3> = L"Microsoft.Windows.PrivateCommon.IModelManager3";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::PrivateCommon::INotifyExpiredSessionHost> = L"Microsoft.Windows.PrivateCommon.INotifyExpiredSessionHost";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::PrivateCommon::SessionHostingSharedContract> = L"Microsoft.Windows.PrivateCommon.SessionHostingSharedContract";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::PrivateCommon::IAnchorInstance>{ 0x361C44E1,0x1FE7,0x5C7D,{ 0x9D,0xA4,0x12,0x8A,0xEA,0xF4,0x9A,0x31 } }; // 361C44E1-1FE7-5C7D-9DA4-128AEAF49A31
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::PrivateCommon::IGetSessionHostProcessId>{ 0x21B73D7A,0x6388,0x50AC,{ 0xAB,0x2A,0xFA,0x97,0x20,0xB2,0xB5,0xF6 } }; // 21B73D7A-6388-50AC-AB2A-FA9720B2B5F6
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::PrivateCommon::IImageBufferPrivate>{ 0xFA333FED,0x4E3C,0x53B4,{ 0xBF,0xAB,0x2F,0x8A,0x11,0x2D,0x34,0x8C } }; // FA333FED-4E3C-53B4-BFAB-2F8A112D348C
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::PrivateCommon::IImageBufferResource>{ 0xE4856A61,0x8FCF,0x566A,{ 0xBC,0xD4,0xF5,0x60,0x21,0x86,0x93,0x96 } }; // E4856A61-8FCF-566A-BCD4-F56021869396
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::PrivateCommon::IImageBufferResourceFactory>{ 0xA98B98AE,0xDB34,0x50BF,{ 0x8B,0x9C,0x9C,0x58,0xE6,0xCF,0x4B,0xB6 } }; // A98B98AE-DB34-50BF-8B9C-9C58E6CF4BB6
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::PrivateCommon::IModelManager>{ 0xF7F4DE39,0xCE0A,0x5D0D,{ 0x9F,0x37,0x7D,0x22,0xB8,0xB1,0xB6,0xDB } }; // F7F4DE39-CE0A-5D0D-9F37-7D22B8B1B6DB
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::PrivateCommon::IModelManager2>{ 0x0EAA0435,0x97DC,0x564C,{ 0xA5,0xBD,0x70,0xC6,0x9F,0xD1,0x24,0xF1 } }; // 0EAA0435-97DC-564C-A5BD-70C69FD124F1
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::PrivateCommon::IModelManager3>{ 0x544EAD0D,0xAAB7,0x5A0A,{ 0x82,0xB6,0xB5,0xD8,0xCF,0xEF,0x0C,0x5F } }; // 544EAD0D-AAB7-5A0A-82B6-B5D8CFEF0C5F
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::PrivateCommon::INotifyExpiredSessionHost>{ 0x94C562D6,0x4752,0x5008,{ 0xAF,0x26,0x04,0xC8,0x2A,0xC7,0x3F,0x80 } }; // 94C562D6-4752-5008-AF26-04C82AC73F80
    template <> struct default_interface<winrt::Microsoft::Windows::PrivateCommon::ImageBufferResource>{ using type = winrt::Microsoft::Windows::PrivateCommon::IImageBufferResource; };
    template <> struct abi<winrt::Microsoft::Windows::PrivateCommon::IAnchorInstance>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall AnchorInstance(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::PrivateCommon::IGetSessionHostProcessId>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetSessionHostProcessId(uint32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::PrivateCommon::IImageBufferPrivate>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetImageBufferView(struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView*) noexcept = 0;
            virtual int32_t __stdcall GetImageBufferViewData(uint32_t, struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData*) noexcept = 0;
            virtual int32_t __stdcall SyncBufferWithOutValue() noexcept = 0;
            virtual int32_t __stdcall GetImageBufferResource(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::PrivateCommon::IImageBufferResource>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_BufferData(struct struct_Microsoft_Windows_PrivateCommon_ImageBufferData*) noexcept = 0;
            virtual int32_t __stdcall put_BufferData(struct struct_Microsoft_Windows_PrivateCommon_ImageBufferData) noexcept = 0;
            virtual int32_t __stdcall Buffer(uint64_t*) noexcept = 0;
            virtual int32_t __stdcall Width(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall Height(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall RowStride(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall BytesPerPixel(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall Capacity(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall PixelFormat(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::PrivateCommon::IImageBufferResourceFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(struct struct_Microsoft_Windows_PrivateCommon_ImageBufferData, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstance2(uint32_t, uint32_t, int32_t, uint32_t, uint64_t, uint64_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::PrivateCommon::IModelManager>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall EnsureModelInitialized() noexcept = 0;
            virtual int32_t __stdcall GenerateCacheModel(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::PrivateCommon::IModelManager2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall SetPackageFamilyName(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::PrivateCommon::IModelManager3>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GenerateCacheModel() noexcept = 0;
            virtual int32_t __stdcall SetCorrelationVector(void*) noexcept = 0;
            virtual int32_t __stdcall IsModelCacheReady(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::PrivateCommon::INotifyExpiredSessionHost>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall NotifyExpiredSessionHost(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_PrivateCommon_IAnchorInstance
    {
        auto AnchorInstance(winrt::Windows::Foundation::IInspectable const& instance) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::PrivateCommon::IAnchorInstance>
    {
        template <typename D> using type = consume_Microsoft_Windows_PrivateCommon_IAnchorInstance<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_PrivateCommon_IGetSessionHostProcessId
    {
        auto GetSessionHostProcessId() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::PrivateCommon::IGetSessionHostProcessId>
    {
        template <typename D> using type = consume_Microsoft_Windows_PrivateCommon_IGetSessionHostProcessId<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_PrivateCommon_IImageBufferPrivate
    {
        auto GetImageBufferView() const;
        auto GetImageBufferViewData(uint32_t targetProcessId) const;
        auto SyncBufferWithOutValue() const;
        auto GetImageBufferResource(winrt::Windows::Foundation::IInspectable const& sessionAsInspectable) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::PrivateCommon::IImageBufferPrivate>
    {
        template <typename D> using type = consume_Microsoft_Windows_PrivateCommon_IImageBufferPrivate<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_PrivateCommon_IImageBufferResource
    {
        [[nodiscard]] auto BufferData() const;
        auto BufferData(winrt::Microsoft::Windows::PrivateCommon::ImageBufferData const& value) const;
        auto Buffer() const;
        auto Width() const;
        auto Height() const;
        auto RowStride() const;
        auto BytesPerPixel() const;
        auto Capacity() const;
        auto PixelFormat() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::PrivateCommon::IImageBufferResource>
    {
        template <typename D> using type = consume_Microsoft_Windows_PrivateCommon_IImageBufferResource<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_PrivateCommon_IImageBufferResourceFactory
    {
        auto CreateInstance(winrt::Microsoft::Windows::PrivateCommon::ImageBufferData const& bufferData) const;
        auto CreateInstance2(uint32_t height, uint32_t width, winrt::Microsoft::Windows::PrivateCommon::PixelFormat const& pixelFormat, uint32_t rowStride, uint64_t targetProcessHandle, uint64_t sourceProcessHandle) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::PrivateCommon::IImageBufferResourceFactory>
    {
        template <typename D> using type = consume_Microsoft_Windows_PrivateCommon_IImageBufferResourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_PrivateCommon_IModelManager
    {
        auto EnsureModelInitialized() const;
        auto GenerateCacheModel(param::hstring const& offlineDriverPath) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::PrivateCommon::IModelManager>
    {
        template <typename D> using type = consume_Microsoft_Windows_PrivateCommon_IModelManager<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_PrivateCommon_IModelManager2
    {
        auto SetPackageFamilyName(param::hstring const& packageFamilyName) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::PrivateCommon::IModelManager2>
    {
        template <typename D> using type = consume_Microsoft_Windows_PrivateCommon_IModelManager2<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_PrivateCommon_IModelManager3
    {
        auto GenerateCacheModel() const;
        auto SetCorrelationVector(param::hstring const& correlationVector) const;
        auto IsModelCacheReady() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::PrivateCommon::IModelManager3>
    {
        template <typename D> using type = consume_Microsoft_Windows_PrivateCommon_IModelManager3<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_PrivateCommon_INotifyExpiredSessionHost
    {
        auto NotifyExpiredSessionHost() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::PrivateCommon::INotifyExpiredSessionHost>
    {
        template <typename D> using type = consume_Microsoft_Windows_PrivateCommon_INotifyExpiredSessionHost<D>;
    };
    struct struct_Microsoft_Windows_PrivateCommon_ImageBufferData
    {
        uint32_t height;
        uint32_t width;
        int32_t pixelFormat;
        uint32_t rowStride;
        uint64_t targetProcessHandle;
        uint64_t sourceProcessHandle;
    };
    template <> struct abi<Microsoft::Windows::PrivateCommon::ImageBufferData>
    {
        using type = struct_Microsoft_Windows_PrivateCommon_ImageBufferData;
    };
    struct struct_Microsoft_Windows_PrivateCommon_ImageBufferView
    {
        uint32_t height;
        uint32_t width;
        int32_t pixelFormat;
        uint32_t rowStride;
    };
    template <> struct abi<Microsoft::Windows::PrivateCommon::ImageBufferView>
    {
        using type = struct_Microsoft_Windows_PrivateCommon_ImageBufferView;
    };
    struct struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData
    {
        uint64_t targetProcessHandle;
        uint64_t sourceProcessHandle;
    };
    template <> struct abi<Microsoft::Windows::PrivateCommon::ImageBufferViewData>
    {
        using type = struct_Microsoft_Windows_PrivateCommon_ImageBufferViewData;
    };
}
#endif
