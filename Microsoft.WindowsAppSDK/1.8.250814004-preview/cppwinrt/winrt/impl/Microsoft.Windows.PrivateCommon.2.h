// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_PrivateCommon_2_H
#define WINRT_Microsoft_Windows_PrivateCommon_2_H
#include "winrt/impl/Microsoft.Windows.PrivateCommon.1.h"
WINRT_EXPORT namespace winrt::Microsoft::Windows::PrivateCommon
{
    struct ImageBufferData
    {
        uint32_t height {};
        uint32_t width {};
        winrt::Microsoft::Windows::PrivateCommon::PixelFormat pixelFormat {};
        uint32_t rowStride {};
        uint64_t targetProcessHandle {};
        uint64_t sourceProcessHandle {};
    };
    inline bool operator==(ImageBufferData const& left, ImageBufferData const& right) noexcept
    {
        return left.height == right.height && left.width == right.width && left.pixelFormat == right.pixelFormat && left.rowStride == right.rowStride && left.targetProcessHandle == right.targetProcessHandle && left.sourceProcessHandle == right.sourceProcessHandle;
    }
    inline bool operator!=(ImageBufferData const& left, ImageBufferData const& right) noexcept
    {
        return !(left == right);
    }
    struct ImageBufferView
    {
        uint32_t height {};
        uint32_t width {};
        winrt::Microsoft::Windows::PrivateCommon::PixelFormat pixelFormat {};
        uint32_t rowStride {};
    };
    inline bool operator==(ImageBufferView const& left, ImageBufferView const& right) noexcept
    {
        return left.height == right.height && left.width == right.width && left.pixelFormat == right.pixelFormat && left.rowStride == right.rowStride;
    }
    inline bool operator!=(ImageBufferView const& left, ImageBufferView const& right) noexcept
    {
        return !(left == right);
    }
    struct ImageBufferViewData
    {
        uint64_t targetProcessHandle {};
        uint64_t sourceProcessHandle {};
    };
    inline bool operator==(ImageBufferViewData const& left, ImageBufferViewData const& right) noexcept
    {
        return left.targetProcessHandle == right.targetProcessHandle && left.sourceProcessHandle == right.sourceProcessHandle;
    }
    inline bool operator!=(ImageBufferViewData const& left, ImageBufferViewData const& right) noexcept
    {
        return !(left == right);
    }
    struct WINRT_IMPL_EMPTY_BASES ImageBufferResource : winrt::Microsoft::Windows::PrivateCommon::IImageBufferResource
    {
        ImageBufferResource(std::nullptr_t) noexcept {}
        ImageBufferResource(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::Windows::PrivateCommon::IImageBufferResource(ptr, take_ownership_from_abi) {}
        ImageBufferResource();
        explicit ImageBufferResource(winrt::Microsoft::Windows::PrivateCommon::ImageBufferData const& bufferData);
        ImageBufferResource(uint32_t height, uint32_t width, winrt::Microsoft::Windows::PrivateCommon::PixelFormat const& pixelFormat, uint32_t rowStride, uint64_t targetProcessHandle, uint64_t sourceProcessHandle);
    };
}
#endif
