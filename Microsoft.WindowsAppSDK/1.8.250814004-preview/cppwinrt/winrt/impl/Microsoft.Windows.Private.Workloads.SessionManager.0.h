// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_Private_Workloads_SessionManager_0_H
#define WINRT_Microsoft_Windows_Private_Workloads_SessionManager_0_H
WINRT_EXPORT namespace winrt::Microsoft::Windows::Private::Workloads::SessionManager
{
    struct ISessionManager;
    struct ISessionManager2;
    struct ISessionManager3;
    struct ISessionManagerStatics;
    struct SessionManager;
    struct SessionManagerContract;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager3>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManagerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Windows::Private::Workloads::SessionManager::SessionManager>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Private::Workloads::SessionManager::SessionManager> = L"Microsoft.Windows.Private.Workloads.SessionManager.SessionManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager> = L"Microsoft.Windows.Private.Workloads.SessionManager.ISessionManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager2> = L"Microsoft.Windows.Private.Workloads.SessionManager.ISessionManager2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager3> = L"Microsoft.Windows.Private.Workloads.SessionManager.ISessionManager3";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManagerStatics> = L"Microsoft.Windows.Private.Workloads.SessionManager.ISessionManagerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Windows::Private::Workloads::SessionManager::SessionManagerContract> = L"Microsoft.Windows.Private.Workloads.SessionManager.SessionManagerContract";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager>{ 0x52010AB7,0xBBCE,0x591B,{ 0xA2,0xBC,0xA5,0x74,0x3A,0x56,0x73,0xD2 } }; // 52010AB7-BBCE-591B-A2BC-A5743A5673D2
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager2>{ 0xEF69FD6A,0x766E,0x5A92,{ 0x8C,0xE1,0x1B,0xBE,0x98,0x8D,0xF0,0xFC } }; // EF69FD6A-766E-5A92-8CE1-1BBE988DF0FC
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager3>{ 0xC1D6FBFA,0x5CDC,0x591A,{ 0x9D,0x90,0x41,0x6E,0xB4,0xEC,0xC4,0xD7 } }; // C1D6FBFA-5CDC-591A-9D90-416EB4ECC4D7
    template <> inline constexpr guid guid_v<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManagerStatics>{ 0x2E9ECA64,0x7D54,0x5BD1,{ 0x82,0xBE,0x9B,0x91,0xF8,0x01,0x33,0xDB } }; // 2E9ECA64-7D54-5BD1-82BE-9B91F80133DB
    template <> struct default_interface<winrt::Microsoft::Windows::Private::Workloads::SessionManager::SessionManager>{ using type = winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager; };
    template <> struct abi<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetOrCreateSessionAsync(void*, void*, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall ReportSessionFailure(void*, int32_t, void*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager3>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetOrCreateUninitializedSessionAsync(void*, void*, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManagerStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall GetOrCreateAsync(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager
    {
        auto GetOrCreateSessionAsync(param::hstring const& packageName, param::hstring const& typeName, uint32_t priority) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager>
    {
        template <typename D> using type = consume_Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager2
    {
        auto ReportSessionFailure(winrt::Windows::Foundation::IInspectable const& session, int32_t hrFailure, param::hstring const& failureMessage) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager2>
    {
        template <typename D> using type = consume_Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager2<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager3
    {
        auto GetOrCreateUninitializedSessionAsync(param::hstring const& packageName, param::hstring const& typeName, uint32_t priority) const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManager3>
    {
        template <typename D> using type = consume_Microsoft_Windows_Private_Workloads_SessionManager_ISessionManager3<D>;
    };
    template <typename D>
    struct consume_Microsoft_Windows_Private_Workloads_SessionManager_ISessionManagerStatics
    {
        auto GetOrCreateAsync() const;
    };
    template <> struct consume<winrt::Microsoft::Windows::Private::Workloads::SessionManager::ISessionManagerStatics>
    {
        template <typename D> using type = consume_Microsoft_Windows_Private_Workloads_SessionManager_ISessionManagerStatics<D>;
    };
}
#endif
