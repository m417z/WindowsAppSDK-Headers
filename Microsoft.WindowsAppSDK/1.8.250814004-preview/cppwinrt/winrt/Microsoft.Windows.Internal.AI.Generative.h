// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Microsoft_Windows_Internal_AI_Generative_H
#define WINRT_Microsoft_Windows_Internal_AI_Generative_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.250303.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.250303.1"
#include "winrt/impl/Microsoft.Windows.AI.GenerativeInternal.2.h"
#include "winrt/impl/Microsoft.Windows.PrivateCommon.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Microsoft.Windows.Internal.AI.Generative.2.h"
namespace winrt::impl
{
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Internal::AI::Generative::IImageDescriptionSessionResult> : produce_base<D, winrt::Microsoft::Windows::Internal::AI::Generative::IImageDescriptionSessionResult>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Internal::AI::Generative::ILanguageModelAdapterWrapper> : produce_base<D, winrt::Microsoft::Windows::Internal::AI::Generative::ILanguageModelAdapterWrapper>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::Windows::Internal::AI::Generative::ILanguageModelContextWrapper> : produce_base<D, winrt::Microsoft::Windows::Internal::AI::Generative::ILanguageModelContextWrapper>
    {
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::Windows::Internal::AI::Generative
{
    inline ImageDescriptionSession::ImageDescriptionSession() :
        ImageDescriptionSession(impl::call_factory_cast<ImageDescriptionSession(*)(winrt::Windows::Foundation::IActivationFactory const&), ImageDescriptionSession>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ImageDescriptionSession>(); }))
    {
    }
    inline ImageLLMAdapterSession::ImageLLMAdapterSession() :
        ImageLLMAdapterSession(impl::call_factory_cast<ImageLLMAdapterSession(*)(winrt::Windows::Foundation::IActivationFactory const&), ImageLLMAdapterSession>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ImageLLMAdapterSession>(); }))
    {
    }
    inline LanguageModelAdapterWrapper::LanguageModelAdapterWrapper() :
        LanguageModelAdapterWrapper(impl::call_factory_cast<LanguageModelAdapterWrapper(*)(winrt::Windows::Foundation::IActivationFactory const&), LanguageModelAdapterWrapper>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<LanguageModelAdapterWrapper>(); }))
    {
    }
    inline LanguageModelContextWrapper::LanguageModelContextWrapper() :
        LanguageModelContextWrapper(impl::call_factory_cast<LanguageModelContextWrapper(*)(winrt::Windows::Foundation::IActivationFactory const&), LanguageModelContextWrapper>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<LanguageModelContextWrapper>(); }))
    {
    }
    inline LanguageModelSession::LanguageModelSession() :
        LanguageModelSession(impl::call_factory_cast<LanguageModelSession(*)(winrt::Windows::Foundation::IActivationFactory const&), LanguageModelSession>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<LanguageModelSession>(); }))
    {
    }
    inline PhiLanguageModelSession::PhiLanguageModelSession() :
        PhiLanguageModelSession(impl::call_factory_cast<PhiLanguageModelSession(*)(winrt::Windows::Foundation::IActivationFactory const&), PhiLanguageModelSession>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<PhiLanguageModelSession>(); }))
    {
    }
    inline SettingsModelSession::SettingsModelSession() :
        SettingsModelSession(impl::call_factory_cast<SettingsModelSession(*)(winrt::Windows::Foundation::IActivationFactory const&), SettingsModelSession>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<SettingsModelSession>(); }))
    {
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::Windows::Internal::AI::Generative::IImageDescriptionSessionResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Internal::AI::Generative::ILanguageModelAdapterWrapper> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Internal::AI::Generative::ILanguageModelContextWrapper> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Internal::AI::Generative::ImageDescriptionSession> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Internal::AI::Generative::ImageDescriptionSessionResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Internal::AI::Generative::ImageLLMAdapterSession> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Internal::AI::Generative::LanguageModelAdapterWrapper> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Internal::AI::Generative::LanguageModelContextWrapper> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Internal::AI::Generative::LanguageModelSession> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Internal::AI::Generative::PhiLanguageModelSession> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::Windows::Internal::AI::Generative::SettingsModelSession> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
