// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_winrt_winmd_0_H
#define WINRT_winrt_winmd_0_H
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IVectorView;
}
WINRT_EXPORT namespace winrt::winrt_winmd
{
    enum class ConstantType : int32_t
    {
        Boolean = 2,
        Char = 3,
        Int8 = 4,
        UInt8 = 5,
        Int16 = 6,
        UInt16 = 7,
        Int32 = 8,
        UInt32 = 9,
        Int64 = 10,
        UInt64 = 11,
        Float32 = 12,
        Float64 = 13,
        String = 14,
        Class = 18,
    };
    enum class ElementType : uint32_t
    {
        End = 0,
        Void = 0x1,
        Boolean = 0x2,
        Char = 0x3,
        I1 = 0x4,
        U1 = 0x5,
        I2 = 0x6,
        U2 = 0x7,
        I4 = 0x8,
        U4 = 0x9,
        I8 = 0xa,
        U8 = 0xb,
        R4 = 0xc,
        R8 = 0xd,
        String = 0xe,
        Ptr = 0xf,
        ByRef = 0x10,
        ValueType = 0x11,
        Class = 0x12,
        Var = 0x13,
        Array = 0x14,
        GenericInst = 0x15,
        TypedByRef = 0x16,
        I = 0x18,
        U = 0x19,
        FnPtr = 0x1b,
        Object = 0x1c,
        SZArray = 0x1d,
        MVar = 0x1e,
        CModReqd = 0x1f,
        CModOpt = 0x20,
        Internal = 0x21,
        Modifier = 0x40,
        Sentinel = 0x41,
        Pinned = 0x45,
        Type = 0x50,
        TaggedObject = 0x51,
        Field = 0x53,
        Property = 0x54,
        Enum = 0x55,
    };
    struct IConstant;
    struct ICustomAttribute;
    struct ICustomAttributeSig;
    struct IElemSig;
    struct IEvent;
    struct IField;
    struct IFieldSig;
    struct IFixedArgSig;
    struct IGenericTypeInstSig;
    struct IInterfaceImpl;
    struct IMethodAttributes;
    struct IMethodDef;
    struct IMethodDefSig;
    struct IMethodSemantics;
    struct IMethodSemanticsAttributes;
    struct INamedArgSig;
    struct INamespace;
    struct IParam;
    struct IParamAttributes;
    struct IParamSig;
    struct IProperty;
    struct IPropertySig;
    struct IRetTypeSig;
    struct IRoot;
    struct IRootFactory;
    struct ITypeDef;
    struct ITypeRef;
    struct ITypeSig;
    struct Constant;
    struct CustomAttribute;
    struct CustomAttributeSig;
    struct ElemSig;
    struct Event;
    struct Field;
    struct FieldSig;
    struct FixedArgSig;
    struct GenericTypeInstSig;
    struct InterfaceImpl;
    struct MethodAttributes;
    struct MethodDef;
    struct MethodDefSig;
    struct MethodSemantics;
    struct MethodSemanticsAttributes;
    struct NamedArgSig;
    struct Namespace;
    struct Param;
    struct ParamAttributes;
    struct ParamSig;
    struct Property;
    struct PropertySig;
    struct RetTypeSig;
    struct Root;
    struct TypeDef;
    struct TypeRef;
    struct TypeSig;
}
namespace winrt::impl
{
    template <> struct category<winrt::winrt_winmd::IConstant>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::ICustomAttribute>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::ICustomAttributeSig>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IElemSig>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IEvent>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IField>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IFieldSig>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IFixedArgSig>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IGenericTypeInstSig>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IInterfaceImpl>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IMethodAttributes>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IMethodDef>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IMethodDefSig>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IMethodSemantics>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IMethodSemanticsAttributes>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::INamedArgSig>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::INamespace>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IParam>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IParamAttributes>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IParamSig>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IProperty>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IPropertySig>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IRetTypeSig>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IRoot>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::IRootFactory>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::ITypeDef>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::ITypeRef>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::ITypeSig>{ using type = interface_category; };
    template <> struct category<winrt::winrt_winmd::Constant>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::CustomAttribute>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::CustomAttributeSig>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::ElemSig>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::Event>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::Field>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::FieldSig>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::FixedArgSig>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::GenericTypeInstSig>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::InterfaceImpl>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::MethodAttributes>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::MethodDef>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::MethodDefSig>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::MethodSemantics>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::MethodSemanticsAttributes>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::NamedArgSig>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::Namespace>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::Param>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::ParamAttributes>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::ParamSig>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::Property>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::PropertySig>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::RetTypeSig>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::Root>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::TypeDef>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::TypeRef>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::TypeSig>{ using type = class_category; };
    template <> struct category<winrt::winrt_winmd::ConstantType>{ using type = enum_category; };
    template <> struct category<winrt::winrt_winmd::ElementType>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::Constant> = L"winrt_winmd.Constant";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::CustomAttribute> = L"winrt_winmd.CustomAttribute";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::CustomAttributeSig> = L"winrt_winmd.CustomAttributeSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::ElemSig> = L"winrt_winmd.ElemSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::Event> = L"winrt_winmd.Event";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::Field> = L"winrt_winmd.Field";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::FieldSig> = L"winrt_winmd.FieldSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::FixedArgSig> = L"winrt_winmd.FixedArgSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::GenericTypeInstSig> = L"winrt_winmd.GenericTypeInstSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::InterfaceImpl> = L"winrt_winmd.InterfaceImpl";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::MethodAttributes> = L"winrt_winmd.MethodAttributes";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::MethodDef> = L"winrt_winmd.MethodDef";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::MethodDefSig> = L"winrt_winmd.MethodDefSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::MethodSemantics> = L"winrt_winmd.MethodSemantics";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::MethodSemanticsAttributes> = L"winrt_winmd.MethodSemanticsAttributes";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::NamedArgSig> = L"winrt_winmd.NamedArgSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::Namespace> = L"winrt_winmd.Namespace";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::Param> = L"winrt_winmd.Param";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::ParamAttributes> = L"winrt_winmd.ParamAttributes";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::ParamSig> = L"winrt_winmd.ParamSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::Property> = L"winrt_winmd.Property";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::PropertySig> = L"winrt_winmd.PropertySig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::RetTypeSig> = L"winrt_winmd.RetTypeSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::Root> = L"winrt_winmd.Root";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::TypeDef> = L"winrt_winmd.TypeDef";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::TypeRef> = L"winrt_winmd.TypeRef";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::TypeSig> = L"winrt_winmd.TypeSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::ConstantType> = L"winrt_winmd.ConstantType";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::ElementType> = L"winrt_winmd.ElementType";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IConstant> = L"winrt_winmd.IConstant";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::ICustomAttribute> = L"winrt_winmd.ICustomAttribute";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::ICustomAttributeSig> = L"winrt_winmd.ICustomAttributeSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IElemSig> = L"winrt_winmd.IElemSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IEvent> = L"winrt_winmd.IEvent";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IField> = L"winrt_winmd.IField";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IFieldSig> = L"winrt_winmd.IFieldSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IFixedArgSig> = L"winrt_winmd.IFixedArgSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IGenericTypeInstSig> = L"winrt_winmd.IGenericTypeInstSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IInterfaceImpl> = L"winrt_winmd.IInterfaceImpl";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IMethodAttributes> = L"winrt_winmd.IMethodAttributes";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IMethodDef> = L"winrt_winmd.IMethodDef";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IMethodDefSig> = L"winrt_winmd.IMethodDefSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IMethodSemantics> = L"winrt_winmd.IMethodSemantics";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IMethodSemanticsAttributes> = L"winrt_winmd.IMethodSemanticsAttributes";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::INamedArgSig> = L"winrt_winmd.INamedArgSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::INamespace> = L"winrt_winmd.INamespace";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IParam> = L"winrt_winmd.IParam";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IParamAttributes> = L"winrt_winmd.IParamAttributes";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IParamSig> = L"winrt_winmd.IParamSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IProperty> = L"winrt_winmd.IProperty";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IPropertySig> = L"winrt_winmd.IPropertySig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IRetTypeSig> = L"winrt_winmd.IRetTypeSig";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IRoot> = L"winrt_winmd.IRoot";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::IRootFactory> = L"winrt_winmd.IRootFactory";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::ITypeDef> = L"winrt_winmd.ITypeDef";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::ITypeRef> = L"winrt_winmd.ITypeRef";
    template <> inline constexpr auto& name_v<winrt::winrt_winmd::ITypeSig> = L"winrt_winmd.ITypeSig";
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IConstant>{ 0x38A3DC49,0xB672,0x555F,{ 0x83,0xAA,0x67,0xFB,0x85,0xBC,0xA0,0x0B } }; // 38A3DC49-B672-555F-83AA-67FB85BCA00B
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::ICustomAttribute>{ 0x2ACEB5E0,0xC551,0x5DFD,{ 0x9C,0x8F,0x88,0xE5,0x95,0xA2,0x88,0xA8 } }; // 2ACEB5E0-C551-5DFD-9C8F-88E595A288A8
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::ICustomAttributeSig>{ 0x5FE579FE,0x1E09,0x5EB5,{ 0x96,0xD2,0x8E,0x80,0x7D,0xB0,0x58,0x55 } }; // 5FE579FE-1E09-5EB5-96D2-8E807DB05855
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IElemSig>{ 0xBCF2EC22,0xC669,0x5CA8,{ 0x9F,0x8F,0x5E,0x4D,0xDC,0xBC,0xF3,0x58 } }; // BCF2EC22-C669-5CA8-9F8F-5E4DDCBCF358
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IEvent>{ 0x426384FF,0x8755,0x59C8,{ 0x91,0xFF,0xE3,0xD9,0x35,0x28,0xC2,0xC3 } }; // 426384FF-8755-59C8-91FF-E3D93528C2C3
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IField>{ 0x4ABEBB40,0x6F4C,0x51DE,{ 0x8C,0xA3,0x06,0x3B,0xEF,0x9F,0x63,0x7B } }; // 4ABEBB40-6F4C-51DE-8CA3-063BEF9F637B
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IFieldSig>{ 0xC8824CB8,0xA692,0x5113,{ 0xB1,0x33,0x27,0x30,0x7F,0x96,0x7C,0x2D } }; // C8824CB8-A692-5113-B133-27307F967C2D
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IFixedArgSig>{ 0x8818BA26,0xA42D,0x5D4E,{ 0x83,0xF7,0xEC,0xCF,0xC1,0x19,0xF9,0xF8 } }; // 8818BA26-A42D-5D4E-83F7-ECCFC119F9F8
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IGenericTypeInstSig>{ 0x0E425688,0x8491,0x5280,{ 0xA9,0x86,0xFF,0xB2,0x16,0x06,0x08,0x93 } }; // 0E425688-8491-5280-A986-FFB216060893
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IInterfaceImpl>{ 0x3598383A,0x86DD,0x5E74,{ 0x8C,0xE2,0xAE,0xE6,0x40,0x15,0x6F,0x97 } }; // 3598383A-86DD-5E74-8CE2-AEE640156F97
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IMethodAttributes>{ 0xA167493B,0x921C,0x5D5E,{ 0xB2,0xDC,0xE8,0xAB,0x1C,0x21,0x78,0x3D } }; // A167493B-921C-5D5E-B2DC-E8AB1C21783D
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IMethodDef>{ 0xA4253F5C,0x06DF,0x512A,{ 0x87,0x97,0xCF,0xC8,0xBB,0x46,0x5B,0xD3 } }; // A4253F5C-06DF-512A-8797-CFC8BB465BD3
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IMethodDefSig>{ 0x10EDC7E2,0xFE65,0x5166,{ 0xB2,0x9C,0x68,0x50,0x14,0x4B,0x40,0xC1 } }; // 10EDC7E2-FE65-5166-B29C-6850144B40C1
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IMethodSemantics>{ 0x21237FC1,0xFC28,0x5D60,{ 0x84,0xBB,0x45,0xA5,0x91,0x11,0xA9,0x34 } }; // 21237FC1-FC28-5D60-84BB-45A59111A934
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IMethodSemanticsAttributes>{ 0x8C401D7C,0xCCFC,0x5873,{ 0x9C,0xA8,0xD4,0x23,0xB7,0x36,0x7B,0x82 } }; // 8C401D7C-CCFC-5873-9CA8-D423B7367B82
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::INamedArgSig>{ 0x782D32E2,0x42C3,0x5486,{ 0xA0,0x43,0x80,0xAD,0xEF,0x98,0xE4,0x54 } }; // 782D32E2-42C3-5486-A043-80ADEF98E454
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::INamespace>{ 0x1A47C6AE,0xCE80,0x536A,{ 0xAC,0x69,0x01,0xA9,0x9D,0x20,0x72,0x62 } }; // 1A47C6AE-CE80-536A-AC69-01A99D207262
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IParam>{ 0xDC0F9D35,0x4492,0x5FB4,{ 0xB6,0x6E,0xE0,0x77,0x0A,0xF6,0xAC,0xD2 } }; // DC0F9D35-4492-5FB4-B66E-E0770AF6ACD2
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IParamAttributes>{ 0x1D03B83C,0x335F,0x5F9F,{ 0x83,0xE4,0xD2,0xE9,0x00,0x40,0x8D,0x98 } }; // 1D03B83C-335F-5F9F-83E4-D2E900408D98
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IParamSig>{ 0x967DCDBC,0xF1C9,0x5059,{ 0x8F,0x65,0x07,0x68,0xE9,0x85,0x8E,0xDB } }; // 967DCDBC-F1C9-5059-8F65-0768E9858EDB
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IProperty>{ 0x551E0612,0x1EDA,0x52D3,{ 0xAF,0x2E,0xDB,0xF0,0x6E,0x8C,0x24,0x7E } }; // 551E0612-1EDA-52D3-AF2E-DBF06E8C247E
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IPropertySig>{ 0xD30EF141,0x8F2D,0x55B2,{ 0xB8,0xE0,0x77,0xFF,0x03,0x46,0x12,0x17 } }; // D30EF141-8F2D-55B2-B8E0-77FF03461217
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IRetTypeSig>{ 0xAAC21D87,0xB592,0x5577,{ 0xA8,0xA5,0xAE,0x5C,0x04,0x8C,0x93,0x5C } }; // AAC21D87-B592-5577-A8A5-AE5C048C935C
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IRoot>{ 0xBD926055,0x2CD6,0x5FE4,{ 0x82,0xE6,0x43,0x2C,0x33,0x8F,0x96,0x3D } }; // BD926055-2CD6-5FE4-82E6-432C338F963D
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::IRootFactory>{ 0xA381E2DB,0x8240,0x5887,{ 0xA5,0xEB,0xC8,0x63,0x8F,0x86,0x67,0x10 } }; // A381E2DB-8240-5887-A5EB-C8638F866710
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::ITypeDef>{ 0xC73C6ADC,0x5E8A,0x5950,{ 0x8B,0x62,0xF5,0x16,0x58,0x06,0x5D,0xC1 } }; // C73C6ADC-5E8A-5950-8B62-F51658065DC1
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::ITypeRef>{ 0xC3565575,0x006C,0x5C50,{ 0x95,0x74,0x80,0xD0,0x4C,0xB3,0xD1,0xFE } }; // C3565575-006C-5C50-9574-80D04CB3D1FE
    template <> inline constexpr guid guid_v<winrt::winrt_winmd::ITypeSig>{ 0xFB1CCE74,0x8268,0x5E7E,{ 0xBD,0x27,0x15,0xD6,0x12,0xAD,0x1F,0x29 } }; // FB1CCE74-8268-5E7E-BD27-15D612AD1F29
    template <> struct default_interface<winrt::winrt_winmd::Constant>{ using type = winrt::winrt_winmd::IConstant; };
    template <> struct default_interface<winrt::winrt_winmd::CustomAttribute>{ using type = winrt::winrt_winmd::ICustomAttribute; };
    template <> struct default_interface<winrt::winrt_winmd::CustomAttributeSig>{ using type = winrt::winrt_winmd::ICustomAttributeSig; };
    template <> struct default_interface<winrt::winrt_winmd::ElemSig>{ using type = winrt::winrt_winmd::IElemSig; };
    template <> struct default_interface<winrt::winrt_winmd::Event>{ using type = winrt::winrt_winmd::IEvent; };
    template <> struct default_interface<winrt::winrt_winmd::Field>{ using type = winrt::winrt_winmd::IField; };
    template <> struct default_interface<winrt::winrt_winmd::FieldSig>{ using type = winrt::winrt_winmd::IFieldSig; };
    template <> struct default_interface<winrt::winrt_winmd::FixedArgSig>{ using type = winrt::winrt_winmd::IFixedArgSig; };
    template <> struct default_interface<winrt::winrt_winmd::GenericTypeInstSig>{ using type = winrt::winrt_winmd::IGenericTypeInstSig; };
    template <> struct default_interface<winrt::winrt_winmd::InterfaceImpl>{ using type = winrt::winrt_winmd::IInterfaceImpl; };
    template <> struct default_interface<winrt::winrt_winmd::MethodAttributes>{ using type = winrt::winrt_winmd::IMethodAttributes; };
    template <> struct default_interface<winrt::winrt_winmd::MethodDef>{ using type = winrt::winrt_winmd::IMethodDef; };
    template <> struct default_interface<winrt::winrt_winmd::MethodDefSig>{ using type = winrt::winrt_winmd::IMethodDefSig; };
    template <> struct default_interface<winrt::winrt_winmd::MethodSemantics>{ using type = winrt::winrt_winmd::IMethodSemantics; };
    template <> struct default_interface<winrt::winrt_winmd::MethodSemanticsAttributes>{ using type = winrt::winrt_winmd::IMethodSemanticsAttributes; };
    template <> struct default_interface<winrt::winrt_winmd::NamedArgSig>{ using type = winrt::winrt_winmd::INamedArgSig; };
    template <> struct default_interface<winrt::winrt_winmd::Namespace>{ using type = winrt::winrt_winmd::INamespace; };
    template <> struct default_interface<winrt::winrt_winmd::Param>{ using type = winrt::winrt_winmd::IParam; };
    template <> struct default_interface<winrt::winrt_winmd::ParamAttributes>{ using type = winrt::winrt_winmd::IParamAttributes; };
    template <> struct default_interface<winrt::winrt_winmd::ParamSig>{ using type = winrt::winrt_winmd::IParamSig; };
    template <> struct default_interface<winrt::winrt_winmd::Property>{ using type = winrt::winrt_winmd::IProperty; };
    template <> struct default_interface<winrt::winrt_winmd::PropertySig>{ using type = winrt::winrt_winmd::IPropertySig; };
    template <> struct default_interface<winrt::winrt_winmd::RetTypeSig>{ using type = winrt::winrt_winmd::IRetTypeSig; };
    template <> struct default_interface<winrt::winrt_winmd::Root>{ using type = winrt::winrt_winmd::IRoot; };
    template <> struct default_interface<winrt::winrt_winmd::TypeDef>{ using type = winrt::winrt_winmd::ITypeDef; };
    template <> struct default_interface<winrt::winrt_winmd::TypeRef>{ using type = winrt::winrt_winmd::ITypeRef; };
    template <> struct default_interface<winrt::winrt_winmd::TypeSig>{ using type = winrt::winrt_winmd::ITypeSig; };
    template <> struct abi<winrt::winrt_winmd::IConstant>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Type(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Valid(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ValueInt32(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ValueUInt32(uint32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::ICustomAttribute>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TypeNamespace(void**) noexcept = 0;
            virtual int32_t __stdcall get_TypeName(void**) noexcept = 0;
            virtual int32_t __stdcall get_Value(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::ICustomAttributeSig>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FixedArgs(void**) noexcept = 0;
            virtual int32_t __stdcall get_NamedArgs(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IElemSig>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HasSystemType(bool*) noexcept = 0;
            virtual int32_t __stdcall get_SystemType(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasStringValue(bool*) noexcept = 0;
            virtual int32_t __stdcall get_StringValue(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasInt32Value(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Int32Value(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_HasUInt32Value(bool*) noexcept = 0;
            virtual int32_t __stdcall get_UInt32Value(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_HasUInt16Value(bool*) noexcept = 0;
            virtual int32_t __stdcall get_UInt16Value(uint16_t*) noexcept = 0;
            virtual int32_t __stdcall get_HasByteValue(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ByteValue(uint8_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IEvent>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall get_CustomAttributes(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasEventTypeDef(bool*) noexcept = 0;
            virtual int32_t __stdcall get_EventTypeDef(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasEventTypeRef(bool*) noexcept = 0;
            virtual int32_t __stdcall get_EventTypeRef(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasGenericTypeInstSig(bool*) noexcept = 0;
            virtual int32_t __stdcall get_GenericTypeInstSig(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IField>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Constant(void**) noexcept = 0;
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall get_CustomAttributes(void**) noexcept = 0;
            virtual int32_t __stdcall get_Signature(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IFieldSig>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Type(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IFixedArgSig>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HasElemSigs(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ElemSigs(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasElemSig(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ElemSig(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IGenericTypeInstSig>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ClassOrValueType(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_HasGenericTypeDef(bool*) noexcept = 0;
            virtual int32_t __stdcall get_GenericTypeDef(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasGenericTypeRef(bool*) noexcept = 0;
            virtual int32_t __stdcall get_GenericTypeRef(void**) noexcept = 0;
            virtual int32_t __stdcall get_GenericArgs(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IInterfaceImpl>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Class(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasTypeDef(bool*) noexcept = 0;
            virtual int32_t __stdcall get_TypeDef(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasTypeRef(bool*) noexcept = 0;
            virtual int32_t __stdcall get_TypeRef(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasGenericTypeInstSig(bool*) noexcept = 0;
            virtual int32_t __stdcall get_GenericTypeInstSig(void**) noexcept = 0;
            virtual int32_t __stdcall get_CustomAttributes(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IMethodAttributes>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Static(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Final(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Virtual(bool*) noexcept = 0;
            virtual int32_t __stdcall get_HideBySig(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Strict(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Abstract(bool*) noexcept = 0;
            virtual int32_t __stdcall get_SpecialName(bool*) noexcept = 0;
            virtual int32_t __stdcall get_PInvokeImpl(bool*) noexcept = 0;
            virtual int32_t __stdcall get_UnmanagedExport(bool*) noexcept = 0;
            virtual int32_t __stdcall get_RTSpecialName(bool*) noexcept = 0;
            virtual int32_t __stdcall get_HasSecurity(bool*) noexcept = 0;
            virtual int32_t __stdcall get_RequireSecObject(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IMethodDef>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall get_Flags(void**) noexcept = 0;
            virtual int32_t __stdcall get_SpecialName(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Signature(void**) noexcept = 0;
            virtual int32_t __stdcall get_ParamList(void**) noexcept = 0;
            virtual int32_t __stdcall get_CustomAttributes(void**) noexcept = 0;
            virtual int32_t __stdcall get_Parent(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IMethodDefSig>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ReturnType(void**) noexcept = 0;
            virtual int32_t __stdcall get_Params(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IMethodSemantics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Semantic(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IMethodSemanticsAttributes>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Setter(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Getter(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Other(bool*) noexcept = 0;
            virtual int32_t __stdcall get_AddOn(bool*) noexcept = 0;
            virtual int32_t __stdcall get_RemoveOn(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Fire(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::INamedArgSig>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall get_Value(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::INamespace>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall get_Classes(void**) noexcept = 0;
            virtual int32_t __stdcall get_Delegates(void**) noexcept = 0;
            virtual int32_t __stdcall get_Enums(void**) noexcept = 0;
            virtual int32_t __stdcall get_Interfaces(void**) noexcept = 0;
            virtual int32_t __stdcall get_Structs(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IParam>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall get_Flags(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IParamAttributes>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_In(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Out(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Optional(bool*) noexcept = 0;
            virtual int32_t __stdcall get_HasDefault(bool*) noexcept = 0;
            virtual int32_t __stdcall get_HasFieldMarshal(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IParamSig>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ByRef(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Type(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IProperty>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall get_Type(void**) noexcept = 0;
            virtual int32_t __stdcall get_MethodSemantic(void**) noexcept = 0;
            virtual int32_t __stdcall get_CustomAttributes(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IPropertySig>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Type(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IRetTypeSig>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ByRef(bool*) noexcept = 0;
            virtual int32_t __stdcall get_HasType(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Type(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IRoot>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Namespaces(void**) noexcept = 0;
            virtual int32_t __stdcall Find(void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::IRootFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::ITypeDef>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsValid(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsInterface(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsStruct(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsEnum(bool*) noexcept = 0;
            virtual int32_t __stdcall get_HasGenericParams(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall get_Namespace(void**) noexcept = 0;
            virtual int32_t __stdcall get_FieldList(void**) noexcept = 0;
            virtual int32_t __stdcall get_InterfaceImpls(void**) noexcept = 0;
            virtual int32_t __stdcall get_CustomAttributes(void**) noexcept = 0;
            virtual int32_t __stdcall get_MethodList(void**) noexcept = 0;
            virtual int32_t __stdcall get_PropertyList(void**) noexcept = 0;
            virtual int32_t __stdcall get_EventList(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::ITypeRef>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_TypeName(void**) noexcept = 0;
            virtual int32_t __stdcall get_TypeNamespace(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::winrt_winmd::ITypeSig>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HasTypeDef(bool*) noexcept = 0;
            virtual int32_t __stdcall get_TypeDef(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasTypeRef(bool*) noexcept = 0;
            virtual int32_t __stdcall get_TypeRef(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasElementType(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ElementType(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_HasGenericTypeIndex(bool*) noexcept = 0;
            virtual int32_t __stdcall get_GenericTypeIndex(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_HasGenericTypeInstSig(bool*) noexcept = 0;
            virtual int32_t __stdcall get_GenericTypeInstSig(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasGenericMethodTypeIndex(bool*) noexcept = 0;
            virtual int32_t __stdcall get_GenericMethodTypeIndex(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_IsArray(bool*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_winrt_winmd_IConstant
    {
        [[nodiscard]] auto Type() const;
        [[nodiscard]] auto Valid() const;
        [[nodiscard]] auto ValueInt32() const;
        [[nodiscard]] auto ValueUInt32() const;
    };
    template <> struct consume<winrt::winrt_winmd::IConstant>
    {
        template <typename D> using type = consume_winrt_winmd_IConstant<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_ICustomAttribute
    {
        [[nodiscard]] auto TypeNamespace() const;
        [[nodiscard]] auto TypeName() const;
        [[nodiscard]] auto Value() const;
    };
    template <> struct consume<winrt::winrt_winmd::ICustomAttribute>
    {
        template <typename D> using type = consume_winrt_winmd_ICustomAttribute<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_ICustomAttributeSig
    {
        [[nodiscard]] auto FixedArgs() const;
        [[nodiscard]] auto NamedArgs() const;
    };
    template <> struct consume<winrt::winrt_winmd::ICustomAttributeSig>
    {
        template <typename D> using type = consume_winrt_winmd_ICustomAttributeSig<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IElemSig
    {
        [[nodiscard]] auto HasSystemType() const;
        [[nodiscard]] auto SystemType() const;
        [[nodiscard]] auto HasStringValue() const;
        [[nodiscard]] auto StringValue() const;
        [[nodiscard]] auto HasInt32Value() const;
        [[nodiscard]] auto Int32Value() const;
        [[nodiscard]] auto HasUInt32Value() const;
        [[nodiscard]] auto UInt32Value() const;
        [[nodiscard]] auto HasUInt16Value() const;
        [[nodiscard]] auto UInt16Value() const;
        [[nodiscard]] auto HasByteValue() const;
        [[nodiscard]] auto ByteValue() const;
    };
    template <> struct consume<winrt::winrt_winmd::IElemSig>
    {
        template <typename D> using type = consume_winrt_winmd_IElemSig<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IEvent
    {
        [[nodiscard]] auto Name() const;
        [[nodiscard]] auto CustomAttributes() const;
        [[nodiscard]] auto HasEventTypeDef() const;
        [[nodiscard]] auto EventTypeDef() const;
        [[nodiscard]] auto HasEventTypeRef() const;
        [[nodiscard]] auto EventTypeRef() const;
        [[nodiscard]] auto HasGenericTypeInstSig() const;
        [[nodiscard]] auto GenericTypeInstSig() const;
    };
    template <> struct consume<winrt::winrt_winmd::IEvent>
    {
        template <typename D> using type = consume_winrt_winmd_IEvent<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IField
    {
        [[nodiscard]] auto Constant() const;
        [[nodiscard]] auto Name() const;
        [[nodiscard]] auto CustomAttributes() const;
        [[nodiscard]] auto Signature() const;
    };
    template <> struct consume<winrt::winrt_winmd::IField>
    {
        template <typename D> using type = consume_winrt_winmd_IField<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IFieldSig
    {
        [[nodiscard]] auto Type() const;
    };
    template <> struct consume<winrt::winrt_winmd::IFieldSig>
    {
        template <typename D> using type = consume_winrt_winmd_IFieldSig<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IFixedArgSig
    {
        [[nodiscard]] auto HasElemSigs() const;
        [[nodiscard]] auto ElemSigs() const;
        [[nodiscard]] auto HasElemSig() const;
        [[nodiscard]] auto ElemSig() const;
    };
    template <> struct consume<winrt::winrt_winmd::IFixedArgSig>
    {
        template <typename D> using type = consume_winrt_winmd_IFixedArgSig<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IGenericTypeInstSig
    {
        [[nodiscard]] auto ClassOrValueType() const;
        [[nodiscard]] auto HasGenericTypeDef() const;
        [[nodiscard]] auto GenericTypeDef() const;
        [[nodiscard]] auto HasGenericTypeRef() const;
        [[nodiscard]] auto GenericTypeRef() const;
        [[nodiscard]] auto GenericArgs() const;
    };
    template <> struct consume<winrt::winrt_winmd::IGenericTypeInstSig>
    {
        template <typename D> using type = consume_winrt_winmd_IGenericTypeInstSig<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IInterfaceImpl
    {
        [[nodiscard]] auto Class() const;
        [[nodiscard]] auto HasTypeDef() const;
        [[nodiscard]] auto TypeDef() const;
        [[nodiscard]] auto HasTypeRef() const;
        [[nodiscard]] auto TypeRef() const;
        [[nodiscard]] auto HasGenericTypeInstSig() const;
        [[nodiscard]] auto GenericTypeInstSig() const;
        [[nodiscard]] auto CustomAttributes() const;
    };
    template <> struct consume<winrt::winrt_winmd::IInterfaceImpl>
    {
        template <typename D> using type = consume_winrt_winmd_IInterfaceImpl<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IMethodAttributes
    {
        [[nodiscard]] auto Static() const;
        [[nodiscard]] auto Final() const;
        [[nodiscard]] auto Virtual() const;
        [[nodiscard]] auto HideBySig() const;
        [[nodiscard]] auto Strict() const;
        [[nodiscard]] auto Abstract() const;
        [[nodiscard]] auto SpecialName() const;
        [[nodiscard]] auto PInvokeImpl() const;
        [[nodiscard]] auto UnmanagedExport() const;
        [[nodiscard]] auto RTSpecialName() const;
        [[nodiscard]] auto HasSecurity() const;
        [[nodiscard]] auto RequireSecObject() const;
    };
    template <> struct consume<winrt::winrt_winmd::IMethodAttributes>
    {
        template <typename D> using type = consume_winrt_winmd_IMethodAttributes<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IMethodDef
    {
        [[nodiscard]] auto Name() const;
        [[nodiscard]] auto Flags() const;
        [[nodiscard]] auto SpecialName() const;
        [[nodiscard]] auto Signature() const;
        [[nodiscard]] auto ParamList() const;
        [[nodiscard]] auto CustomAttributes() const;
        [[nodiscard]] auto Parent() const;
    };
    template <> struct consume<winrt::winrt_winmd::IMethodDef>
    {
        template <typename D> using type = consume_winrt_winmd_IMethodDef<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IMethodDefSig
    {
        [[nodiscard]] auto ReturnType() const;
        [[nodiscard]] auto Params() const;
    };
    template <> struct consume<winrt::winrt_winmd::IMethodDefSig>
    {
        template <typename D> using type = consume_winrt_winmd_IMethodDefSig<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IMethodSemantics
    {
        [[nodiscard]] auto Semantic() const;
    };
    template <> struct consume<winrt::winrt_winmd::IMethodSemantics>
    {
        template <typename D> using type = consume_winrt_winmd_IMethodSemantics<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IMethodSemanticsAttributes
    {
        [[nodiscard]] auto Setter() const;
        [[nodiscard]] auto Getter() const;
        [[nodiscard]] auto Other() const;
        [[nodiscard]] auto AddOn() const;
        [[nodiscard]] auto RemoveOn() const;
        [[nodiscard]] auto Fire() const;
    };
    template <> struct consume<winrt::winrt_winmd::IMethodSemanticsAttributes>
    {
        template <typename D> using type = consume_winrt_winmd_IMethodSemanticsAttributes<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_INamedArgSig
    {
        [[nodiscard]] auto Name() const;
        [[nodiscard]] auto Value() const;
    };
    template <> struct consume<winrt::winrt_winmd::INamedArgSig>
    {
        template <typename D> using type = consume_winrt_winmd_INamedArgSig<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_INamespace
    {
        [[nodiscard]] auto Name() const;
        [[nodiscard]] auto Classes() const;
        [[nodiscard]] auto Delegates() const;
        [[nodiscard]] auto Enums() const;
        [[nodiscard]] auto Interfaces() const;
        [[nodiscard]] auto Structs() const;
    };
    template <> struct consume<winrt::winrt_winmd::INamespace>
    {
        template <typename D> using type = consume_winrt_winmd_INamespace<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IParam
    {
        [[nodiscard]] auto Name() const;
        [[nodiscard]] auto Flags() const;
    };
    template <> struct consume<winrt::winrt_winmd::IParam>
    {
        template <typename D> using type = consume_winrt_winmd_IParam<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IParamAttributes
    {
        [[nodiscard]] auto In() const;
        [[nodiscard]] auto Out() const;
        [[nodiscard]] auto Optional() const;
        [[nodiscard]] auto HasDefault() const;
        [[nodiscard]] auto HasFieldMarshal() const;
    };
    template <> struct consume<winrt::winrt_winmd::IParamAttributes>
    {
        template <typename D> using type = consume_winrt_winmd_IParamAttributes<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IParamSig
    {
        [[nodiscard]] auto ByRef() const;
        [[nodiscard]] auto Type() const;
    };
    template <> struct consume<winrt::winrt_winmd::IParamSig>
    {
        template <typename D> using type = consume_winrt_winmd_IParamSig<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IProperty
    {
        [[nodiscard]] auto Name() const;
        [[nodiscard]] auto Type() const;
        [[nodiscard]] auto MethodSemantic() const;
        [[nodiscard]] auto CustomAttributes() const;
    };
    template <> struct consume<winrt::winrt_winmd::IProperty>
    {
        template <typename D> using type = consume_winrt_winmd_IProperty<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IPropertySig
    {
        [[nodiscard]] auto Type() const;
    };
    template <> struct consume<winrt::winrt_winmd::IPropertySig>
    {
        template <typename D> using type = consume_winrt_winmd_IPropertySig<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IRetTypeSig
    {
        [[nodiscard]] auto ByRef() const;
        [[nodiscard]] auto HasType() const;
        [[nodiscard]] auto Type() const;
    };
    template <> struct consume<winrt::winrt_winmd::IRetTypeSig>
    {
        template <typename D> using type = consume_winrt_winmd_IRetTypeSig<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IRoot
    {
        [[nodiscard]] auto Namespaces() const;
        auto Find(param::hstring const& namespaceName, param::hstring const& name) const;
    };
    template <> struct consume<winrt::winrt_winmd::IRoot>
    {
        template <typename D> using type = consume_winrt_winmd_IRoot<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_IRootFactory
    {
        auto CreateInstance(param::vector_view<hstring> const& fileNames) const;
    };
    template <> struct consume<winrt::winrt_winmd::IRootFactory>
    {
        template <typename D> using type = consume_winrt_winmd_IRootFactory<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_ITypeDef
    {
        [[nodiscard]] auto IsValid() const;
        [[nodiscard]] auto IsInterface() const;
        [[nodiscard]] auto IsStruct() const;
        [[nodiscard]] auto IsEnum() const;
        [[nodiscard]] auto HasGenericParams() const;
        [[nodiscard]] auto Name() const;
        [[nodiscard]] auto Namespace() const;
        [[nodiscard]] auto FieldList() const;
        [[nodiscard]] auto InterfaceImpls() const;
        [[nodiscard]] auto CustomAttributes() const;
        [[nodiscard]] auto MethodList() const;
        [[nodiscard]] auto PropertyList() const;
        [[nodiscard]] auto EventList() const;
    };
    template <> struct consume<winrt::winrt_winmd::ITypeDef>
    {
        template <typename D> using type = consume_winrt_winmd_ITypeDef<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_ITypeRef
    {
        [[nodiscard]] auto TypeName() const;
        [[nodiscard]] auto TypeNamespace() const;
    };
    template <> struct consume<winrt::winrt_winmd::ITypeRef>
    {
        template <typename D> using type = consume_winrt_winmd_ITypeRef<D>;
    };
    template <typename D>
    struct consume_winrt_winmd_ITypeSig
    {
        [[nodiscard]] auto HasTypeDef() const;
        [[nodiscard]] auto TypeDef() const;
        [[nodiscard]] auto HasTypeRef() const;
        [[nodiscard]] auto TypeRef() const;
        [[nodiscard]] auto HasElementType() const;
        [[nodiscard]] auto ElementType() const;
        [[nodiscard]] auto HasGenericTypeIndex() const;
        [[nodiscard]] auto GenericTypeIndex() const;
        [[nodiscard]] auto HasGenericTypeInstSig() const;
        [[nodiscard]] auto GenericTypeInstSig() const;
        [[nodiscard]] auto HasGenericMethodTypeIndex() const;
        [[nodiscard]] auto GenericMethodTypeIndex() const;
        [[nodiscard]] auto IsArray() const;
    };
    template <> struct consume<winrt::winrt_winmd::ITypeSig>
    {
        template <typename D> using type = consume_winrt_winmd_ITypeSig<D>;
    };
}
#endif
