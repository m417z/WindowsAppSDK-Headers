// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#ifndef WINRT_Microsoft_UI_Xaml_Controls_Primitives_0_H
#define WINRT_Microsoft_UI_Xaml_Controls_Primitives_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Controls
{
    struct ColorChangedEventArgs;
    enum class ColorPickerHsvChannel : int32_t;
    enum class ColorSpectrumComponents : int32_t;
    enum class ColorSpectrumShape : int32_t;
    struct InfoBadge;
    struct ScrollingAnchorRequestedEventArgs;
    struct ScrollingBringingIntoViewEventArgs;
    enum class ScrollingChainMode : int32_t;
    enum class ScrollingContentOrientation : int32_t;
    enum class ScrollingInputKinds : uint32_t;
    enum class ScrollingInteractionState : int32_t;
    enum class ScrollingRailMode : int32_t;
    struct ScrollingScrollAnimationStartingEventArgs;
    struct ScrollingScrollCompletedEventArgs;
    enum class ScrollingScrollMode : int32_t;
    struct ScrollingScrollOptions;
    struct ScrollingZoomAnimationStartingEventArgs;
    struct ScrollingZoomCompletedEventArgs;
    enum class ScrollingZoomMode : int32_t;
    struct ScrollingZoomOptions;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct EventRegistrationToken;
    template <typename T> struct WINRT_IMPL_EMPTY_BASES IReference;
    struct Rect;
    template <typename TSender, typename TResult> struct WINRT_IMPL_EMPTY_BASES TypedEventHandler;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Numerics
{
}
WINRT_EXPORT namespace winrt::Windows::UI
{
    struct Color;
}
WINRT_EXPORT namespace winrt::Windows::UI::Composition
{
    struct CompositionAnimation;
    struct CompositionPropertySet;
}
WINRT_EXPORT namespace winrt::Windows::UI::Input
{
    struct PointerPoint;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml
{
    struct DependencyObject;
    struct DependencyProperty;
    struct Thickness;
    struct UIElement;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Automation::Peers
{
    enum class AutomationControlType : int32_t;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Controls
{
    struct AutoSuggestBox;
    struct ComboBox;
    struct IconElement;
    enum class Orientation : int32_t;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Media
{
    struct Brush;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Controls::Primitives
{
    enum class CornerRadiusFilterKind : int32_t
    {
        None = 0,
        Top = 1,
        Right = 2,
        Bottom = 3,
        Left = 4,
        TopLeftValue = 5,
        BottomRightValue = 6,
    };
    enum class CornerRadiusToThicknessConverterKind : int32_t
    {
        FilterTopAndBottomFromLeft = 0,
        FilterTopAndBottomFromRight = 1,
        FilterLeftAndRightFromTop = 2,
        FilterLeftAndRightFromBottom = 3,
        FilterTopFromTopLeft = 4,
        FilterTopFromTopRight = 5,
        FilterRightFromTopRight = 6,
        FilterRightFromBottomRight = 7,
        FilterBottomFromBottomRight = 8,
        FilterBottomFromBottomLeft = 9,
        FilterLeftFromBottomLeft = 10,
        FilterLeftFromTopLeft = 11,
    };
    enum class ScrollSnapPointsAlignment : int32_t
    {
        Near = 0,
        Center = 1,
        Far = 2,
    };
    struct IAutoSuggestBoxHelper;
    struct IAutoSuggestBoxHelperStatics;
    struct IColorPickerSlider;
    struct IColorPickerSliderFactory;
    struct IColorPickerSliderStatics;
    struct IColorSpectrum;
    struct IColorSpectrumFactory;
    struct IColorSpectrumStatics;
    struct IColumnMajorUniformToLargestGridLayout;
    struct IColumnMajorUniformToLargestGridLayoutFactory;
    struct IColumnMajorUniformToLargestGridLayoutStatics;
    struct IComboBoxHelper;
    struct IComboBoxHelperStatics;
    struct ICommandBarFlyoutCommandBar;
    struct ICommandBarFlyoutCommandBarAutomationPropertiesStatics;
    struct ICommandBarFlyoutCommandBarFactory;
    struct ICommandBarFlyoutCommandBarTemplateSettings;
    struct ICornerRadiusFilterConverter;
    struct ICornerRadiusFilterConverterStatics;
    struct ICornerRadiusToThicknessConverter;
    struct ICornerRadiusToThicknessConverterStatics;
    struct IInfoBarPanel;
    struct IInfoBarPanelFactory;
    struct IInfoBarPanelStatics;
    struct IMonochromaticOverlayPresenter;
    struct IMonochromaticOverlayPresenterFactory;
    struct IMonochromaticOverlayPresenterStatics;
    struct INavigationViewItemPresenter;
    struct INavigationViewItemPresenter2;
    struct INavigationViewItemPresenterFactory;
    struct INavigationViewItemPresenterStatics;
    struct INavigationViewItemPresenterStatics2;
    struct INavigationViewItemPresenterTemplateSettings;
    struct INavigationViewItemPresenterTemplateSettingsFactory;
    struct INavigationViewItemPresenterTemplateSettingsStatics;
    struct IRepeatedScrollSnapPoint;
    struct IRepeatedScrollSnapPointFactory;
    struct IRepeatedZoomSnapPoint;
    struct IRepeatedZoomSnapPointFactory;
    struct IScrollController;
    struct IScrollControllerAddScrollVelocityRequestedEventArgs;
    struct IScrollControllerAddScrollVelocityRequestedEventArgsFactory;
    struct IScrollControllerInteractionRequestedEventArgs;
    struct IScrollControllerInteractionRequestedEventArgsFactory;
    struct IScrollControllerScrollByRequestedEventArgs;
    struct IScrollControllerScrollByRequestedEventArgsFactory;
    struct IScrollControllerScrollToRequestedEventArgs;
    struct IScrollControllerScrollToRequestedEventArgsFactory;
    struct IScrollPresenter;
    struct IScrollPresenterFactory;
    struct IScrollPresenterStatics;
    struct IScrollSnapPoint;
    struct IScrollSnapPointBase;
    struct IScrollSnapPointBaseFactory;
    struct IScrollSnapPointFactory;
    struct ISnapPointBase;
    struct ISnapPointBaseFactory;
    struct ITabViewListView;
    struct ITabViewListViewFactory;
    struct IZoomSnapPoint;
    struct IZoomSnapPointBase;
    struct IZoomSnapPointBaseFactory;
    struct IZoomSnapPointFactory;
    struct AutoSuggestBoxHelper;
    struct ColorPickerSlider;
    struct ColorSpectrum;
    struct ColumnMajorUniformToLargestGridLayout;
    struct ComboBoxHelper;
    struct CommandBarFlyoutCommandBar;
    struct CommandBarFlyoutCommandBarAutomationProperties;
    struct CommandBarFlyoutCommandBarTemplateSettings;
    struct CornerRadiusFilterConverter;
    struct CornerRadiusToThicknessConverter;
    struct InfoBarPanel;
    struct MonochromaticOverlayPresenter;
    struct NavigationViewItemPresenter;
    struct NavigationViewItemPresenterTemplateSettings;
    struct RepeatedScrollSnapPoint;
    struct RepeatedZoomSnapPoint;
    struct ScrollControllerAddScrollVelocityRequestedEventArgs;
    struct ScrollControllerInteractionRequestedEventArgs;
    struct ScrollControllerScrollByRequestedEventArgs;
    struct ScrollControllerScrollToRequestedEventArgs;
    struct ScrollPresenter;
    struct ScrollSnapPoint;
    struct ScrollSnapPointBase;
    struct SnapPointBase;
    struct TabViewListView;
    struct ZoomSnapPoint;
    struct ZoomSnapPointBase;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelper>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelperStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayout>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelper>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelperStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarAutomationPropertiesStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanel>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPointFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPointFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgsFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBaseFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBaseFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListViewFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBaseFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::AutoSuggestBoxHelper>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColumnMajorUniformToLargestGridLayout>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ComboBoxHelper>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarAutomationProperties>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusFilterConverter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusToThicknessConverter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::InfoBarPanel>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::MonochromaticOverlayPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenterTemplateSettings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedScrollSnapPoint>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedZoomSnapPoint>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerAddScrollVelocityRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerInteractionRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPoint>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::SnapPointBase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::TabViewListView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPoint>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPointBase>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusFilterKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusToThicknessConverterKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::AutoSuggestBoxHelper> = L"Microsoft.UI.Xaml.Controls.Primitives.AutoSuggestBoxHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider> = L"Microsoft.UI.Xaml.Controls.Primitives.ColorPickerSlider";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum> = L"Microsoft.UI.Xaml.Controls.Primitives.ColorSpectrum";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColumnMajorUniformToLargestGridLayout> = L"Microsoft.UI.Xaml.Controls.Primitives.ColumnMajorUniformToLargestGridLayout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ComboBoxHelper> = L"Microsoft.UI.Xaml.Controls.Primitives.ComboBoxHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar> = L"Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarAutomationProperties> = L"Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarAutomationProperties";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.CommandBarFlyoutCommandBarTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusFilterConverter> = L"Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterConverter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusToThicknessConverter> = L"Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::InfoBarPanel> = L"Microsoft.UI.Xaml.Controls.Primitives.InfoBarPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::MonochromaticOverlayPresenter> = L"Microsoft.UI.Xaml.Controls.Primitives.MonochromaticOverlayPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter> = L"Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenterTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.NavigationViewItemPresenterTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedScrollSnapPoint> = L"Microsoft.UI.Xaml.Controls.Primitives.RepeatedScrollSnapPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedZoomSnapPoint> = L"Microsoft.UI.Xaml.Controls.Primitives.RepeatedZoomSnapPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerAddScrollVelocityRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerAddScrollVelocityRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerInteractionRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerInteractionRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollByRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollControllerScrollToRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPoint> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::SnapPointBase> = L"Microsoft.UI.Xaml.Controls.Primitives.SnapPointBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::TabViewListView> = L"Microsoft.UI.Xaml.Controls.Primitives.TabViewListView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPoint> = L"Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPointBase> = L"Microsoft.UI.Xaml.Controls.Primitives.ZoomSnapPointBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusFilterKind> = L"Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusFilterKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusToThicknessConverterKind> = L"Microsoft.UI.Xaml.Controls.Primitives.CornerRadiusToThicknessConverterKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment> = L"Microsoft.UI.Xaml.Controls.Primitives.ScrollSnapPointsAlignment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelper> = L"Microsoft.UI.Xaml.Controls.Primitives.IAutoSuggestBoxHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelperStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IAutoSuggestBoxHelperStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider> = L"Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSlider";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IColorPickerSliderStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum> = L"Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrum";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IColorSpectrumStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayout> = L"Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayout";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IColumnMajorUniformToLargestGridLayoutStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelper> = L"Microsoft.UI.Xaml.Controls.Primitives.IComboBoxHelper";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelperStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IComboBoxHelperStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar> = L"Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBar";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarAutomationPropertiesStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarAutomationPropertiesStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.ICommandBarFlyoutCommandBarTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverter> = L"Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverterStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusFilterConverterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverter> = L"Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverterStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.ICornerRadiusToThicknessConverterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanel> = L"Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanel";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IInfoBarPanelStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenter> = L"Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IMonochromaticOverlayPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter> = L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter2> = L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenter2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics2> = L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterStatics2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettings> = L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.INavigationViewItemPresenterTemplateSettingsStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint> = L"Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPointFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IRepeatedScrollSnapPointFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint> = L"Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPointFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IRepeatedZoomSnapPointFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollController";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerAddScrollVelocityRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgsFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerAddScrollVelocityRequestedEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerInteractionRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgsFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerInteractionRequestedEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgsFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollByRequestedEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgsFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollControllerScrollToRequestedEventArgsFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenter";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterStatics> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollPresenterStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBaseFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointBaseFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IScrollSnapPointFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase> = L"Microsoft.UI.Xaml.Controls.Primitives.ISnapPointBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBaseFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.ISnapPointBaseFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListView> = L"Microsoft.UI.Xaml.Controls.Primitives.ITabViewListView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListViewFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.ITabViewListViewFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint> = L"Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase> = L"Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointBase";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBaseFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointBaseFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointFactory> = L"Microsoft.UI.Xaml.Controls.Primitives.IZoomSnapPointFactory";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelper>{ 0x1E56736C,0x8248,0x57D9,{ 0xAC,0x04,0xE4,0xE7,0xDC,0xC3,0xF9,0xE1 } }; // 1E56736C-8248-57D9-AC04-E4E7DCC3F9E1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelperStatics>{ 0x1FD01B5A,0x71AB,0x5D3A,{ 0x93,0xE7,0x14,0x1B,0xFD,0x6E,0xDF,0x6A } }; // 1FD01B5A-71AB-5D3A-93E7-141BFD6EDF6A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider>{ 0x456231BB,0x5A4C,0x564B,{ 0x9B,0x3D,0x2F,0x15,0x70,0x61,0xA0,0xF8 } }; // 456231BB-5A4C-564B-9B3D-2F157061A0F8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory>{ 0xD0CB1F0E,0x0771,0x5C7D,{ 0xBA,0x14,0xAA,0x43,0x11,0x79,0xB2,0xAC } }; // D0CB1F0E-0771-5C7D-BA14-AA431179B2AC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics>{ 0x9792B197,0xC864,0x59F3,{ 0x9F,0xA0,0xE2,0x1C,0x7F,0xD4,0x6B,0x79 } }; // 9792B197-C864-59F3-9FA0-E21C7FD46B79
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum>{ 0x75305916,0x882D,0x5667,{ 0xBF,0xD0,0x0A,0xF7,0x2D,0x50,0x2D,0x72 } }; // 75305916-882D-5667-BFD0-0AF72D502D72
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory>{ 0xEFECD442,0x8C2A,0x50A6,{ 0x88,0xA3,0x39,0x99,0xEA,0x01,0xF0,0x96 } }; // EFECD442-8C2A-50A6-88A3-3999EA01F096
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>{ 0xAA1D251D,0x9E7B,0x5767,{ 0xAD,0xB9,0xFC,0xD3,0x68,0x55,0xD8,0x2E } }; // AA1D251D-9E7B-5767-ADB9-FCD36855D82E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayout>{ 0xEE10A6AA,0xEFEB,0x51AC,{ 0xB7,0x91,0x71,0x91,0x3A,0xE8,0xC2,0x35 } }; // EE10A6AA-EFEB-51AC-B791-71913AE8C235
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutFactory>{ 0x2F21AF59,0x1585,0x5325,{ 0x84,0x12,0x2B,0x83,0xBF,0x05,0xD3,0x45 } }; // 2F21AF59-1585-5325-8412-2B83BF05D345
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutStatics>{ 0x29A1AC22,0xEE31,0x501F,{ 0x94,0xF8,0xA0,0x0D,0x33,0x8F,0x10,0x0A } }; // 29A1AC22-EE31-501F-94F8-A00D338F100A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelper>{ 0x5A3C87AC,0xC399,0x5E5F,{ 0x87,0x3F,0xB9,0xD0,0xE8,0xBC,0xCE,0xB7 } }; // 5A3C87AC-C399-5E5F-873F-B9D0E8BCCEB7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelperStatics>{ 0x59B4EB2D,0xBD79,0x59B2,{ 0xB3,0x43,0xFA,0x72,0xC7,0x47,0xD7,0x2A } }; // 59B4EB2D-BD79-59B2-B343-FA72C747D72A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar>{ 0x0F7120C5,0x6D00,0x5489,{ 0x91,0x71,0xBE,0xDD,0x2D,0x4E,0xF6,0x77 } }; // 0F7120C5-6D00-5489-9171-BEDD2D4EF677
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarAutomationPropertiesStatics>{ 0xA0D9D55F,0x090D,0x5F25,{ 0x89,0x53,0x0F,0xD1,0xE6,0x5F,0x9B,0x5A } }; // A0D9D55F-090D-5F25-8953-0FD1E65F9B5A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory>{ 0x58DBCDA9,0x38E4,0x5EFC,{ 0xB7,0x40,0x26,0xFD,0xA3,0xD0,0xA3,0xC6 } }; // 58DBCDA9-38E4-5EFC-B740-26FDA3D0A3C6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings>{ 0x533CC5CA,0xDCF7,0x5F9D,{ 0xA4,0x60,0x93,0x4A,0x88,0x3A,0xCD,0xC1 } }; // 533CC5CA-DCF7-5F9D-A460-934A883ACDC1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverter>{ 0x6F1A3ED2,0xF965,0x545E,{ 0xBD,0x44,0x44,0x1D,0xB1,0x79,0x4F,0x5F } }; // 6F1A3ED2-F965-545E-BD44-441DB1794F5F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverterStatics>{ 0xF1A547F3,0x4C0E,0x5F23,{ 0x9F,0x1E,0xA4,0xC0,0x8C,0xAB,0xDE,0x88 } }; // F1A547F3-4C0E-5F23-9F1E-A4C08CABDE88
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverter>{ 0xB36AA8AE,0x166E,0x5CA5,{ 0x93,0xD2,0x95,0xE9,0x90,0x7C,0x12,0x22 } }; // B36AA8AE-166E-5CA5-93D2-95E9907C1222
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverterStatics>{ 0xD6995649,0x8AD2,0x5C38,{ 0xBC,0x45,0xB8,0xEF,0x86,0xFF,0x5F,0x69 } }; // D6995649-8AD2-5C38-BC45-B8EF86FF5F69
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanel>{ 0x44A0708C,0xAC3C,0x53B8,{ 0xBB,0xAA,0x3B,0x38,0x65,0x3E,0x84,0x3D } }; // 44A0708C-AC3C-53B8-BBAA-3B38653E843D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelFactory>{ 0x00D1A8C5,0xF631,0x564A,{ 0x8E,0x9C,0x7C,0x5C,0xCA,0xD2,0x38,0xDE } }; // 00D1A8C5-F631-564A-8E9C-7C5CCAD238DE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelStatics>{ 0x335DDBFD,0x977A,0x58A2,{ 0xAF,0x17,0x4B,0x77,0x61,0x44,0xF2,0x45 } }; // 335DDBFD-977A-58A2-AF17-4B776144F245
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenter>{ 0x4DBEF429,0x53B1,0x511A,{ 0x99,0x88,0x70,0xBB,0xCD,0x2E,0xE1,0x22 } }; // 4DBEF429-53B1-511A-9988-70BBCD2EE122
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterFactory>{ 0x4997847B,0xB558,0x5C8C,{ 0x82,0x98,0xBE,0x15,0x32,0xE8,0x98,0xEC } }; // 4997847B-B558-5C8C-8298-BE1532E898EC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterStatics>{ 0xFA3915D4,0xCB66,0x522D,{ 0x83,0xE2,0x36,0xE9,0x88,0xFF,0xA0,0xA4 } }; // FA3915D4-CB66-522D-83E2-36E988FFA0A4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter>{ 0x0489BF60,0xF630,0x510C,{ 0x98,0xDC,0xB1,0x23,0x22,0x26,0x0E,0x1F } }; // 0489BF60-F630-510C-98DC-B12322260E1F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter2>{ 0x3F775730,0x3713,0x5B3B,{ 0x96,0x00,0x53,0xB7,0x9F,0xFF,0x2E,0x35 } }; // 3F775730-3713-5B3B-9600-53B79FFF2E35
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory>{ 0xB28B0160,0x022C,0x593C,{ 0xAB,0x9A,0x7B,0x3D,0xED,0x2C,0x07,0x54 } }; // B28B0160-022C-593C-AB9A-7B3DED2C0754
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics>{ 0xF0A5E6E7,0xF626,0x5430,{ 0x8E,0xF2,0xDE,0x75,0xAE,0x72,0x90,0x0F } }; // F0A5E6E7-F626-5430-8EF2-DE75AE72900F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics2>{ 0x1F37F471,0x2F5C,0x5CE3,{ 0xAA,0x21,0xA5,0x0A,0xCB,0xFA,0x34,0xF9 } }; // 1F37F471-2F5C-5CE3-AA21-A50ACBFA34F9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettings>{ 0xA5119750,0xFA71,0x56F2,{ 0xBF,0xA4,0x79,0x9D,0x9F,0x30,0x4C,0xB8 } }; // A5119750-FA71-56F2-BFA4-799D9F304CB8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsFactory>{ 0x19EF1328,0x52C7,0x55E3,{ 0xB1,0xBB,0x92,0x3F,0x2F,0x39,0xBD,0x6E } }; // 19EF1328-52C7-55E3-B1BB-923F2F39BD6E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsStatics>{ 0xBA971CFD,0x5037,0x5B8B,{ 0xA9,0x5E,0x65,0x2C,0x65,0xEC,0xAA,0xBF } }; // BA971CFD-5037-5B8B-A95E-652C65ECAABF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint>{ 0x5828FB51,0x8EBB,0x596D,{ 0xA8,0x71,0x50,0x06,0x34,0x79,0x36,0x2D } }; // 5828FB51-8EBB-596D-A871-50063479362D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPointFactory>{ 0xF2FD8403,0x679E,0x5C31,{ 0xB4,0x31,0x72,0xA0,0xE0,0x01,0x4E,0x6A } }; // F2FD8403-679E-5C31-B431-72A0E0014E6A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint>{ 0x1FA6DBBE,0x5E11,0x5D32,{ 0x87,0x3B,0xC9,0x2B,0x1D,0x17,0x15,0x38 } }; // 1FA6DBBE-5E11-5D32-873B-C92B1D171538
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPointFactory>{ 0x7D032A7C,0xD91C,0x5660,{ 0xB1,0xC2,0xB3,0x6E,0x88,0x10,0xAC,0x65 } }; // 7D032A7C-D91C-5660-B1C2-B36E8810AC65
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>{ 0x600111D4,0x139A,0x57DF,{ 0x8C,0x8C,0x28,0x9E,0x30,0x7D,0x0C,0xC3 } }; // 600111D4-139A-57DF-8C8C-289E307D0CC3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgs>{ 0x317BBC1A,0x0CF7,0x5815,{ 0xA8,0xA7,0xBD,0x7E,0x6E,0xEF,0x96,0x6A } }; // 317BBC1A-0CF7-5815-A8A7-BD7E6EEF966A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgsFactory>{ 0x9221D193,0x6F82,0x5E21,{ 0xAA,0xCC,0x0B,0x14,0x60,0x81,0x8A,0xB5 } }; // 9221D193-6F82-5E21-AACC-0B1460818AB5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgs>{ 0x9CA050FA,0x6A7B,0x5BED,{ 0x9E,0x26,0x8F,0x2D,0xA0,0xEE,0x73,0xA1 } }; // 9CA050FA-6A7B-5BED-9E26-8F2DA0EE73A1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgsFactory>{ 0x1CCE9A33,0x698D,0x54DC,{ 0xB1,0x44,0xD6,0x8B,0x9E,0x7B,0x76,0xC2 } }; // 1CCE9A33-698D-54DC-B144-D68B9E7B76C2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs>{ 0xE7F305FA,0x4073,0x5D88,{ 0x8B,0xF1,0xAE,0x4E,0xCB,0x92,0x08,0xBF } }; // E7F305FA-4073-5D88-8BF1-AE4ECB9208BF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgsFactory>{ 0x7ECF01A7,0xEF3F,0x5AF9,{ 0x93,0xB4,0x38,0xBC,0x1B,0xAF,0xD3,0x35 } }; // 7ECF01A7-EF3F-5AF9-93B4-38BC1BAFD335
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs>{ 0x73F16B99,0x7310,0x5C73,{ 0x87,0x2B,0x27,0x6E,0x5A,0x9D,0x49,0x13 } }; // 73F16B99-7310-5C73-872B-276E5A9D4913
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgsFactory>{ 0x01675DC4,0x1074,0x54E8,{ 0xBE,0xBB,0x66,0xB0,0x3A,0x33,0xDA,0x0D } }; // 01675DC4-1074-54E8-BEBB-66B03A33DA0D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>{ 0x45503D90,0x1444,0x5D18,{ 0xAD,0xCC,0xB3,0xCD,0x1B,0x18,0xEB,0x6A } }; // 45503D90-1444-5D18-ADCC-B3CD1B18EB6A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterFactory>{ 0x9F5CDC57,0xD229,0x52B2,{ 0xAE,0xE4,0x37,0xC4,0x96,0x76,0x4E,0xA3 } }; // 9F5CDC57-D229-52B2-AEE4-37C496764EA3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterStatics>{ 0x31F5E061,0x1D56,0x5987,{ 0xBD,0xAA,0x71,0x4B,0xCC,0x3B,0x2B,0xFD } }; // 31F5E061-1D56-5987-BDAA-714BCC3B2BFD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint>{ 0x73D918FF,0xD16C,0x52CD,{ 0x96,0x57,0xE3,0x92,0xEE,0x08,0x86,0x8A } }; // 73D918FF-D16C-52CD-9657-E392EE08868A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase>{ 0x45D7319D,0xC9EB,0x5109,{ 0x96,0x68,0xFF,0x3F,0xC6,0xCC,0xDF,0x11 } }; // 45D7319D-C9EB-5109-9668-FF3FC6CCDF11
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBaseFactory>{ 0x3FA2E552,0x1A45,0x5691,{ 0x99,0xDC,0x64,0x00,0x08,0x7C,0xBB,0x38 } }; // 3FA2E552-1A45-5691-99DC-6400087CBB38
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointFactory>{ 0x39304BC7,0x0E54,0x5C06,{ 0x89,0x20,0xAD,0xCF,0x67,0xE7,0xC4,0x66 } }; // 39304BC7-0E54-5C06-8920-ADCF67E7C466
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase>{ 0x14ED1089,0xFB97,0x5211,{ 0x8C,0x45,0xC3,0x52,0xCD,0x8B,0x96,0xA1 } }; // 14ED1089-FB97-5211-8C45-C352CD8B96A1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBaseFactory>{ 0x50266508,0x15F8,0x530A,{ 0xA2,0x13,0xE9,0x76,0xE0,0x4E,0x67,0x0B } }; // 50266508-15F8-530A-A213-E976E04E670B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListView>{ 0xEC48EFB5,0x2CB3,0x562B,{ 0x92,0x1C,0xE5,0x54,0x92,0x3C,0xE1,0xD5 } }; // EC48EFB5-2CB3-562B-921C-E554923CE1D5
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListViewFactory>{ 0x8A084FDD,0x86F0,0x51EE,{ 0x98,0xDF,0x5F,0xBD,0x0B,0x56,0x69,0xBE } }; // 8A084FDD-86F0-51EE-98DF-5FBD0B5669BE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint>{ 0x8101D353,0x8DB3,0x5AC6,{ 0xA7,0xF8,0xB1,0x8E,0xB9,0xC1,0x23,0xAC } }; // 8101D353-8DB3-5AC6-A7F8-B18EB9C123AC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase>{ 0xC6D08756,0x0860,0x5C2D,{ 0xAB,0xEC,0x6E,0xB4,0xAA,0x4B,0x53,0xD7 } }; // C6D08756-0860-5C2D-ABEC-6EB4AA4B53D7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBaseFactory>{ 0x2C689EEA,0xB6CF,0x5024,{ 0x84,0x7B,0x58,0x93,0x55,0xD5,0xA2,0xFA } }; // 2C689EEA-B6CF-5024-847B-589355D5A2FA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointFactory>{ 0x0B3B5418,0xBFF6,0x5A9E,{ 0xB7,0x34,0xB6,0x8A,0xDF,0x49,0xF7,0x75 } }; // 0B3B5418-BFF6-5A9E-B734-B68ADF49F775
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::AutoSuggestBoxHelper>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelper; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorPickerSlider>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColumnMajorUniformToLargestGridLayout>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayout; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ComboBoxHelper>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelper; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBar>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::CommandBarFlyoutCommandBarTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusFilterConverter>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusToThicknessConverter>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::InfoBarPanel>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanel; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::MonochromaticOverlayPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::NavigationViewItemPresenterTemplateSettings>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettings; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedScrollSnapPoint>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::RepeatedZoomSnapPoint>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerAddScrollVelocityRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerInteractionRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPoint>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointBase>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::SnapPointBase>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::TabViewListView>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListView; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPoint>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint; };
    template <> struct default_interface<winrt::Microsoft::UI::Xaml::Controls::Primitives::ZoomSnapPointBase>{ using type = winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase; };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelper>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelperStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeepInteriorCornersSquareProperty(void**) noexcept = 0;
            virtual int32_t __stdcall SetKeepInteriorCornersSquare(void*, bool) noexcept = 0;
            virtual int32_t __stdcall GetKeepInteriorCornersSquare(void*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ColorChannel(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ColorChannel(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ColorChannelProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Color(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_Color(struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall get_HsvColor(winrt::Windows::Foundation::Numerics::float4*) noexcept = 0;
            virtual int32_t __stdcall put_HsvColor(winrt::Windows::Foundation::Numerics::float4) noexcept = 0;
            virtual int32_t __stdcall get_MinHue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinHue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxHue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxHue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinSaturation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinSaturation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxSaturation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxSaturation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinValue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxValue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Shape(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Shape(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Components(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Components(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_ColorChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ColorChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HsvColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinHueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxHueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinSaturationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxSaturationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShapeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ComponentsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayout>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_MaxColumns(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxColumns(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ColumnSpacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_ColumnSpacing(double) noexcept = 0;
            virtual int32_t __stdcall get_RowSpacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_RowSpacing(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_MaxColumnsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ColumnSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RowSpacingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelper>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelperStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeepInteriorCornersSquareProperty(void**) noexcept = 0;
            virtual int32_t __stdcall SetKeepInteriorCornersSquare(void*, bool) noexcept = 0;
            virtual int32_t __stdcall GetKeepInteriorCornersSquare(void*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FlyoutTemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarAutomationPropertiesStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ControlTypeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall GetControlType(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetControlType(void*, int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OpenAnimationStartPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_OpenAnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_CloseAnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_CurrentWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandedWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_WidthExpansionDelta(double*) noexcept = 0;
            virtual int32_t __stdcall get_WidthExpansionAnimationStartPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_WidthExpansionAnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_WidthExpansionMoreButtonAnimationStartPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_WidthExpansionMoreButtonAnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandUpOverflowVerticalPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandDownOverflowVerticalPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandUpAnimationStartPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandUpAnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandUpAnimationHoldPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandDownAnimationStartPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandDownAnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandDownAnimationHoldPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ContentClipRect(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall get_OverflowContentClipRect(winrt::Windows::Foundation::Rect*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Filter(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Filter(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Scale(double*) noexcept = 0;
            virtual int32_t __stdcall put_Scale(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverterStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_FilterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ScaleProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ConversionKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ConversionKind(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Multiplier(double*) noexcept = 0;
            virtual int32_t __stdcall put_Multiplier(double) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverterStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_ConversionKindProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MultiplierProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanel>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalOrientationPadding(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalOrientationPadding(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOrientationPadding(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalOrientationPadding(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_HorizontalOrientationPaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOrientationPaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall SetHorizontalOrientationMargin(void*, struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall GetHorizontalOrientationMargin(void*, struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalOrientationMarginProperty(void**) noexcept = 0;
            virtual int32_t __stdcall SetVerticalOrientationMargin(void*, struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall GetVerticalOrientationMargin(void*, struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOrientationMarginProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SourceElement(void**) noexcept = 0;
            virtual int32_t __stdcall put_SourceElement(void*) noexcept = 0;
            virtual int32_t __stdcall get_ReplacementColor(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_ReplacementColor(struct struct_Windows_UI_Color) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_SourceElementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ReplacementColorProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Icon(void**) noexcept = 0;
            virtual int32_t __stdcall put_Icon(void*) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_InfoBadge(void**) noexcept = 0;
            virtual int32_t __stdcall put_InfoBadge(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettingsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics2>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_InfoBadgeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettings>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_SmallerIconWidth(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SmallerIconWidthProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Offset(double*) noexcept = 0;
            virtual int32_t __stdcall get_Interval(double*) noexcept = 0;
            virtual int32_t __stdcall get_Start(double*) noexcept = 0;
            virtual int32_t __stdcall get_End(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPointFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(double, double, double, double, int32_t, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Offset(double*) noexcept = 0;
            virtual int32_t __stdcall get_Interval(double*) noexcept = 0;
            virtual int32_t __stdcall get_Start(double*) noexcept = 0;
            virtual int32_t __stdcall get_End(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPointFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(double, double, double, double, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_AreScrollControllerInteractionsAllowed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_AreScrollerInteractionsAllowed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsInteracting(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsInteractionElementRailEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall get_InteractionElement(void**) noexcept = 0;
            virtual int32_t __stdcall get_InteractionElementScrollOrientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall SetExpressionAnimationSources(void*, void*, void*, void*, void*) noexcept = 0;
            virtual int32_t __stdcall SetScrollMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall SetValues(double, double, double, double) noexcept = 0;
            virtual int32_t __stdcall GetScrollAnimation(int32_t, winrt::Windows::Foundation::Numerics::float2, void*, void**) noexcept = 0;
            virtual int32_t __stdcall NotifyScrollCompleted(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_ScrollToRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ScrollToRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ScrollByRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ScrollByRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_AddScrollVelocityRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_AddScrollVelocityRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_InteractionRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_InteractionRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_InteractionInfoChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_InteractionInfoChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OffsetVelocity(float*) noexcept = 0;
            virtual int32_t __stdcall get_InertiaDecayRate(void**) noexcept = 0;
            virtual int32_t __stdcall get_CorrelationId(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CorrelationId(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(float, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_PointerPoint(void**) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_OffsetDelta(double*) noexcept = 0;
            virtual int32_t __stdcall get_Options(void**) noexcept = 0;
            virtual int32_t __stdcall get_CorrelationId(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CorrelationId(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(double, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Offset(double*) noexcept = 0;
            virtual int32_t __stdcall get_Options(void**) noexcept = 0;
            virtual int32_t __stdcall get_CorrelationId(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CorrelationId(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgsFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(double, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Background(void**) noexcept = 0;
            virtual int32_t __stdcall put_Background(void*) noexcept = 0;
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_ExpressionAnimationSources(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalOffset(double*) noexcept = 0;
            virtual int32_t __stdcall get_ZoomFactor(float*) noexcept = 0;
            virtual int32_t __stdcall get_ExtentWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ExtentHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ViewportHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollableWidth(double*) noexcept = 0;
            virtual int32_t __stdcall get_ScrollableHeight(double*) noexcept = 0;
            virtual int32_t __stdcall get_ContentOrientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ContentOrientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollChainMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalScrollChainMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollChainMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalScrollChainMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollRailMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalScrollRailMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollRailMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalScrollRailMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalScrollMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalScrollMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ZoomChainMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ZoomChainMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ZoomMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ZoomMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IgnoredInputKinds(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_IgnoredInputKinds(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinZoomFactor(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinZoomFactor(double) noexcept = 0;
            virtual int32_t __stdcall get_MaxZoomFactor(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxZoomFactor(double) noexcept = 0;
            virtual int32_t __stdcall get_State(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollController(void**) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalScrollController(void*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollController(void**) noexcept = 0;
            virtual int32_t __stdcall put_VerticalScrollController(void*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalAnchorRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalAnchorRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_VerticalAnchorRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalAnchorRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSnapPoints(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSnapPoints(void**) noexcept = 0;
            virtual int32_t __stdcall get_ZoomSnapPoints(void**) noexcept = 0;
            virtual int32_t __stdcall ScrollTo(double, double, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ScrollToWithOptions(double, double, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ScrollBy(double, double, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ScrollByWithOptions(double, double, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall AddScrollVelocity(winrt::Windows::Foundation::Numerics::float2, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ZoomTo(float, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ZoomToWithOptions(float, void*, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ZoomBy(float, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall ZoomByWithOptions(float, void*, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall AddZoomVelocity(float, void*, void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall add_ExtentChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ExtentChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_StateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_StateChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ViewChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ViewChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ScrollAnimationStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ScrollAnimationStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ZoomAnimationStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ZoomAnimationStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ScrollCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ScrollCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ZoomCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ZoomCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_BringingIntoView(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_BringingIntoView(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_AnchorRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_AnchorRequested(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterStatics>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_BackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentOrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollChainModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollChainModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollRailModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollRailModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalScrollModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalScrollModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ZoomChainModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ZoomModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IgnoredInputKindsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinZoomFactorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxZoomFactorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalAnchorRatioProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalAnchorRatioProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Value(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Alignment(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBaseFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(double, int32_t, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBaseFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListView>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListViewFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall get_Value(double*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBaseFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointFactory>
    {
        struct WINRT_IMPL_NOVTABLE type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(double, void*, void**, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IAutoSuggestBoxHelper
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelper>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IAutoSuggestBoxHelper<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IAutoSuggestBoxHelperStatics
    {
        [[nodiscard]] auto KeepInteriorCornersSquareProperty() const;
        auto SetKeepInteriorCornersSquare(winrt::Windows::UI::Xaml::Controls::AutoSuggestBox const& autoSuggestBox, bool value) const;
        auto GetKeepInteriorCornersSquare(winrt::Windows::UI::Xaml::Controls::AutoSuggestBox const& autoSuggestBox) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IAutoSuggestBoxHelperStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IAutoSuggestBoxHelperStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSlider
    {
        [[nodiscard]] auto ColorChannel() const;
        auto ColorChannel(winrt::Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSlider>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSlider<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderStatics
    {
        [[nodiscard]] auto ColorChannelProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorPickerSliderStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorPickerSliderStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum
    {
        [[nodiscard]] auto Color() const;
        auto Color(winrt::Windows::UI::Color const& value) const;
        [[nodiscard]] auto HsvColor() const;
        auto HsvColor(winrt::Windows::Foundation::Numerics::float4 const& value) const;
        [[nodiscard]] auto MinHue() const;
        auto MinHue(int32_t value) const;
        [[nodiscard]] auto MaxHue() const;
        auto MaxHue(int32_t value) const;
        [[nodiscard]] auto MinSaturation() const;
        auto MinSaturation(int32_t value) const;
        [[nodiscard]] auto MaxSaturation() const;
        auto MaxSaturation(int32_t value) const;
        [[nodiscard]] auto MinValue() const;
        auto MinValue(int32_t value) const;
        [[nodiscard]] auto MaxValue() const;
        auto MaxValue(int32_t value) const;
        [[nodiscard]] auto Shape() const;
        auto Shape(winrt::Microsoft::UI::Xaml::Controls::ColorSpectrumShape const& value) const;
        [[nodiscard]] auto Components() const;
        auto Components(winrt::Microsoft::UI::Xaml::Controls::ColorSpectrumComponents const& value) const;
        auto ColorChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum, winrt::Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const;
        using ColorChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum>::remove_ColorChanged>;
        [[nodiscard]] auto ColorChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ColorSpectrum, winrt::Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const;
        auto ColorChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrum>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrum<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics
    {
        [[nodiscard]] auto ColorProperty() const;
        [[nodiscard]] auto HsvColorProperty() const;
        [[nodiscard]] auto MinHueProperty() const;
        [[nodiscard]] auto MaxHueProperty() const;
        [[nodiscard]] auto MinSaturationProperty() const;
        [[nodiscard]] auto MaxSaturationProperty() const;
        [[nodiscard]] auto MinValueProperty() const;
        [[nodiscard]] auto MaxValueProperty() const;
        [[nodiscard]] auto ShapeProperty() const;
        [[nodiscard]] auto ComponentsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColorSpectrumStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColorSpectrumStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayout
    {
        [[nodiscard]] auto MaxColumns() const;
        auto MaxColumns(int32_t value) const;
        [[nodiscard]] auto ColumnSpacing() const;
        auto ColumnSpacing(double value) const;
        [[nodiscard]] auto RowSpacing() const;
        auto RowSpacing(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutStatics
    {
        [[nodiscard]] auto MaxColumnsProperty() const;
        [[nodiscard]] auto ColumnSpacingProperty() const;
        [[nodiscard]] auto RowSpacingProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IColumnMajorUniformToLargestGridLayoutStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IColumnMajorUniformToLargestGridLayoutStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IComboBoxHelper
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelper>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IComboBoxHelper<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IComboBoxHelperStatics
    {
        [[nodiscard]] auto KeepInteriorCornersSquareProperty() const;
        auto SetKeepInteriorCornersSquare(winrt::Windows::UI::Xaml::Controls::ComboBox const& comboBox, bool value) const;
        auto GetKeepInteriorCornersSquare(winrt::Windows::UI::Xaml::Controls::ComboBox const& comboBox) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IComboBoxHelperStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IComboBoxHelperStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar
    {
        [[nodiscard]] auto FlyoutTemplateSettings() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBar>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBar<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarAutomationPropertiesStatics
    {
        [[nodiscard]] auto ControlTypeProperty() const;
        auto GetControlType(winrt::Windows::UI::Xaml::UIElement const& element) const;
        auto SetControlType(winrt::Windows::UI::Xaml::UIElement const& element, winrt::Windows::UI::Xaml::Automation::Peers::AutomationControlType const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarAutomationPropertiesStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarAutomationPropertiesStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings
    {
        [[nodiscard]] auto OpenAnimationStartPosition() const;
        [[nodiscard]] auto OpenAnimationEndPosition() const;
        [[nodiscard]] auto CloseAnimationEndPosition() const;
        [[nodiscard]] auto CurrentWidth() const;
        [[nodiscard]] auto ExpandedWidth() const;
        [[nodiscard]] auto WidthExpansionDelta() const;
        [[nodiscard]] auto WidthExpansionAnimationStartPosition() const;
        [[nodiscard]] auto WidthExpansionAnimationEndPosition() const;
        [[nodiscard]] auto WidthExpansionMoreButtonAnimationStartPosition() const;
        [[nodiscard]] auto WidthExpansionMoreButtonAnimationEndPosition() const;
        [[nodiscard]] auto ExpandUpOverflowVerticalPosition() const;
        [[nodiscard]] auto ExpandDownOverflowVerticalPosition() const;
        [[nodiscard]] auto ExpandUpAnimationStartPosition() const;
        [[nodiscard]] auto ExpandUpAnimationEndPosition() const;
        [[nodiscard]] auto ExpandUpAnimationHoldPosition() const;
        [[nodiscard]] auto ExpandDownAnimationStartPosition() const;
        [[nodiscard]] auto ExpandDownAnimationEndPosition() const;
        [[nodiscard]] auto ExpandDownAnimationHoldPosition() const;
        [[nodiscard]] auto ContentClipRect() const;
        [[nodiscard]] auto OverflowContentClipRect() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICommandBarFlyoutCommandBarTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICommandBarFlyoutCommandBarTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverter
    {
        [[nodiscard]] auto Filter() const;
        auto Filter(winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusFilterKind const& value) const;
        [[nodiscard]] auto Scale() const;
        auto Scale(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverterStatics
    {
        [[nodiscard]] auto FilterProperty() const;
        [[nodiscard]] auto ScaleProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusFilterConverterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusFilterConverterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverter
    {
        [[nodiscard]] auto ConversionKind() const;
        auto ConversionKind(winrt::Microsoft::UI::Xaml::Controls::Primitives::CornerRadiusToThicknessConverterKind const& value) const;
        [[nodiscard]] auto Multiplier() const;
        auto Multiplier(double value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverterStatics
    {
        [[nodiscard]] auto ConversionKindProperty() const;
        [[nodiscard]] auto MultiplierProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ICornerRadiusToThicknessConverterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ICornerRadiusToThicknessConverterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanel
    {
        [[nodiscard]] auto HorizontalOrientationPadding() const;
        auto HorizontalOrientationPadding(winrt::Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] auto VerticalOrientationPadding() const;
        auto VerticalOrientationPadding(winrt::Windows::UI::Xaml::Thickness const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanel>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanel<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelStatics
    {
        [[nodiscard]] auto HorizontalOrientationPaddingProperty() const;
        [[nodiscard]] auto VerticalOrientationPaddingProperty() const;
        auto SetHorizontalOrientationMargin(winrt::Windows::UI::Xaml::DependencyObject const& object, winrt::Windows::UI::Xaml::Thickness const& value) const;
        auto GetHorizontalOrientationMargin(winrt::Windows::UI::Xaml::DependencyObject const& object) const;
        [[nodiscard]] auto HorizontalOrientationMarginProperty() const;
        auto SetVerticalOrientationMargin(winrt::Windows::UI::Xaml::DependencyObject const& object, winrt::Windows::UI::Xaml::Thickness const& value) const;
        auto GetVerticalOrientationMargin(winrt::Windows::UI::Xaml::DependencyObject const& object) const;
        [[nodiscard]] auto VerticalOrientationMarginProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IInfoBarPanelStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IInfoBarPanelStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenter
    {
        [[nodiscard]] auto SourceElement() const;
        auto SourceElement(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto ReplacementColor() const;
        auto ReplacementColor(winrt::Windows::UI::Color const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterStatics
    {
        [[nodiscard]] auto SourceElementProperty() const;
        [[nodiscard]] auto ReplacementColorProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IMonochromaticOverlayPresenterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IMonochromaticOverlayPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter
    {
        [[nodiscard]] auto Icon() const;
        auto Icon(winrt::Windows::UI::Xaml::Controls::IconElement const& value) const;
        [[nodiscard]] auto TemplateSettings() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter2
    {
        [[nodiscard]] auto InfoBadge() const;
        auto InfoBadge(winrt::Microsoft::UI::Xaml::Controls::InfoBadge const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenter2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenter2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics
    {
        [[nodiscard]] auto IconProperty() const;
        [[nodiscard]] auto TemplateSettingsProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics2
    {
        [[nodiscard]] auto InfoBadgeProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterStatics2>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterStatics2<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettings
    {
        [[nodiscard]] auto IconWidth() const;
        [[nodiscard]] auto SmallerIconWidth() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsStatics
    {
        [[nodiscard]] auto IconWidthProperty() const;
        [[nodiscard]] auto SmallerIconWidthProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::INavigationViewItemPresenterTemplateSettingsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_INavigationViewItemPresenterTemplateSettingsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint
    {
        [[nodiscard]] auto Offset() const;
        [[nodiscard]] auto Interval() const;
        [[nodiscard]] auto Start() const;
        [[nodiscard]] auto End() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPoint>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPoint<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPointFactory
    {
        auto CreateInstance(double offset, double interval, double start, double end, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment const& alignment, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedScrollSnapPointFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedScrollSnapPointFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint
    {
        [[nodiscard]] auto Offset() const;
        [[nodiscard]] auto Interval() const;
        [[nodiscard]] auto Start() const;
        [[nodiscard]] auto End() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPoint>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPoint<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPointFactory
    {
        auto CreateInstance(double offset, double interval, double start, double end, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IRepeatedZoomSnapPointFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IRepeatedZoomSnapPointFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController
    {
        [[nodiscard]] auto AreScrollControllerInteractionsAllowed() const;
        [[nodiscard]] auto AreScrollerInteractionsAllowed() const;
        [[nodiscard]] auto IsInteracting() const;
        [[nodiscard]] auto IsInteractionElementRailEnabled() const;
        [[nodiscard]] auto InteractionElement() const;
        [[nodiscard]] auto InteractionElementScrollOrientation() const;
        auto SetExpressionAnimationSources(winrt::Windows::UI::Composition::CompositionPropertySet const& propertySet, param::hstring const& minOffsetPropertyName, param::hstring const& maxOffsetPropertyName, param::hstring const& offsetPropertyName, param::hstring const& multiplierPropertyName) const;
        auto SetScrollMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollMode const& scrollMode) const;
        auto SetValues(double minOffset, double maxOffset, double offset, double viewport) const;
        auto GetScrollAnimation(int32_t correlationId, winrt::Windows::Foundation::Numerics::float2 const& currentPosition, winrt::Windows::UI::Composition::CompositionAnimation const& defaultAnimation) const;
        auto NotifyScrollCompleted(int32_t correlationId) const;
        auto ScrollToRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs> const& handler) const;
        using ScrollToRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>::remove_ScrollToRequested>;
        [[nodiscard]] auto ScrollToRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollToRequestedEventArgs> const& handler) const;
        auto ScrollToRequested(winrt::event_token const& token) const noexcept;
        auto ScrollByRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs> const& handler) const;
        using ScrollByRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>::remove_ScrollByRequested>;
        [[nodiscard]] auto ScrollByRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerScrollByRequestedEventArgs> const& handler) const;
        auto ScrollByRequested(winrt::event_token const& token) const noexcept;
        auto AddScrollVelocityRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerAddScrollVelocityRequestedEventArgs> const& handler) const;
        using AddScrollVelocityRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>::remove_AddScrollVelocityRequested>;
        [[nodiscard]] auto AddScrollVelocityRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerAddScrollVelocityRequestedEventArgs> const& handler) const;
        auto AddScrollVelocityRequested(winrt::event_token const& token) const noexcept;
        auto InteractionRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerInteractionRequestedEventArgs> const& handler) const;
        using InteractionRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>::remove_InteractionRequested>;
        [[nodiscard]] auto InteractionRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollControllerInteractionRequestedEventArgs> const& handler) const;
        auto InteractionRequested(winrt::event_token const& token) const noexcept;
        auto InteractionInfoChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using InteractionInfoChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>::remove_InteractionInfoChanged>;
        [[nodiscard]] auto InteractionInfoChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto InteractionInfoChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollController<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgs
    {
        [[nodiscard]] auto OffsetVelocity() const;
        [[nodiscard]] auto InertiaDecayRate() const;
        [[nodiscard]] auto CorrelationId() const;
        auto CorrelationId(int32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgsFactory
    {
        auto CreateInstance(float offsetVelocity, winrt::Windows::Foundation::IReference<float> const& inertiaDecayRate) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerAddScrollVelocityRequestedEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerAddScrollVelocityRequestedEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerInteractionRequestedEventArgs
    {
        [[nodiscard]] auto PointerPoint() const;
        [[nodiscard]] auto Handled() const;
        auto Handled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerInteractionRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerInteractionRequestedEventArgsFactory
    {
        auto CreateInstance(winrt::Windows::UI::Input::PointerPoint const& pointerPoint) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerInteractionRequestedEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerInteractionRequestedEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgs
    {
        [[nodiscard]] auto OffsetDelta() const;
        [[nodiscard]] auto Options() const;
        [[nodiscard]] auto CorrelationId() const;
        auto CorrelationId(int32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgsFactory
    {
        auto CreateInstance(double offsetDelta, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollOptions const& options) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollByRequestedEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollByRequestedEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgs
    {
        [[nodiscard]] auto Offset() const;
        [[nodiscard]] auto Options() const;
        [[nodiscard]] auto CorrelationId() const;
        auto CorrelationId(int32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgsFactory
    {
        auto CreateInstance(double offset, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollOptions const& options) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollControllerScrollToRequestedEventArgsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollControllerScrollToRequestedEventArgsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter
    {
        [[nodiscard]] auto Background() const;
        auto Background(winrt::Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] auto Content() const;
        auto Content(winrt::Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] auto ExpressionAnimationSources() const;
        [[nodiscard]] auto HorizontalOffset() const;
        [[nodiscard]] auto VerticalOffset() const;
        [[nodiscard]] auto ZoomFactor() const;
        [[nodiscard]] auto ExtentWidth() const;
        [[nodiscard]] auto ExtentHeight() const;
        [[nodiscard]] auto ViewportWidth() const;
        [[nodiscard]] auto ViewportHeight() const;
        [[nodiscard]] auto ScrollableWidth() const;
        [[nodiscard]] auto ScrollableHeight() const;
        [[nodiscard]] auto ContentOrientation() const;
        auto ContentOrientation(winrt::Microsoft::UI::Xaml::Controls::ScrollingContentOrientation const& value) const;
        [[nodiscard]] auto HorizontalScrollChainMode() const;
        auto HorizontalScrollChainMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingChainMode const& value) const;
        [[nodiscard]] auto VerticalScrollChainMode() const;
        auto VerticalScrollChainMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingChainMode const& value) const;
        [[nodiscard]] auto HorizontalScrollRailMode() const;
        auto HorizontalScrollRailMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingRailMode const& value) const;
        [[nodiscard]] auto VerticalScrollRailMode() const;
        auto VerticalScrollRailMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingRailMode const& value) const;
        [[nodiscard]] auto HorizontalScrollMode() const;
        auto HorizontalScrollMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollMode const& value) const;
        [[nodiscard]] auto VerticalScrollMode() const;
        auto VerticalScrollMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollMode const& value) const;
        [[nodiscard]] auto ZoomChainMode() const;
        auto ZoomChainMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingChainMode const& value) const;
        [[nodiscard]] auto ZoomMode() const;
        auto ZoomMode(winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomMode const& value) const;
        [[nodiscard]] auto IgnoredInputKinds() const;
        auto IgnoredInputKinds(winrt::Microsoft::UI::Xaml::Controls::ScrollingInputKinds const& value) const;
        [[nodiscard]] auto MinZoomFactor() const;
        auto MinZoomFactor(double value) const;
        [[nodiscard]] auto MaxZoomFactor() const;
        auto MaxZoomFactor(double value) const;
        [[nodiscard]] auto State() const;
        [[nodiscard]] auto HorizontalScrollController() const;
        auto HorizontalScrollController(winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController const& value) const;
        [[nodiscard]] auto VerticalScrollController() const;
        auto VerticalScrollController(winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollController const& value) const;
        [[nodiscard]] auto HorizontalAnchorRatio() const;
        auto HorizontalAnchorRatio(double value) const;
        [[nodiscard]] auto VerticalAnchorRatio() const;
        auto VerticalAnchorRatio(double value) const;
        [[nodiscard]] auto HorizontalSnapPoints() const;
        [[nodiscard]] auto VerticalSnapPoints() const;
        [[nodiscard]] auto ZoomSnapPoints() const;
        auto ScrollTo(double horizontalOffset, double verticalOffset) const;
        auto ScrollTo(double horizontalOffset, double verticalOffset, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollOptions const& options) const;
        auto ScrollBy(double horizontalOffsetDelta, double verticalOffsetDelta) const;
        auto ScrollBy(double horizontalOffsetDelta, double verticalOffsetDelta, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollOptions const& options) const;
        auto AddScrollVelocity(winrt::Windows::Foundation::Numerics::float2 const& offsetsVelocity, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& inertiaDecayRate) const;
        auto ZoomTo(float zoomFactor, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& centerPoint) const;
        auto ZoomTo(float zoomFactor, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& centerPoint, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomOptions const& options) const;
        auto ZoomBy(float zoomFactorDelta, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& centerPoint) const;
        auto ZoomBy(float zoomFactorDelta, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& centerPoint, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomOptions const& options) const;
        auto AddZoomVelocity(float zoomFactorVelocity, winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::float2> const& centerPoint, winrt::Windows::Foundation::IReference<float> const& inertiaDecayRate) const;
        auto ExtentChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ExtentChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_ExtentChanged>;
        [[nodiscard]] auto ExtentChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto ExtentChanged(winrt::event_token const& token) const noexcept;
        auto StateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using StateChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_StateChanged>;
        [[nodiscard]] auto StateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto StateChanged(winrt::event_token const& token) const noexcept;
        auto ViewChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ViewChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_ViewChanged>;
        [[nodiscard]] auto ViewChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Windows::Foundation::IInspectable> const& handler) const;
        auto ViewChanged(winrt::event_token const& token) const noexcept;
        auto ScrollAnimationStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollAnimationStartingEventArgs> const& handler) const;
        using ScrollAnimationStarting_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_ScrollAnimationStarting>;
        [[nodiscard]] auto ScrollAnimationStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollAnimationStartingEventArgs> const& handler) const;
        auto ScrollAnimationStarting(winrt::event_token const& token) const noexcept;
        auto ZoomAnimationStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomAnimationStartingEventArgs> const& handler) const;
        using ZoomAnimationStarting_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_ZoomAnimationStarting>;
        [[nodiscard]] auto ZoomAnimationStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomAnimationStartingEventArgs> const& handler) const;
        auto ZoomAnimationStarting(winrt::event_token const& token) const noexcept;
        auto ScrollCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollCompletedEventArgs> const& handler) const;
        using ScrollCompleted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_ScrollCompleted>;
        [[nodiscard]] auto ScrollCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingScrollCompletedEventArgs> const& handler) const;
        auto ScrollCompleted(winrt::event_token const& token) const noexcept;
        auto ZoomCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomCompletedEventArgs> const& handler) const;
        using ZoomCompleted_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_ZoomCompleted>;
        [[nodiscard]] auto ZoomCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingZoomCompletedEventArgs> const& handler) const;
        auto ZoomCompleted(winrt::event_token const& token) const noexcept;
        auto BringingIntoView(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingBringingIntoViewEventArgs> const& handler) const;
        using BringingIntoView_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_BringingIntoView>;
        [[nodiscard]] auto BringingIntoView(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingBringingIntoViewEventArgs> const& handler) const;
        auto BringingIntoView(winrt::event_token const& token) const noexcept;
        auto AnchorRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingAnchorRequestedEventArgs> const& handler) const;
        using AnchorRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter, &impl::abi_t<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>::remove_AnchorRequested>;
        [[nodiscard]] auto AnchorRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollPresenter, winrt::Microsoft::UI::Xaml::Controls::ScrollingAnchorRequestedEventArgs> const& handler) const;
        auto AnchorRequested(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics
    {
        [[nodiscard]] auto BackgroundProperty() const;
        [[nodiscard]] auto ContentProperty() const;
        [[nodiscard]] auto ContentOrientationProperty() const;
        [[nodiscard]] auto HorizontalScrollChainModeProperty() const;
        [[nodiscard]] auto VerticalScrollChainModeProperty() const;
        [[nodiscard]] auto HorizontalScrollRailModeProperty() const;
        [[nodiscard]] auto VerticalScrollRailModeProperty() const;
        [[nodiscard]] auto HorizontalScrollModeProperty() const;
        [[nodiscard]] auto VerticalScrollModeProperty() const;
        [[nodiscard]] auto ZoomChainModeProperty() const;
        [[nodiscard]] auto ZoomModeProperty() const;
        [[nodiscard]] auto IgnoredInputKindsProperty() const;
        [[nodiscard]] auto MinZoomFactorProperty() const;
        [[nodiscard]] auto MaxZoomFactorProperty() const;
        [[nodiscard]] auto HorizontalAnchorRatioProperty() const;
        [[nodiscard]] auto VerticalAnchorRatioProperty() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollPresenterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollPresenterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPoint
    {
        [[nodiscard]] auto Value() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPoint>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPoint<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBase
    {
        [[nodiscard]] auto Alignment() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBaseFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointBaseFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointBaseFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointFactory
    {
        auto CreateInstance(double snapPointValue, winrt::Microsoft::UI::Xaml::Controls::Primitives::ScrollSnapPointsAlignment const& alignment, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IScrollSnapPointFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IScrollSnapPointFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBase
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBaseFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ISnapPointBaseFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ISnapPointBaseFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ITabViewListView
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ITabViewListView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_ITabViewListViewFactory
    {
        auto CreateInstance(winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::ITabViewListViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_ITabViewListViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPoint
    {
        [[nodiscard]] auto Value() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPoint>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPoint<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBase
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBaseFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointBaseFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointBaseFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointFactory
    {
        auto CreateInstance(double snapPointValue, winrt::Windows::Foundation::IInspectable const& baseInterface, winrt::Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Xaml::Controls::Primitives::IZoomSnapPointFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_Primitives_IZoomSnapPointFactory<D>;
    };
}
#endif
